{"traceEvents": [{"ph": "M", "pid": 28243, "tid": 28243, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 28243, "tid": 874131, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 28243, "tid": 874131, "ts": 173956443143.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443146.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.hasattr"}, {"pid": 28243, "tid": 874131, "ts": 173956443143.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1033)"}, {"pid": 28243, "tid": 874131, "ts": 173956443151.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443152.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443152.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443153.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443152.1, "ph": "X", "cat": "fee", "dur": 0.94, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443153.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443152.04, "ph": "X", "cat": "fee", "dur": 1.06, "name": "isabs (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:60)"}, {"pid": 28243, "tid": 874131, "ts": 173956443154.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443155.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443155.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443155.04, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443155.12, "ph": "X", "cat": "fee", "dur": 0.88, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443156.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443154.04, "ph": "X", "cat": "fee", "dur": 2.02, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443157.02, "ph": "X", "cat": "fee", "dur": 3.98, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443161.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443157.0, "ph": "X", "cat": "fee", "dur": 4.06, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443162.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443162.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443163.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443163.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443163.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443163.12, "ph": "X", "cat": "fee", "dur": 0.88, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443162.04, "ph": "X", "cat": "fee", "dur": 1.98, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443164.06, "ph": "X", "cat": "fee", "dur": 2.94, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443167.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443164.04, "ph": "X", "cat": "fee", "dur": 3.02, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443168.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443168.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443169.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443169.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443169.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443169.12, "ph": "X", "cat": "fee", "dur": 0.88, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443168.04, "ph": "X", "cat": "fee", "dur": 1.98, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443170.06, "ph": "X", "cat": "fee", "dur": 10.94, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443181.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443170.04, "ph": "X", "cat": "fee", "dur": 11.02, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443181.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443182.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443182.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443182.06, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443183.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443183.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443182.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443185.02, "ph": "X", "cat": "fee", "dur": 3.98, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443189.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443185.0, "ph": "X", "cat": "fee", "dur": 4.06, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443189.08, "ph": "X", "cat": "fee", "dur": 0.92, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443190.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443190.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443190.08, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443191.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443191.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443190.02, "ph": "X", "cat": "fee", "dur": 1.98, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443192.04, "ph": "X", "cat": "fee", "dur": 2.96, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443196.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443192.02, "ph": "X", "cat": "fee", "dur": 4.02, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443196.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443197.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443197.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443197.06, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443198.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443198.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443197.0, "ph": "X", "cat": "fee", "dur": 1.08, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443199.02, "ph": "X", "cat": "fee", "dur": 2.98, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443203.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443199.0, "ph": "X", "cat": "fee", "dur": 4.04, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443203.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443204.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443204.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443204.06, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443205.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443205.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443204.0, "ph": "X", "cat": "fee", "dur": 1.08, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443206.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443209.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443205.1, "ph": "X", "cat": "fee", "dur": 3.96, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443210.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443210.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443211.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443211.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443211.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443211.12, "ph": "X", "cat": "fee", "dur": 0.88, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443210.04, "ph": "X", "cat": "fee", "dur": 1.98, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443212.06, "ph": "X", "cat": "fee", "dur": 3.94, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443216.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443212.04, "ph": "X", "cat": "fee", "dur": 4.02, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443216.08, "ph": "X", "cat": "fee", "dur": 0.92, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443217.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443217.1, "ph": "X", "cat": "fee", "dur": 0.9, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443217.08, "ph": "X", "cat": "fee", "dur": 0.94, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443219.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443219.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443217.02, "ph": "X", "cat": "fee", "dur": 2.98, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443220.04, "ph": "X", "cat": "fee", "dur": 2.96, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443223.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443220.02, "ph": "X", "cat": "fee", "dur": 4.0, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443224.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.partition"}, {"pid": 28243, "tid": 874131, "ts": 173956443225.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443225.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443225.04, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443225.12, "ph": "X", "cat": "fee", "dur": 0.88, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443226.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443224.08, "ph": "X", "cat": "fee", "dur": 1.98, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443226.1, "ph": "X", "cat": "fee", "dur": 3.9, "name": "posix.lstat"}, {"pid": 28243, "tid": 874131, "ts": 173956443230.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_stat.S_ISLNK"}, {"pid": 28243, "tid": 874131, "ts": 173956443226.08, "ph": "X", "cat": "fee", "dur": 3.98, "name": "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173956443151.06, "ph": "X", "cat": "fee", "dur": 79.02, "name": "_joinrealpath (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:397)"}, {"pid": 28243, "tid": 874131, "ts": 173956443231.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443231.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443231.14, "ph": "X", "cat": "fee", "dur": 0.86, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443231.12, "ph": "X", "cat": "fee", "dur": 0.9, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443232.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443231.06, "ph": "X", "cat": "fee", "dur": 1.02, "name": "isabs (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:60)"}, {"pid": 28243, "tid": 874131, "ts": 173956443232.12, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443233.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443233.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443233.08, "ph": "X", "cat": "fee", "dur": 0.92, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443234.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 173956443235.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443235.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443236.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443236.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443236.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443236.12, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443237.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443237.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443237.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443238.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173956443238.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.join"}, {"pid": 28243, "tid": 874131, "ts": 173956443232.1, "ph": "X", "cat": "fee", "dur": 6.9, "name": "normpath (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:334)"}, {"pid": 28243, "tid": 874131, "ts": 173956443231.0, "ph": "X", "cat": "fee", "dur": 8.02, "name": "abspath (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:373)"}, {"pid": 28243, "tid": 874131, "ts": 173956443151.0, "ph": "X", "cat": "fee", "dur": 88.04, "name": "realpath (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:388)"}, {"pid": 28243, "tid": 874131, "ts": 173956443239.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443240.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443240.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443240.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rfind"}, {"pid": 28243, "tid": 874131, "ts": 173956443242.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173956443242.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 28243, "tid": 874131, "ts": 173956443239.06, "ph": "X", "cat": "fee", "dur": 3.02, "name": "dirname (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:150)"}, {"pid": 28243, "tid": 874131, "ts": 173956443244.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443243.0, "ph": "X", "cat": "fee", "dur": 1.04, "name": "normcase (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:52)"}, {"pid": 28243, "tid": 874131, "ts": 173956443244.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "posix.fspath"}, {"pid": 28243, "tid": 874131, "ts": 173956443245.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173956443244.12, "ph": "X", "cat": "fee", "dur": 0.92, "name": "_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)"}, {"pid": 28243, "tid": 874131, "ts": 173956443245.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.startswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443245.1, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.endswith"}, {"pid": 28243, "tid": 874131, "ts": 173956443244.06, "ph": "X", "cat": "fee", "dur": 1.96, "name": "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173956443246.04, "ph": "X", "cat": "fee", "dur": 496.96, "name": "posix.listdir"}, {"pid": 28243, "tid": 874131, "ts": 173956443743.02, "ph": "X", "cat": "fee", "dur": 2.98, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 173956443747.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 173956443747.06, "ph": "X", "cat": "fee", "dur": 13.94, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 173956443789.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_locale.nl_langinfo"}, {"pid": 28243, "tid": 874131, "ts": 173956443788.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "getpreferredencoding (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py:33)"}, {"pid": 28243, "tid": 874131, "ts": 173956443797.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:260)"}, {"pid": 28243, "tid": 874131, "ts": 173956443796.0, "ph": "X", "cat": "fee", "dur": 2.02, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:309)"}, {"pid": 28243, "tid": 874131, "ts": 173956443763.0, "ph": "X", "cat": "fee", "dur": 38.0, "name": "io.open"}, {"pid": 28243, "tid": 874131, "ts": 173956603796.0, "ph": "X", "cat": "fee", "dur": 175331.0, "name": "_codecs.utf_8_decode"}, {"pid": 28243, "tid": 874131, "ts": 173956603789.0, "ph": "X", "cat": "fee", "dur": 175357.0, "name": "decode (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:319)"}, {"pid": 28243, "tid": 874131, "ts": 173956443803.0, "ph": "X", "cat": "fee", "dur": 643553.0, "name": "_io.TextIOWrapper.read"}, {"pid": 28243, "tid": 874131, "ts": 173957087360.0, "ph": "X", "cat": "fee", "dur": 39.0, "name": "_io.TextIOWrapper.__exit__"}, {"pid": 28243, "tid": 874131, "ts": 173956443762.02, "ph": "X", "cat": "fee", "dur": 643637.98, "name": "readInData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:44)"}, {"pid": 28243, "tid": 874131, "ts": 173957087428.0, "ph": "X", "cat": "fee", "dur": 2454375.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 173959541932.0, "ph": "X", "cat": "fee", "dur": 3505218.0, "name": "str.join"}, {"pid": 28243, "tid": 874131, "ts": 173964350342.0, "ph": "X", "cat": "fee", "dur": 35.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350405.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350424.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350418.0, "ph": "X", "cat": "fee", "dur": 6.04, "name": "isstring (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:595)"}, {"pid": 28243, "tid": 874131, "ts": 173964350447.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350447.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "isstring (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:595)"}, {"pid": 28243, "tid": 874131, "ts": 173964350479.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350510.0, "ph": "X", "cat": "fee", "dur": 12.0, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350478.0, "ph": "X", "cat": "fee", "dur": 44.02, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:224)"}, {"pid": 28243, "tid": 874131, "ts": 173964350525.0, "ph": "X", "cat": "fee", "dur": 17.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:76)"}, {"pid": 28243, "tid": 874131, "ts": 173964350574.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350570.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "tell (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:286)"}, {"pid": 28243, "tid": 874131, "ts": 173964350585.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:111)"}, {"pid": 28243, "tid": 874131, "ts": 173964350592.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350592.0, "ph": "X", "cat": "fee", "dur": 1.02, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 173964350594.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350594.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "tell (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:286)"}, {"pid": 28243, "tid": 874131, "ts": 173964350595.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350594.08, "ph": "X", "cat": "fee", "dur": 0.96, "name": "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 173964350596.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350595.06, "ph": "X", "cat": "fee", "dur": 6.94, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 173964350604.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.ord"}, {"pid": 28243, "tid": 874131, "ts": 173964350605.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350604.04, "ph": "X", "cat": "fee", "dur": 1.0, "name": "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 173964350605.08, "ph": "X", "cat": "fee", "dur": 0.92, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350605.06, "ph": "X", "cat": "fee", "dur": 0.96, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 173964350606.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.ord"}, {"pid": 28243, "tid": 874131, "ts": 173964350608.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350610.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350610.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 173964350611.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.ord"}, {"pid": 28243, "tid": 874131, "ts": 173964350612.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350611.06, "ph": "X", "cat": "fee", "dur": 0.98, "name": "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 173964350612.08, "ph": "X", "cat": "fee", "dur": 3.92, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350612.06, "ph": "X", "cat": "fee", "dur": 3.96, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 173964350616.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.ord"}, {"pid": 28243, "tid": 874131, "ts": 173964350617.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350617.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350617.04, "ph": "X", "cat": "fee", "dur": 0.96, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 173964350626.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "dict.get"}, {"pid": 28243, "tid": 874131, "ts": 173964350632.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.get"}, {"pid": 28243, "tid": 874131, "ts": 173964350622.0, "ph": "X", "cat": "fee", "dur": 10.04, "name": "_class_escape (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:295)"}, {"pid": 28243, "tid": 874131, "ts": 173964350633.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 173964350633.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350634.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350634.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 173964350636.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "type.fromkeys"}, {"pid": 28243, "tid": 874131, "ts": 173964350635.0, "ph": "X", "cat": "fee", "dur": 8.0, "name": "_uniq (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:432)"}, {"pid": 28243, "tid": 874131, "ts": 173964350643.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350644.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "list.insert"}, {"pid": 28243, "tid": 874131, "ts": 173964350647.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350647.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "append (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:172)"}, {"pid": 28243, "tid": 874131, "ts": 173964350648.0, "ph": "X", "cat": "fee", "dur": 11.0, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 173964350647.08, "ph": "X", "cat": "fee", "dur": 11.94, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 173964350660.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350660.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "tell (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:286)"}, {"pid": 28243, "tid": 874131, "ts": 173964350669.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350663.0, "ph": "X", "cat": "fee", "dur": 6.04, "name": "__len__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:160)"}, {"pid": 28243, "tid": 874131, "ts": 173964350680.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350681.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:111)"}, {"pid": 28243, "tid": 874131, "ts": 173964350673.0, "ph": "X", "cat": "fee", "dur": 8.04, "name": "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173964350682.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350682.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "__len__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:160)"}, {"pid": 28243, "tid": 874131, "ts": 173964350682.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350682.08, "ph": "X", "cat": "fee", "dur": 0.06, "name": "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173964350683.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350683.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173964350691.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350691.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173964350692.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 173964350693.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__setitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:168)"}, {"pid": 28243, "tid": 874131, "ts": 173964350695.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350694.04, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__len__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:160)"}, {"pid": 28243, "tid": 874131, "ts": 173964350694.02, "ph": "X", "cat": "fee", "dur": 1.04, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350703.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350703.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173964350577.0, "ph": "X", "cat": "fee", "dur": 127.0, "name": "_parse (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:493)"}, {"pid": 28243, "tid": 874131, "ts": 173964350704.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350705.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 173964350705.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350553.0, "ph": "X", "cat": "fee", "dur": 152.08, "name": "_parse_sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:435)"}, {"pid": 28243, "tid": 874131, "ts": 173964350706.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350706.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "fix_flags (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:921)"}, {"pid": 28243, "tid": 874131, "ts": 173964350457.0, "ph": "X", "cat": "fee", "dur": 253.02, "name": "parse (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:937)"}, {"pid": 28243, "tid": 874131, "ts": 173964350720.0, "ph": "X", "cat": "fee", "dur": 7.0, "name": "builtins.min"}, {"pid": 28243, "tid": 874131, "ts": 173964350728.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.min"}, {"pid": 28243, "tid": 874131, "ts": 173964350718.0, "ph": "X", "cat": "fee", "dur": 10.04, "name": "getwidth (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:174)"}, {"pid": 28243, "tid": 874131, "ts": 173964350733.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.min"}, {"pid": 28243, "tid": 874131, "ts": 173964350734.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.min"}, {"pid": 28243, "tid": 874131, "ts": 173964350717.0, "ph": "X", "cat": "fee", "dur": 17.04, "name": "getwidth (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:174)"}, {"pid": 28243, "tid": 874131, "ts": 173964350743.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_get_iscased (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:453)"}, {"pid": 28243, "tid": 874131, "ts": 173964350738.0, "ph": "X", "cat": "fee", "dur": 6.0, "name": "_get_literal_prefix (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:461)"}, {"pid": 28243, "tid": 874131, "ts": 173964350750.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_get_iscased (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:453)"}, {"pid": 28243, "tid": 874131, "ts": 173964350747.0, "ph": "X", "cat": "fee", "dur": 3.04, "name": "_get_charset_prefix (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:492)"}, {"pid": 28243, "tid": 874131, "ts": 173964350750.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350751.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350751.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350751.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350751.12, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350752.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.min"}, {"pid": 28243, "tid": 874131, "ts": 173964350752.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350752.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350713.0, "ph": "X", "cat": "fee", "dur": 39.12, "name": "_compile_info (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:536)"}, {"pid": 28243, "tid": 874131, "ts": 173964350762.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350762.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "__len__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:160)"}, {"pid": 28243, "tid": 874131, "ts": 173964350761.02, "ph": "X", "cat": "fee", "dur": 1.06, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350762.12, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350762.1, "ph": "X", "cat": "fee", "dur": 0.06, "name": "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173964350761.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_simple (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:423)"}, {"pid": 28243, "tid": 874131, "ts": 173964350763.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350763.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350763.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350763.14, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350764.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350766.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350766.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173964350779.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350786.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350795.0, "ph": "X", "cat": "fee", "dur": 10.0, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 173964350805.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350805.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 173964350806.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350806.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 173964350806.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350806.12, "ph": "X", "cat": "fee", "dur": 0.88, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 173964350807.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350807.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 173964350808.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350808.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350809.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350809.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350767.0, "ph": "X", "cat": "fee", "dur": 42.08, "name": "_optimize_charset (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:276)"}, {"pid": 28243, "tid": 874131, "ts": 173964350810.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350811.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350811.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350812.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350812.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350813.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350813.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350813.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350813.12, "ph": "X", "cat": "fee", "dur": 0.88, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350814.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350814.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350816.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350816.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350812.0, "ph": "X", "cat": "fee", "dur": 4.08, "name": "_compile_charset (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 173964350816.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350817.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350817.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 173964350765.0, "ph": "X", "cat": "fee", "dur": 56.02, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173964350822.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350822.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350755.0, "ph": "X", "cat": "fee", "dur": 67.08, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 173964350822.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 173964350712.0, "ph": "X", "cat": "fee", "dur": 111.0, "name": "_code (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:598)"}, {"pid": 28243, "tid": 874131, "ts": 173964350825.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350825.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "groups (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:81)"}, {"pid": 28243, "tid": 874131, "ts": 173964350826.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "dict.items"}, {"pid": 28243, "tid": 874131, "ts": 173964350828.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350828.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "groups (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:81)"}, {"pid": 28243, "tid": 874131, "ts": 173964350830.0, "ph": "X", "cat": "fee", "dur": 8.0, "name": "_sre.compile"}, {"pid": 28243, "tid": 874131, "ts": 173964350430.0, "ph": "X", "cat": "fee", "dur": 408.02, "name": "compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:759)"}, {"pid": 28243, "tid": 874131, "ts": 173964350846.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173964350864.0, "ph": "X", "cat": "fee", "dur": 14.0, "name": "__new__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:670)"}, {"pid": 28243, "tid": 874131, "ts": 173964350856.0, "ph": "X", "cat": "fee", "dur": 23.0, "name": "__call__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:358)"}, {"pid": 28243, "tid": 874131, "ts": 173964350882.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "__new__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:670)"}, {"pid": 28243, "tid": 874131, "ts": 173964350882.0, "ph": "X", "cat": "fee", "dur": 1.02, "name": "__call__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:358)"}, {"pid": 28243, "tid": 874131, "ts": 173964350845.0, "ph": "X", "cat": "fee", "dur": 38.04, "name": "__and__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:977)"}, {"pid": 28243, "tid": 874131, "ts": 173964350883.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 173964350330.0, "ph": "X", "cat": "fee", "dur": 559.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 173964350891.0, "ph": "X", "cat": "fee", "dur": 8195335.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 173964350327.0, "ph": "X", "cat": "fee", "dur": 8195920.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 173972546266.0, "ph": "X", "cat": "fee", "dur": 2352677.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 173957087426.0, "ph": "X", "cat": "fee", "dur": 17830864.0, "name": "cleanAndTokenize (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:61)"}, {"pid": 28243, "tid": 874131, "ts": 173974926828.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926876.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926906.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926903.02, "ph": "X", "cat": "fee", "dur": 6.98, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926903.0, "ph": "X", "cat": "fee", "dur": 8.0, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926922.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926912.02, "ph": "X", "cat": "fee", "dur": 14.98, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926912.0, "ph": "X", "cat": "fee", "dur": 15.02, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926934.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926927.06, "ph": "X", "cat": "fee", "dur": 6.98, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926927.04, "ph": "X", "cat": "fee", "dur": 7.02, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926947.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926935.02, "ph": "X", "cat": "fee", "dur": 12.98, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926935.0, "ph": "X", "cat": "fee", "dur": 13.02, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926954.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926948.06, "ph": "X", "cat": "fee", "dur": 6.94, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926948.04, "ph": "X", "cat": "fee", "dur": 6.98, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926966.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926955.06, "ph": "X", "cat": "fee", "dur": 14.94, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926955.04, "ph": "X", "cat": "fee", "dur": 14.98, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926988.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926995.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974927000.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974926996.02, "ph": "X", "cat": "fee", "dur": 4.98, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926996.0, "ph": "X", "cat": "fee", "dur": 5.02, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926992.02, "ph": "X", "cat": "fee", "dur": 9.02, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926992.0, "ph": "X", "cat": "fee", "dur": 9.06, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926971.02, "ph": "X", "cat": "fee", "dur": 30.06, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926971.0, "ph": "X", "cat": "fee", "dur": 30.1, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974927004.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974927002.02, "ph": "X", "cat": "fee", "dur": 2.98, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974927002.0, "ph": "X", "cat": "fee", "dur": 3.02, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974927023.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974927007.02, "ph": "X", "cat": "fee", "dur": 17.98, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974927007.0, "ph": "X", "cat": "fee", "dur": 18.02, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926866.02, "ph": "X", "cat": "fee", "dur": 159.02, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926866.0, "ph": "X", "cat": "fee", "dur": 159.06, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974927037.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974927026.02, "ph": "X", "cat": "fee", "dur": 11.98, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974927026.0, "ph": "X", "cat": "fee", "dur": 12.02, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974927054.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)"}, {"pid": 28243, "tid": 874131, "ts": 173974927038.06, "ph": "X", "cat": "fee", "dur": 17.94, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974927038.04, "ph": "X", "cat": "fee", "dur": 17.98, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926799.02, "ph": "X", "cat": "fee", "dur": 257.02, "name": "_abc._abc_subclasscheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926799.0, "ph": "X", "cat": "fee", "dur": 257.06, "name": "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)"}, {"pid": 28243, "tid": 874131, "ts": 173974926759.0, "ph": "X", "cat": "fee", "dur": 297.08, "name": "_abc._abc_instancecheck"}, {"pid": 28243, "tid": 874131, "ts": 173974926755.0, "ph": "X", "cat": "fee", "dur": 301.1, "name": "__instancecheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:117)"}, {"pid": 28243, "tid": 874131, "ts": 173974926738.0, "ph": "X", "cat": "fee", "dur": 318.12, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173974927057.0, "ph": "X", "cat": "fee", "dur": 5832835.0, "name": "_collections._count_elements"}, {"pid": 28243, "tid": 874131, "ts": 173974926697.0, "ph": "X", "cat": "fee", "dur": 5833218.0, "name": "update (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:649)"}, {"pid": 28243, "tid": 874131, "ts": 173974926665.0, "ph": "X", "cat": "fee", "dur": 5833274.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:581)"}, {"pid": 28243, "tid": 874131, "ts": 173956443762.0, "ph": "X", "cat": "fee", "dur": 24316183.0, "name": "getWordCount (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:78)"}, {"pid": 28243, "tid": 874131, "ts": 173982297521.0, "ph": "X", "cat": "fee", "dur": 23.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 173982298447.0, "ph": "X", "cat": "fee", "dur": 106.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 173982298581.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "Counter.values"}, {"pid": 28243, "tid": 874131, "ts": 173982298582.02, "ph": "X", "cat": "fee", "dur": 8306.98, "name": "builtins.sum"}, {"pid": 28243, "tid": 874131, "ts": 173982306902.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 173982298565.0, "ph": "X", "cat": "fee", "dur": 534154.0, "name": "getWordFrequencies (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:96)"}, {"pid": 28243, "tid": 874131, "ts": 173956443747.0, "ph": "X", "cat": "fee", "dur": 26388976.0, "name": "getWordData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:122)"}, {"pid": 28243, "tid": 874131, "ts": 173982833241.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 173982833246.0, "ph": "X", "cat": "fee", "dur": 32.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 173982833573.0, "ph": "X", "cat": "fee", "dur": 29.0, "name": "_locale.nl_langinfo"}, {"pid": 28243, "tid": 874131, "ts": 173982833550.0, "ph": "X", "cat": "fee", "dur": 53.0, "name": "getpreferredencoding (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py:33)"}, {"pid": 28243, "tid": 874131, "ts": 173982833680.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:260)"}, {"pid": 28243, "tid": 874131, "ts": 173982833671.0, "ph": "X", "cat": "fee", "dur": 14.02, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:309)"}, {"pid": 28243, "tid": 874131, "ts": 173982833304.0, "ph": "X", "cat": "fee", "dur": 396.0, "name": "io.open"}, {"pid": 28243, "tid": 874131, "ts": 173983079455.0, "ph": "X", "cat": "fee", "dur": 180647.0, "name": "_codecs.utf_8_decode"}, {"pid": 28243, "tid": 874131, "ts": 173983079443.0, "ph": "X", "cat": "fee", "dur": 180685.0, "name": "decode (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:319)"}, {"pid": 28243, "tid": 874131, "ts": 173982833707.0, "ph": "X", "cat": "fee", "dur": 852906.0, "name": "_io.TextIOWrapper.read"}, {"pid": 28243, "tid": 874131, "ts": 173983686627.0, "ph": "X", "cat": "fee", "dur": 64.0, "name": "_io.TextIOWrapper.__exit__"}, {"pid": 28243, "tid": 874131, "ts": 173982833287.0, "ph": "X", "cat": "fee", "dur": 853406.0, "name": "readInData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:44)"}, {"pid": 28243, "tid": 874131, "ts": 173983686734.0, "ph": "X", "cat": "fee", "dur": 3038724.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 173986725529.0, "ph": "X", "cat": "fee", "dur": 4292652.0, "name": "str.join"}, {"pid": 28243, "tid": 874131, "ts": 173993494463.0, "ph": "X", "cat": "fee", "dur": 30.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 173993494443.0, "ph": "X", "cat": "fee", "dur": 76.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 173993494528.0, "ph": "X", "cat": "fee", "dur": 9556210.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 173993494436.0, "ph": "X", "cat": "fee", "dur": 9556338.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174003050817.0, "ph": "X", "cat": "fee", "dur": 3385346.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 173983686725.0, "ph": "X", "cat": "fee", "dur": 22768177.0, "name": "cleanAndTokenize (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:61)"}, {"pid": 28243, "tid": 874131, "ts": 174006462836.0, "ph": "X", "cat": "fee", "dur": 33.0, "name": "_abc._abc_instancecheck"}, {"pid": 28243, "tid": 874131, "ts": 174006462831.0, "ph": "X", "cat": "fee", "dur": 38.02, "name": "__instancecheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:117)"}, {"pid": 28243, "tid": 874131, "ts": 174006462816.0, "ph": "X", "cat": "fee", "dur": 56.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174006462873.0, "ph": "X", "cat": "fee", "dur": 6222369.0, "name": "_collections._count_elements"}, {"pid": 28243, "tid": 874131, "ts": 174006462795.0, "ph": "X", "cat": "fee", "dur": 6222481.0, "name": "update (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:649)"}, {"pid": 28243, "tid": 874131, "ts": 174006462731.0, "ph": "X", "cat": "fee", "dur": 6222576.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:581)"}, {"pid": 28243, "tid": 874131, "ts": 173982833279.0, "ph": "X", "cat": "fee", "dur": 29852060.0, "name": "getWordCount (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:78)"}, {"pid": 28243, "tid": 874131, "ts": 174014571863.0, "ph": "X", "cat": "fee", "dur": 15.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174014571942.0, "ph": "X", "cat": "fee", "dur": 116.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174014572085.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "Counter.values"}, {"pid": 28243, "tid": 874131, "ts": 174014572087.0, "ph": "X", "cat": "fee", "dur": 8405.0, "name": "builtins.sum"}, {"pid": 28243, "tid": 874131, "ts": 174014580499.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174014572075.0, "ph": "X", "cat": "fee", "dur": 353036.0, "name": "getWordFrequencies (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:96)"}, {"pid": 28243, "tid": 874131, "ts": 173982833231.0, "ph": "X", "cat": "fee", "dur": 32091886.0, "name": "getWordData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:122)"}, {"pid": 28243, "tid": 874131, "ts": 174014925136.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174014925140.0, "ph": "X", "cat": "fee", "dur": 29.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174014925453.0, "ph": "X", "cat": "fee", "dur": 31.0, "name": "_locale.nl_langinfo"}, {"pid": 28243, "tid": 874131, "ts": 174014925436.0, "ph": "X", "cat": "fee", "dur": 51.0, "name": "getpreferredencoding (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py:33)"}, {"pid": 28243, "tid": 874131, "ts": 174014925556.0, "ph": "X", "cat": "fee", "dur": 6.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:260)"}, {"pid": 28243, "tid": 874131, "ts": 174014925547.0, "ph": "X", "cat": "fee", "dur": 17.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:309)"}, {"pid": 28243, "tid": 874131, "ts": 174014925180.0, "ph": "X", "cat": "fee", "dur": 395.0, "name": "io.open"}, {"pid": 28243, "tid": 874131, "ts": 174015180594.0, "ph": "X", "cat": "fee", "dur": 271271.0, "name": "_codecs.utf_8_decode"}, {"pid": 28243, "tid": 874131, "ts": 174015180587.0, "ph": "X", "cat": "fee", "dur": 271316.0, "name": "decode (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:319)"}, {"pid": 28243, "tid": 874131, "ts": 174014925578.0, "ph": "X", "cat": "fee", "dur": 1138723.0, "name": "_io.TextIOWrapper.read"}, {"pid": 28243, "tid": 874131, "ts": 174016064319.0, "ph": "X", "cat": "fee", "dur": 94.0, "name": "_io.TextIOWrapper.__exit__"}, {"pid": 28243, "tid": 874131, "ts": 174014925173.0, "ph": "X", "cat": "fee", "dur": 1139241.0, "name": "readInData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:44)"}, {"pid": 28243, "tid": 874131, "ts": 174016064476.0, "ph": "X", "cat": "fee", "dur": 3783730.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174019848266.0, "ph": "X", "cat": "fee", "dur": 5585797.0, "name": "str.join"}, {"pid": 28243, "tid": 874131, "ts": 174028493040.0, "ph": "X", "cat": "fee", "dur": 33.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174028493027.0, "ph": "X", "cat": "fee", "dur": 64.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174028493099.0, "ph": "X", "cat": "fee", "dur": 11205021.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174028493021.0, "ph": "X", "cat": "fee", "dur": 11205132.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174039698223.0, "ph": "X", "cat": "fee", "dur": 3870705.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174016064467.0, "ph": "X", "cat": "fee", "dur": 27521659.0, "name": "cleanAndTokenize (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:61)"}, {"pid": 28243, "tid": 874131, "ts": 174043596019.0, "ph": "X", "cat": "fee", "dur": 38.0, "name": "_abc._abc_instancecheck"}, {"pid": 28243, "tid": 874131, "ts": 174043596014.0, "ph": "X", "cat": "fee", "dur": 43.02, "name": "__instancecheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:117)"}, {"pid": 28243, "tid": 874131, "ts": 174043595996.0, "ph": "X", "cat": "fee", "dur": 63.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174043596061.0, "ph": "X", "cat": "fee", "dur": 7207379.0, "name": "_collections._count_elements"}, {"pid": 28243, "tid": 874131, "ts": 174043595970.0, "ph": "X", "cat": "fee", "dur": 7207498.0, "name": "update (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:649)"}, {"pid": 28243, "tid": 874131, "ts": 174043595928.0, "ph": "X", "cat": "fee", "dur": 7207575.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:581)"}, {"pid": 28243, "tid": 874131, "ts": 174014925170.0, "ph": "X", "cat": "fee", "dur": 35878340.0, "name": "getWordCount (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:78)"}, {"pid": 28243, "tid": 874131, "ts": 174052490249.0, "ph": "X", "cat": "fee", "dur": 14.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174052490306.0, "ph": "X", "cat": "fee", "dur": 74.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174052490409.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "Counter.values"}, {"pid": 28243, "tid": 874131, "ts": 174052490410.02, "ph": "X", "cat": "fee", "dur": 8499.98, "name": "builtins.sum"}, {"pid": 28243, "tid": 874131, "ts": 174052498922.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174052490388.0, "ph": "X", "cat": "fee", "dur": 297790.0, "name": "getWordFrequencies (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:96)"}, {"pid": 28243, "tid": 874131, "ts": 174014925134.0, "ph": "X", "cat": "fee", "dur": 37863050.0, "name": "getWordData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:122)"}, {"pid": 28243, "tid": 874131, "ts": 174052788205.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174052788209.0, "ph": "X", "cat": "fee", "dur": 25.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174052788487.0, "ph": "X", "cat": "fee", "dur": 14.0, "name": "_locale.nl_langinfo"}, {"pid": 28243, "tid": 874131, "ts": 174052788466.0, "ph": "X", "cat": "fee", "dur": 35.02, "name": "getpreferredencoding (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py:33)"}, {"pid": 28243, "tid": 874131, "ts": 174052788586.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:260)"}, {"pid": 28243, "tid": 874131, "ts": 174052788575.0, "ph": "X", "cat": "fee", "dur": 18.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:309)"}, {"pid": 28243, "tid": 874131, "ts": 174052788247.0, "ph": "X", "cat": "fee", "dur": 358.0, "name": "io.open"}, {"pid": 28243, "tid": 874131, "ts": 174053076542.0, "ph": "X", "cat": "fee", "dur": 174623.0, "name": "_codecs.utf_8_decode"}, {"pid": 28243, "tid": 874131, "ts": 174053076536.0, "ph": "X", "cat": "fee", "dur": 174736.0, "name": "decode (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:319)"}, {"pid": 28243, "tid": 874131, "ts": 174052788609.0, "ph": "X", "cat": "fee", "dur": 949178.0, "name": "_io.TextIOWrapper.read"}, {"pid": 28243, "tid": 874131, "ts": 174053737853.0, "ph": "X", "cat": "fee", "dur": 87.0, "name": "_io.TextIOWrapper.__exit__"}, {"pid": 28243, "tid": 874131, "ts": 174052788239.0, "ph": "X", "cat": "fee", "dur": 949704.0, "name": "readInData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:44)"}, {"pid": 28243, "tid": 874131, "ts": 174053738023.0, "ph": "X", "cat": "fee", "dur": 3317617.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174057055691.0, "ph": "X", "cat": "fee", "dur": 5267552.0, "name": "str.join"}, {"pid": 28243, "tid": 874131, "ts": 174065115186.0, "ph": "X", "cat": "fee", "dur": 29.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174065115171.0, "ph": "X", "cat": "fee", "dur": 65.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174065115247.0, "ph": "X", "cat": "fee", "dur": 10757922.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174065115161.0, "ph": "X", "cat": "fee", "dur": 10758069.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174075873273.0, "ph": "X", "cat": "fee", "dur": 3658326.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174053738013.0, "ph": "X", "cat": "fee", "dur": 25817626.0, "name": "cleanAndTokenize (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:61)"}, {"pid": 28243, "tid": 874131, "ts": 174079564078.0, "ph": "X", "cat": "fee", "dur": 25.0, "name": "_abc._abc_instancecheck"}, {"pid": 28243, "tid": 874131, "ts": 174079564074.0, "ph": "X", "cat": "fee", "dur": 30.0, "name": "__instancecheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:117)"}, {"pid": 28243, "tid": 874131, "ts": 174079564059.0, "ph": "X", "cat": "fee", "dur": 47.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174079564107.0, "ph": "X", "cat": "fee", "dur": 6230682.0, "name": "_collections._count_elements"}, {"pid": 28243, "tid": 874131, "ts": 174079564042.0, "ph": "X", "cat": "fee", "dur": 6230775.0, "name": "update (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:649)"}, {"pid": 28243, "tid": 874131, "ts": 174079563992.0, "ph": "X", "cat": "fee", "dur": 6230872.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:581)"}, {"pid": 28243, "tid": 874131, "ts": 174052788234.02, "ph": "X", "cat": "fee", "dur": 33006637.98, "name": "getWordCount (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:78)"}, {"pid": 28243, "tid": 874131, "ts": 174087800635.0, "ph": "X", "cat": "fee", "dur": 15.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174087800724.0, "ph": "X", "cat": "fee", "dur": 93.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174087800856.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "Counter.values"}, {"pid": 28243, "tid": 874131, "ts": 174087800859.02, "ph": "X", "cat": "fee", "dur": 9063.98, "name": "builtins.sum"}, {"pid": 28243, "tid": 874131, "ts": 174087809933.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174087800841.0, "ph": "X", "cat": "fee", "dur": 386220.0, "name": "getWordFrequencies (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:96)"}, {"pid": 28243, "tid": 874131, "ts": 174052788203.0, "ph": "X", "cat": "fee", "dur": 35398869.0, "name": "getWordData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:122)"}, {"pid": 28243, "tid": 874131, "ts": 174088187093.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174088187098.0, "ph": "X", "cat": "fee", "dur": 39.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174088187386.0, "ph": "X", "cat": "fee", "dur": 21.0, "name": "_locale.nl_langinfo"}, {"pid": 28243, "tid": 874131, "ts": 174088187365.0, "ph": "X", "cat": "fee", "dur": 43.0, "name": "getpreferredencoding (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py:33)"}, {"pid": 28243, "tid": 874131, "ts": 174088187487.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:260)"}, {"pid": 28243, "tid": 874131, "ts": 174088187477.0, "ph": "X", "cat": "fee", "dur": 17.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:309)"}, {"pid": 28243, "tid": 874131, "ts": 174088187153.0, "ph": "X", "cat": "fee", "dur": 351.0, "name": "io.open"}, {"pid": 28243, "tid": 874131, "ts": 174088478911.0, "ph": "X", "cat": "fee", "dur": 245510.0, "name": "_codecs.utf_8_decode"}, {"pid": 28243, "tid": 874131, "ts": 174088478897.0, "ph": "X", "cat": "fee", "dur": 245589.0, "name": "decode (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:319)"}, {"pid": 28243, "tid": 874131, "ts": 174088187507.0, "ph": "X", "cat": "fee", "dur": 1040902.0, "name": "_io.TextIOWrapper.read"}, {"pid": 28243, "tid": 874131, "ts": 174089228431.0, "ph": "X", "cat": "fee", "dur": 97.0, "name": "_io.TextIOWrapper.__exit__"}, {"pid": 28243, "tid": 874131, "ts": 174088187146.0, "ph": "X", "cat": "fee", "dur": 1041390.0, "name": "readInData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:44)"}, {"pid": 28243, "tid": 874131, "ts": 174089228607.0, "ph": "X", "cat": "fee", "dur": 3200898.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174092433227.0, "ph": "X", "cat": "fee", "dur": 4878017.0, "name": "str.join"}, {"pid": 28243, "tid": 874131, "ts": 174099931048.0, "ph": "X", "cat": "fee", "dur": 39.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174099931034.0, "ph": "X", "cat": "fee", "dur": 76.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174099931116.0, "ph": "X", "cat": "fee", "dur": 10051234.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174099931029.0, "ph": "X", "cat": "fee", "dur": 10051375.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174109982452.0, "ph": "X", "cat": "fee", "dur": 3323364.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174089228598.0, "ph": "X", "cat": "fee", "dur": 24093806.0, "name": "cleanAndTokenize (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:61)"}, {"pid": 28243, "tid": 874131, "ts": 174113330216.0, "ph": "X", "cat": "fee", "dur": 22.0, "name": "_abc._abc_instancecheck"}, {"pid": 28243, "tid": 874131, "ts": 174113330211.0, "ph": "X", "cat": "fee", "dur": 27.02, "name": "__instancecheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:117)"}, {"pid": 28243, "tid": 874131, "ts": 174113330193.0, "ph": "X", "cat": "fee", "dur": 47.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174113330241.0, "ph": "X", "cat": "fee", "dur": 6118179.0, "name": "_collections._count_elements"}, {"pid": 28243, "tid": 874131, "ts": 174113330173.0, "ph": "X", "cat": "fee", "dur": 6118279.0, "name": "update (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:649)"}, {"pid": 28243, "tid": 874131, "ts": 174113330130.0, "ph": "X", "cat": "fee", "dur": 6118357.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:581)"}, {"pid": 28243, "tid": 874131, "ts": 174088187143.0, "ph": "X", "cat": "fee", "dur": 31261355.0, "name": "getWordCount (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:78)"}, {"pid": 28243, "tid": 874131, "ts": 174121270200.0, "ph": "X", "cat": "fee", "dur": 13.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174121270289.0, "ph": "X", "cat": "fee", "dur": 83.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174121270413.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "Counter.values"}, {"pid": 28243, "tid": 874131, "ts": 174121270415.02, "ph": "X", "cat": "fee", "dur": 10052.98, "name": "builtins.sum"}, {"pid": 28243, "tid": 874131, "ts": 174121280476.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174121270393.0, "ph": "X", "cat": "fee", "dur": 486074.0, "name": "getWordFrequencies (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:96)"}, {"pid": 28243, "tid": 874131, "ts": 174088187090.0, "ph": "X", "cat": "fee", "dur": 33569385.0, "name": "getWordData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:122)"}, {"pid": 28243, "tid": 874131, "ts": 174121756502.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174121756507.0, "ph": "X", "cat": "fee", "dur": 38.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174121756790.0, "ph": "X", "cat": "fee", "dur": 23.0, "name": "_locale.nl_langinfo"}, {"pid": 28243, "tid": 874131, "ts": 174121756769.0, "ph": "X", "cat": "fee", "dur": 44.02, "name": "getpreferredencoding (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py:33)"}, {"pid": 28243, "tid": 874131, "ts": 174121756895.0, "ph": "X", "cat": "fee", "dur": 6.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:260)"}, {"pid": 28243, "tid": 874131, "ts": 174121756879.0, "ph": "X", "cat": "fee", "dur": 24.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:309)"}, {"pid": 28243, "tid": 874131, "ts": 174121756560.0, "ph": "X", "cat": "fee", "dur": 355.0, "name": "io.open"}, {"pid": 28243, "tid": 874131, "ts": 174122028659.0, "ph": "X", "cat": "fee", "dur": 244356.0, "name": "_codecs.utf_8_decode"}, {"pid": 28243, "tid": 874131, "ts": 174122028643.0, "ph": "X", "cat": "fee", "dur": 244410.0, "name": "decode (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:319)"}, {"pid": 28243, "tid": 874131, "ts": 174121756918.0, "ph": "X", "cat": "fee", "dur": 1050966.0, "name": "_io.TextIOWrapper.read"}, {"pid": 28243, "tid": 874131, "ts": 174122807895.0, "ph": "X", "cat": "fee", "dur": 62.0, "name": "_io.TextIOWrapper.__exit__"}, {"pid": 28243, "tid": 874131, "ts": 174121756551.0, "ph": "X", "cat": "fee", "dur": 1051407.0, "name": "readInData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:44)"}, {"pid": 28243, "tid": 874131, "ts": 174122808008.0, "ph": "X", "cat": "fee", "dur": 3033606.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174125841654.0, "ph": "X", "cat": "fee", "dur": 5132132.0, "name": "str.join"}, {"pid": 28243, "tid": 874131, "ts": 174133704806.0, "ph": "X", "cat": "fee", "dur": 35.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174133704793.0, "ph": "X", "cat": "fee", "dur": 67.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174133704866.0, "ph": "X", "cat": "fee", "dur": 9749698.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174133704787.0, "ph": "X", "cat": "fee", "dur": 9749817.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174143454658.0, "ph": "X", "cat": "fee", "dur": 3437165.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174122807999.0, "ph": "X", "cat": "fee", "dur": 24101710.0, "name": "cleanAndTokenize (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:61)"}, {"pid": 28243, "tid": 874131, "ts": 174146918296.0, "ph": "X", "cat": "fee", "dur": 24.0, "name": "_abc._abc_instancecheck"}, {"pid": 28243, "tid": 874131, "ts": 174146918291.0, "ph": "X", "cat": "fee", "dur": 29.02, "name": "__instancecheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:117)"}, {"pid": 28243, "tid": 874131, "ts": 174146918275.0, "ph": "X", "cat": "fee", "dur": 47.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174146918325.0, "ph": "X", "cat": "fee", "dur": 6051826.0, "name": "_collections._count_elements"}, {"pid": 28243, "tid": 874131, "ts": 174146918256.0, "ph": "X", "cat": "fee", "dur": 6051926.0, "name": "update (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:649)"}, {"pid": 28243, "tid": 874131, "ts": 174146918210.0, "ph": "X", "cat": "fee", "dur": 6052023.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:581)"}, {"pid": 28243, "tid": 874131, "ts": 174121756547.0, "ph": "X", "cat": "fee", "dur": 31213696.0, "name": "getWordCount (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:78)"}, {"pid": 28243, "tid": 874131, "ts": 174154443525.0, "ph": "X", "cat": "fee", "dur": 15.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174154443578.0, "ph": "X", "cat": "fee", "dur": 73.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174154443671.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "Counter.values"}, {"pid": 28243, "tid": 874131, "ts": 174154443671.04, "ph": "X", "cat": "fee", "dur": 6677.96, "name": "builtins.sum"}, {"pid": 28243, "tid": 874131, "ts": 174154450355.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174154443660.0, "ph": "X", "cat": "fee", "dur": 339936.0, "name": "getWordFrequencies (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:96)"}, {"pid": 28243, "tid": 874131, "ts": 174121756496.0, "ph": "X", "cat": "fee", "dur": 33027107.0, "name": "getWordData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:122)"}, {"pid": 28243, "tid": 874131, "ts": 174154783620.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174154783623.0, "ph": "X", "cat": "fee", "dur": 29.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174154783888.0, "ph": "X", "cat": "fee", "dur": 35.0, "name": "_locale.nl_langinfo"}, {"pid": 28243, "tid": 874131, "ts": 174154783867.0, "ph": "X", "cat": "fee", "dur": 57.0, "name": "getpreferredencoding (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py:33)"}, {"pid": 28243, "tid": 874131, "ts": 174154784003.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:260)"}, {"pid": 28243, "tid": 874131, "ts": 174154783993.0, "ph": "X", "cat": "fee", "dur": 16.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:309)"}, {"pid": 28243, "tid": 874131, "ts": 174154783664.0, "ph": "X", "cat": "fee", "dur": 353.0, "name": "io.open"}, {"pid": 28243, "tid": 874131, "ts": 174154915366.0, "ph": "X", "cat": "fee", "dur": 62809.0, "name": "_codecs.utf_8_decode"}, {"pid": 28243, "tid": 874131, "ts": 174154915360.0, "ph": "X", "cat": "fee", "dur": 65007.0, "name": "decode (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:319)"}, {"pid": 28243, "tid": 874131, "ts": 174154784021.0, "ph": "X", "cat": "fee", "dur": 313217.0, "name": "_io.TextIOWrapper.read"}, {"pid": 28243, "tid": 874131, "ts": 174155097252.0, "ph": "X", "cat": "fee", "dur": 66.0, "name": "_io.TextIOWrapper.__exit__"}, {"pid": 28243, "tid": 874131, "ts": 174154783656.0, "ph": "X", "cat": "fee", "dur": 313663.0, "name": "readInData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:44)"}, {"pid": 28243, "tid": 874131, "ts": 174155097361.0, "ph": "X", "cat": "fee", "dur": 1269042.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174156366432.0, "ph": "X", "cat": "fee", "dur": 951952.0, "name": "str.join"}, {"pid": 28243, "tid": 874131, "ts": 174157812804.0, "ph": "X", "cat": "fee", "dur": 37.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174157812792.0, "ph": "X", "cat": "fee", "dur": 63.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174157812863.0, "ph": "X", "cat": "fee", "dur": 3571636.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174157812786.0, "ph": "X", "cat": "fee", "dur": 3571716.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174161384517.0, "ph": "X", "cat": "fee", "dur": 1261049.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174155097347.0, "ph": "X", "cat": "fee", "dur": 7548282.0, "name": "cleanAndTokenize (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:61)"}, {"pid": 28243, "tid": 874131, "ts": 174162645776.0, "ph": "X", "cat": "fee", "dur": 25.0, "name": "_abc._abc_instancecheck"}, {"pid": 28243, "tid": 874131, "ts": 174162645768.0, "ph": "X", "cat": "fee", "dur": 33.02, "name": "__instancecheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:117)"}, {"pid": 28243, "tid": 874131, "ts": 174162645752.0, "ph": "X", "cat": "fee", "dur": 51.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174162645804.0, "ph": "X", "cat": "fee", "dur": 3026564.0, "name": "_collections._count_elements"}, {"pid": 28243, "tid": 874131, "ts": 174162645731.0, "ph": "X", "cat": "fee", "dur": 3026683.0, "name": "update (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:649)"}, {"pid": 28243, "tid": 874131, "ts": 174162645698.0, "ph": "X", "cat": "fee", "dur": 3026754.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:581)"}, {"pid": 28243, "tid": 874131, "ts": 174154783652.02, "ph": "X", "cat": "fee", "dur": 10888818.98, "name": "getWordCount (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:78)"}, {"pid": 28243, "tid": 874131, "ts": 174166216087.0, "ph": "X", "cat": "fee", "dur": 14.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174166216133.0, "ph": "X", "cat": "fee", "dur": 103.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174166216251.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "Counter.values"}, {"pid": 28243, "tid": 874131, "ts": 174166216252.02, "ph": "X", "cat": "fee", "dur": 2681.98, "name": "builtins.sum"}, {"pid": 28243, "tid": 874131, "ts": 174166218938.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174166216244.0, "ph": "X", "cat": "fee", "dur": 229324.0, "name": "getWordFrequencies (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:96)"}, {"pid": 28243, "tid": 874131, "ts": 174154783617.0, "ph": "X", "cat": "fee", "dur": 11661955.0, "name": "getWordData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:122)"}, {"pid": 28243, "tid": 874131, "ts": 174166445592.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174166445595.0, "ph": "X", "cat": "fee", "dur": 38.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174166445856.0, "ph": "X", "cat": "fee", "dur": 25.0, "name": "_locale.nl_langinfo"}, {"pid": 28243, "tid": 874131, "ts": 174166445833.0, "ph": "X", "cat": "fee", "dur": 49.0, "name": "getpreferredencoding (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py:33)"}, {"pid": 28243, "tid": 874131, "ts": 174166445956.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:260)"}, {"pid": 28243, "tid": 874131, "ts": 174166445947.0, "ph": "X", "cat": "fee", "dur": 14.02, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:309)"}, {"pid": 28243, "tid": 874131, "ts": 174166445646.0, "ph": "X", "cat": "fee", "dur": 324.0, "name": "io.open"}, {"pid": 28243, "tid": 874131, "ts": 174166679984.0, "ph": "X", "cat": "fee", "dur": 187094.0, "name": "_codecs.utf_8_decode"}, {"pid": 28243, "tid": 874131, "ts": 174166679974.0, "ph": "X", "cat": "fee", "dur": 187149.0, "name": "decode (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:319)"}, {"pid": 28243, "tid": 874131, "ts": 174166445973.0, "ph": "X", "cat": "fee", "dur": 796540.0, "name": "_io.TextIOWrapper.read"}, {"pid": 28243, "tid": 874131, "ts": 174167242535.0, "ph": "X", "cat": "fee", "dur": 80.0, "name": "_io.TextIOWrapper.__exit__"}, {"pid": 28243, "tid": 874131, "ts": 174166445638.0, "ph": "X", "cat": "fee", "dur": 796979.0, "name": "readInData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:44)"}, {"pid": 28243, "tid": 874131, "ts": 174167242685.0, "ph": "X", "cat": "fee", "dur": 2998394.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174170241121.0, "ph": "X", "cat": "fee", "dur": 5254486.0, "name": "str.join"}, {"pid": 28243, "tid": 874131, "ts": 174178701227.0, "ph": "X", "cat": "fee", "dur": 40.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174178701209.0, "ph": "X", "cat": "fee", "dur": 79.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174178701296.0, "ph": "X", "cat": "fee", "dur": 8758182.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174178701199.0, "ph": "X", "cat": "fee", "dur": 8758313.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174187459547.0, "ph": "X", "cat": "fee", "dur": 3312729.0, "name": "str.split"}, {"pid": 28243, "tid": 874131, "ts": 174167242677.0, "ph": "X", "cat": "fee", "dur": 23558528.0, "name": "cleanAndTokenize (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:61)"}, {"pid": 28243, "tid": 874131, "ts": 174190810141.0, "ph": "X", "cat": "fee", "dur": 26.0, "name": "_abc._abc_instancecheck"}, {"pid": 28243, "tid": 874131, "ts": 174190810137.0, "ph": "X", "cat": "fee", "dur": 30.02, "name": "__instancecheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:117)"}, {"pid": 28243, "tid": 874131, "ts": 174190810119.0, "ph": "X", "cat": "fee", "dur": 50.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174190810170.0, "ph": "X", "cat": "fee", "dur": 5477710.0, "name": "_collections._count_elements"}, {"pid": 28243, "tid": 874131, "ts": 174190810102.0, "ph": "X", "cat": "fee", "dur": 5477807.0, "name": "update (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:649)"}, {"pid": 28243, "tid": 874131, "ts": 174190810056.0, "ph": "X", "cat": "fee", "dur": 5477889.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:581)"}, {"pid": 28243, "tid": 874131, "ts": 174166445636.0, "ph": "X", "cat": "fee", "dur": 29842316.0, "name": "getWordCount (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:78)"}, {"pid": 28243, "tid": 874131, "ts": 174197914977.0, "ph": "X", "cat": "fee", "dur": 12.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174197915037.0, "ph": "X", "cat": "fee", "dur": 97.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174197915171.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "Counter.values"}, {"pid": 28243, "tid": 874131, "ts": 174197915175.02, "ph": "X", "cat": "fee", "dur": 7264.98, "name": "builtins.sum"}, {"pid": 28243, "tid": 874131, "ts": 174197922448.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174197915145.0, "ph": "X", "cat": "fee", "dur": 331433.0, "name": "getWordFrequencies (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:96)"}, {"pid": 28243, "tid": 874131, "ts": 174166445590.0, "ph": "X", "cat": "fee", "dur": 31800991.0, "name": "getWordData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:122)"}, {"pid": 28243, "tid": 874131, "ts": 174198246610.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "time.perf_counter"}, {"pid": 28243, "tid": 874131, "ts": 174198247615.0, "ph": "X", "cat": "fee", "dur": 28.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174198247655.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "dict.items"}, {"pid": 28243, "tid": 874131, "ts": 174198249155.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174198249175.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198249176.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.iter"}, {"pid": 28243, "tid": 874131, "ts": 174198249188.0, "ph": "X", "cat": "fee", "dur": 311.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:563)"}, {"pid": 28243, "tid": 874131, "ts": 174198249505.0, "ph": "X", "cat": "fee", "dur": 287.0, "name": "_heapq.heapify"}, {"pid": 28243, "tid": 874131, "ts": 174198249800.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249809.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249814.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249819.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249820.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249821.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249826.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249827.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249828.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249831.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249834.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249835.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249838.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249847.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249854.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249860.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249863.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249864.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249886.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198249886.04, "ph": "X", "cat": "fee", "dur": 0.96, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198375033.0, "ph": "X", "cat": "fee", "dur": 14.0, "name": "list.sort"}, {"pid": 28243, "tid": 874131, "ts": 174198375051.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:577)"}, {"pid": 28243, "tid": 874131, "ts": 174198249173.0, "ph": "X", "cat": "fee", "dur": 125883.0, "name": "nlargest (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:521)"}, {"pid": 28243, "tid": 874131, "ts": 174198248547.0, "ph": "X", "cat": "fee", "dur": 126518.0, "name": "most_common (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:600)"}, {"pid": 28243, "tid": 874131, "ts": 174198375096.0, "ph": "X", "cat": "fee", "dur": 7.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198375131.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198375400.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198375398.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "isstring (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:595)"}, {"pid": 28243, "tid": 874131, "ts": 174198375407.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198375407.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "isstring (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:595)"}, {"pid": 28243, "tid": 874131, "ts": 174198375426.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198375442.0, "ph": "X", "cat": "fee", "dur": 6.0, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 174198375425.0, "ph": "X", "cat": "fee", "dur": 23.02, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:224)"}, {"pid": 28243, "tid": 874131, "ts": 174198375451.0, "ph": "X", "cat": "fee", "dur": 6.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:76)"}, {"pid": 28243, "tid": 874131, "ts": 174198375474.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375471.0, "ph": "X", "cat": "fee", "dur": 4.02, "name": "tell (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:286)"}, {"pid": 28243, "tid": 874131, "ts": 174198375499.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:111)"}, {"pid": 28243, "tid": 874131, "ts": 174198375505.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 174198375505.0, "ph": "X", "cat": "fee", "dur": 1.02, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 174198375507.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375507.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "tell (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:286)"}, {"pid": 28243, "tid": 874131, "ts": 174198375508.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 174198375508.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 174198375509.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 174198375508.08, "ph": "X", "cat": "fee", "dur": 0.96, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 174198375511.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.ord"}, {"pid": 28243, "tid": 874131, "ts": 174198375512.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 174198375512.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 174198375513.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 174198375513.02, "ph": "X", "cat": "fee", "dur": 0.06, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 174198375514.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.ord"}, {"pid": 28243, "tid": 874131, "ts": 174198375515.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375515.06, "ph": "X", "cat": "fee", "dur": 11.94, "name": "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)"}, {"pid": 28243, "tid": 874131, "ts": 174198375515.04, "ph": "X", "cat": "fee", "dur": 13.96, "name": "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)"}, {"pid": 28243, "tid": 874131, "ts": 174198375531.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "type.fromkeys"}, {"pid": 28243, "tid": 874131, "ts": 174198375530.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "_uniq (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:432)"}, {"pid": 28243, "tid": 874131, "ts": 174198375534.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375535.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.insert"}, {"pid": 28243, "tid": 874131, "ts": 174198375536.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375536.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "append (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:172)"}, {"pid": 28243, "tid": 874131, "ts": 174198375546.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375539.0, "ph": "X", "cat": "fee", "dur": 7.04, "name": "__len__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:160)"}, {"pid": 28243, "tid": 874131, "ts": 174198375537.0, "ph": "X", "cat": "fee", "dur": 10.0, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375580.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198375551.0, "ph": "X", "cat": "fee", "dur": 29.04, "name": "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)"}, {"pid": 28243, "tid": 874131, "ts": 174198375478.0, "ph": "X", "cat": "fee", "dur": 103.0, "name": "_parse (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:493)"}, {"pid": 28243, "tid": 874131, "ts": 174198375582.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375582.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 174198375582.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375462.0, "ph": "X", "cat": "fee", "dur": 121.0, "name": "_parse_sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:435)"}, {"pid": 28243, "tid": 874131, "ts": 174198375584.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198375583.02, "ph": "X", "cat": "fee", "dur": 2.98, "name": "fix_flags (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:921)"}, {"pid": 28243, "tid": 874131, "ts": 174198375419.0, "ph": "X", "cat": "fee", "dur": 168.0, "name": "parse (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:937)"}, {"pid": 28243, "tid": 874131, "ts": 174198375595.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "builtins.min"}, {"pid": 28243, "tid": 874131, "ts": 174198375599.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.min"}, {"pid": 28243, "tid": 874131, "ts": 174198375589.02, "ph": "X", "cat": "fee", "dur": 10.98, "name": "getwidth (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:174)"}, {"pid": 28243, "tid": 874131, "ts": 174198375610.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_get_iscased (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:453)"}, {"pid": 28243, "tid": 874131, "ts": 174198375607.0, "ph": "X", "cat": "fee", "dur": 4.02, "name": "_get_literal_prefix (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:461)"}, {"pid": 28243, "tid": 874131, "ts": 174198375616.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_get_iscased (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:453)"}, {"pid": 28243, "tid": 874131, "ts": 174198375613.0, "ph": "X", "cat": "fee", "dur": 4.02, "name": "_get_charset_prefix (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:492)"}, {"pid": 28243, "tid": 874131, "ts": 174198375617.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375618.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375618.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375618.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375618.12, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375619.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.min"}, {"pid": 28243, "tid": 874131, "ts": 174198375619.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375629.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375645.0, "ph": "X", "cat": "fee", "dur": 6.0, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 174198375652.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375652.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 174198375652.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375652.12, "ph": "X", "cat": "fee", "dur": 0.88, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 174198375653.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375654.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375654.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375621.0, "ph": "X", "cat": "fee", "dur": 34.0, "name": "_optimize_charset (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:276)"}, {"pid": 28243, "tid": 874131, "ts": 174198375656.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375657.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375659.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375659.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375659.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375656.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "_compile_charset (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 174198375660.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375589.0, "ph": "X", "cat": "fee", "dur": 71.06, "name": "_compile_info (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:536)"}, {"pid": 28243, "tid": 874131, "ts": 174198375669.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375670.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 174198375670.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375671.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 174198375671.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375671.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "bytearray.find"}, {"pid": 28243, "tid": 874131, "ts": 174198375672.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375672.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375672.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375668.0, "ph": "X", "cat": "fee", "dur": 4.12, "name": "_optimize_charset (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:276)"}, {"pid": 28243, "tid": 874131, "ts": 174198375673.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375673.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375673.08, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375673.14, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375673.18, "ph": "X", "cat": "fee", "dur": 0.82, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375674.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375674.06, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375674.1, "ph": "X", "cat": "fee", "dur": 0.9, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375673.12, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_compile_charset (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:249)"}, {"pid": 28243, "tid": 874131, "ts": 174198375675.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375664.0, "ph": "X", "cat": "fee", "dur": 11.08, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:71)"}, {"pid": 28243, "tid": 874131, "ts": 174198375675.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 28243, "tid": 874131, "ts": 174198375588.0, "ph": "X", "cat": "fee", "dur": 88.0, "name": "_code (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:598)"}, {"pid": 28243, "tid": 874131, "ts": 174198375679.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375679.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "groups (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:81)"}, {"pid": 28243, "tid": 874131, "ts": 174198375680.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "dict.items"}, {"pid": 28243, "tid": 874131, "ts": 174198375682.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375682.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "groups (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:81)"}, {"pid": 28243, "tid": 874131, "ts": 174198375683.02, "ph": "X", "cat": "fee", "dur": 5.98, "name": "_sre.compile"}, {"pid": 28243, "tid": 874131, "ts": 174198375404.0, "ph": "X", "cat": "fee", "dur": 285.02, "name": "compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:759)"}, {"pid": 28243, "tid": 874131, "ts": 174198375696.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198375712.0, "ph": "X", "cat": "fee", "dur": 9.0, "name": "__new__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:670)"}, {"pid": 28243, "tid": 874131, "ts": 174198375708.0, "ph": "X", "cat": "fee", "dur": 15.0, "name": "__call__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:358)"}, {"pid": 28243, "tid": 874131, "ts": 174198375727.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "__new__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:670)"}, {"pid": 28243, "tid": 874131, "ts": 174198375727.0, "ph": "X", "cat": "fee", "dur": 0.06, "name": "__call__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:358)"}, {"pid": 28243, "tid": 874131, "ts": 174198375695.0, "ph": "X", "cat": "fee", "dur": 32.08, "name": "__and__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:977)"}, {"pid": 28243, "tid": 874131, "ts": 174198375728.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375087.0, "ph": "X", "cat": "fee", "dur": 647.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174198375734.02, "ph": "X", "cat": "fee", "dur": 16.98, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174198375084.0, "ph": "X", "cat": "fee", "dur": 668.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174198375754.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174198375756.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198375757.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.iter"}, {"pid": 28243, "tid": 874131, "ts": 174198375759.0, "ph": "X", "cat": "fee", "dur": 327.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:563)"}, {"pid": 28243, "tid": 874131, "ts": 174198376087.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapify"}, {"pid": 28243, "tid": 874131, "ts": 174198376092.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376096.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376096.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376107.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376107.04, "ph": "X", "cat": "fee", "dur": 0.96, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376118.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376126.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376128.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376129.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376131.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376132.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376147.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376148.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376148.04, "ph": "X", "cat": "fee", "dur": 0.96, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376153.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376168.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198376176.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551290.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "list.sort"}, {"pid": 28243, "tid": 874131, "ts": 174198551303.0, "ph": "X", "cat": "fee", "dur": 7.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:577)"}, {"pid": 28243, "tid": 874131, "ts": 174198375756.0, "ph": "X", "cat": "fee", "dur": 175555.0, "name": "nlargest (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:521)"}, {"pid": 28243, "tid": 874131, "ts": 174198375754.0, "ph": "X", "cat": "fee", "dur": 175562.0, "name": "most_common (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:600)"}, {"pid": 28243, "tid": 874131, "ts": 174198551325.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198551324.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174198551330.0, "ph": "X", "cat": "fee", "dur": 15.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174198551322.0, "ph": "X", "cat": "fee", "dur": 23.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174198551357.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174198551359.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198551360.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.iter"}, {"pid": 28243, "tid": 874131, "ts": 174198551364.0, "ph": "X", "cat": "fee", "dur": 43.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:563)"}, {"pid": 28243, "tid": 874131, "ts": 174198551408.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapify"}, {"pid": 28243, "tid": 874131, "ts": 174198551413.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551417.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551418.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551419.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551424.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551424.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551426.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551427.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551434.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551441.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551442.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551446.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551456.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551457.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551464.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551466.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551475.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551477.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551478.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551489.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551492.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198551498.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806604.0, "ph": "X", "cat": "fee", "dur": 15.0, "name": "list.sort"}, {"pid": 28243, "tid": 874131, "ts": 174198806630.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:577)"}, {"pid": 28243, "tid": 874131, "ts": 174198551359.0, "ph": "X", "cat": "fee", "dur": 255278.0, "name": "nlargest (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:521)"}, {"pid": 28243, "tid": 874131, "ts": 174198551357.0, "ph": "X", "cat": "fee", "dur": 255289.0, "name": "most_common (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:600)"}, {"pid": 28243, "tid": 874131, "ts": 174198806662.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174198806659.0, "ph": "X", "cat": "fee", "dur": 10.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174198806669.02, "ph": "X", "cat": "fee", "dur": 43.98, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174198806657.0, "ph": "X", "cat": "fee", "dur": 56.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174198806728.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174198806731.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174198806732.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.iter"}, {"pid": 28243, "tid": 874131, "ts": 174198806738.0, "ph": "X", "cat": "fee", "dur": 30.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:563)"}, {"pid": 28243, "tid": 874131, "ts": 174198806769.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "_heapq.heapify"}, {"pid": 28243, "tid": 874131, "ts": 174198806774.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806776.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806776.04, "ph": "X", "cat": "fee", "dur": 0.96, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806783.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806789.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806791.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806792.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806794.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806798.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806803.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806804.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806806.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806813.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806813.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806815.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806816.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806817.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806818.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806820.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806821.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806823.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806839.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174198806847.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119033.0, "ph": "X", "cat": "fee", "dur": 9.0, "name": "list.sort"}, {"pid": 28243, "tid": 874131, "ts": 174199119054.0, "ph": "X", "cat": "fee", "dur": 13.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:577)"}, {"pid": 28243, "tid": 874131, "ts": 174198806731.0, "ph": "X", "cat": "fee", "dur": 312340.0, "name": "nlargest (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:521)"}, {"pid": 28243, "tid": 874131, "ts": 174198806725.0, "ph": "X", "cat": "fee", "dur": 312352.0, "name": "most_common (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:600)"}, {"pid": 28243, "tid": 874131, "ts": 174199119095.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199119091.0, "ph": "X", "cat": "fee", "dur": 14.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199119107.0, "ph": "X", "cat": "fee", "dur": 17.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199119089.0, "ph": "X", "cat": "fee", "dur": 35.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199119138.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174199119140.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174199119141.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.iter"}, {"pid": 28243, "tid": 874131, "ts": 174199119145.0, "ph": "X", "cat": "fee", "dur": 19.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:563)"}, {"pid": 28243, "tid": 874131, "ts": 174199119164.02, "ph": "X", "cat": "fee", "dur": 1.98, "name": "_heapq.heapify"}, {"pid": 28243, "tid": 874131, "ts": 174199119166.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119171.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119172.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119173.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119176.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119178.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119180.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119184.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119193.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119195.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119198.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199119217.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333044.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "list.sort"}, {"pid": 28243, "tid": 874131, "ts": 174199333051.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:577)"}, {"pid": 28243, "tid": 874131, "ts": 174199119139.0, "ph": "X", "cat": "fee", "dur": 213916.0, "name": "nlargest (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:521)"}, {"pid": 28243, "tid": 874131, "ts": 174199119136.0, "ph": "X", "cat": "fee", "dur": 213921.0, "name": "most_common (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:600)"}, {"pid": 28243, "tid": 874131, "ts": 174199333062.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199333061.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199333067.0, "ph": "X", "cat": "fee", "dur": 10.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199333060.0, "ph": "X", "cat": "fee", "dur": 17.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199333080.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174199333082.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174199333082.04, "ph": "X", "cat": "fee", "dur": 0.96, "name": "builtins.iter"}, {"pid": 28243, "tid": 874131, "ts": 174199333087.0, "ph": "X", "cat": "fee", "dur": 30.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:563)"}, {"pid": 28243, "tid": 874131, "ts": 174199333118.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapify"}, {"pid": 28243, "tid": 874131, "ts": 174199333121.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333125.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333126.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333127.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333131.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333133.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333134.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333135.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333137.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333139.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333145.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333146.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333147.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333149.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333150.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333153.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333154.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333163.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333170.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199333192.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471751.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "list.sort"}, {"pid": 28243, "tid": 874131, "ts": 174199471757.0, "ph": "X", "cat": "fee", "dur": 6.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:577)"}, {"pid": 28243, "tid": 874131, "ts": 174199333081.0, "ph": "X", "cat": "fee", "dur": 138683.0, "name": "nlargest (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:521)"}, {"pid": 28243, "tid": 874131, "ts": 174199333079.0, "ph": "X", "cat": "fee", "dur": 138688.0, "name": "most_common (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:600)"}, {"pid": 28243, "tid": 874131, "ts": 174199471771.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199471770.0, "ph": "X", "cat": "fee", "dur": 5.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199471775.02, "ph": "X", "cat": "fee", "dur": 7.98, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199471769.0, "ph": "X", "cat": "fee", "dur": 15.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199471791.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174199471792.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174199471793.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.iter"}, {"pid": 28243, "tid": 874131, "ts": 174199471796.0, "ph": "X", "cat": "fee", "dur": 20.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:563)"}, {"pid": 28243, "tid": 874131, "ts": 174199471821.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapify"}, {"pid": 28243, "tid": 874131, "ts": 174199471824.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471826.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471827.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471828.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471832.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471837.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471839.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471845.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471847.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471847.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471850.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471851.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471856.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471857.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471859.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471866.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199471870.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517921.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "list.sort"}, {"pid": 28243, "tid": 874131, "ts": 174199517926.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:577)"}, {"pid": 28243, "tid": 874131, "ts": 174199471792.0, "ph": "X", "cat": "fee", "dur": 46136.0, "name": "nlargest (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:521)"}, {"pid": 28243, "tid": 874131, "ts": 174199471790.0, "ph": "X", "cat": "fee", "dur": 46140.0, "name": "most_common (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:600)"}, {"pid": 28243, "tid": 874131, "ts": 174199517933.02, "ph": "X", "cat": "fee", "dur": 1.98, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199517933.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199517941.0, "ph": "X", "cat": "fee", "dur": 7.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199517932.0, "ph": "X", "cat": "fee", "dur": 16.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199517950.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "Counter.items"}, {"pid": 28243, "tid": 874131, "ts": 174199517951.04, "ph": "X", "cat": "fee", "dur": 0.96, "name": "builtins.len"}, {"pid": 28243, "tid": 874131, "ts": 174199517952.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.iter"}, {"pid": 28243, "tid": 874131, "ts": 174199517955.0, "ph": "X", "cat": "fee", "dur": 19.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:563)"}, {"pid": 28243, "tid": 874131, "ts": 174199517975.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapify"}, {"pid": 28243, "tid": 874131, "ts": 174199517978.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517979.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517981.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517981.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517986.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517986.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517988.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517989.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517989.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517990.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517991.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517992.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517995.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517996.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517997.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199517999.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199518000.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199518000.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199518001.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199518002.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199518003.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199518004.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199518012.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199518014.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199518014.04, "ph": "X", "cat": "fee", "dur": 0.96, "name": "_heapq.heapreplace"}, {"pid": 28243, "tid": 874131, "ts": 174199609970.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "list.sort"}, {"pid": 28243, "tid": 874131, "ts": 174199609975.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:577)"}, {"pid": 28243, "tid": 874131, "ts": 174199517951.02, "ph": "X", "cat": "fee", "dur": 92026.98, "name": "nlargest (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:521)"}, {"pid": 28243, "tid": 874131, "ts": 174199517950.0, "ph": "X", "cat": "fee", "dur": 92030.0, "name": "most_common (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:600)"}, {"pid": 28243, "tid": 874131, "ts": 174199609984.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199609983.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199609986.02, "ph": "X", "cat": "fee", "dur": 5.98, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199609982.0, "ph": "X", "cat": "fee", "dur": 11.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199610007.0, "ph": "X", "cat": "fee", "dur": 80.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199612296.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "<listcomp> (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:175)"}, {"pid": 28243, "tid": 874131, "ts": 174199617549.0, "ph": "X", "cat": "fee", "dur": 10.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199617564.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.items"}, {"pid": 28243, "tid": 874131, "ts": 174199617693.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.upper"}, {"pid": 28243, "tid": 874131, "ts": 174199617743.0, "ph": "X", "cat": "fee", "dur": 9.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199617752.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.upper"}, {"pid": 28243, "tid": 874131, "ts": 174199617798.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199617800.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.upper"}, {"pid": 28243, "tid": 874131, "ts": 174199617844.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199617845.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "str.upper"}, {"pid": 28243, "tid": 874131, "ts": 174199617853.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199617854.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.upper"}, {"pid": 28243, "tid": 874131, "ts": 174199617860.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199617862.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.upper"}, {"pid": 28243, "tid": 874131, "ts": 174199617867.0, "ph": "X", "cat": "fee", "dur": 27514.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199645387.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.upper"}, {"pid": 28243, "tid": 874131, "ts": 174199645412.0, "ph": "X", "cat": "fee", "dur": 9.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199645421.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.upper"}, {"pid": 28243, "tid": 874131, "ts": 174199645436.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174198247649.0, "ph": "X", "cat": "fee", "dur": 1397790.0, "name": "printTopNWords (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:156)"}, {"pid": 28243, "tid": 874131, "ts": 174199645485.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "dict.items"}, {"pid": 28243, "tid": 874131, "ts": 174199645488.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.keys"}, {"pid": 28243, "tid": 874131, "ts": 174199646407.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199646406.0, "ph": "X", "cat": "fee", "dur": 7.0, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199646413.02, "ph": "X", "cat": "fee", "dur": 8.98, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199646405.0, "ph": "X", "cat": "fee", "dur": 17.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199646424.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.keys"}, {"pid": 28243, "tid": 874131, "ts": 174199647268.04, "ph": "X", "cat": "fee", "dur": 0.96, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199647268.02, "ph": "X", "cat": "fee", "dur": 1.98, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199647271.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199647268.0, "ph": "X", "cat": "fee", "dur": 7.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199647280.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.keys"}, {"pid": 28243, "tid": 874131, "ts": 174199647301.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199647300.02, "ph": "X", "cat": "fee", "dur": 1.02, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199647301.06, "ph": "X", "cat": "fee", "dur": 2.94, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199647300.0, "ph": "X", "cat": "fee", "dur": 4.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199647304.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.keys"}, {"pid": 28243, "tid": 874131, "ts": 174199647315.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199647315.02, "ph": "X", "cat": "fee", "dur": 0.98, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199647316.02, "ph": "X", "cat": "fee", "dur": 1.98, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199647315.0, "ph": "X", "cat": "fee", "dur": 3.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199647319.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.keys"}, {"pid": 28243, "tid": 874131, "ts": 174199647331.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199647331.02, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199647331.1, "ph": "X", "cat": "fee", "dur": 2.9, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199647331.0, "ph": "X", "cat": "fee", "dur": 3.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199647334.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.keys"}, {"pid": 28243, "tid": 874131, "ts": 174199647344.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199647344.02, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199647345.0, "ph": "X", "cat": "fee", "dur": 2.0, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199647344.0, "ph": "X", "cat": "fee", "dur": 3.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199647348.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.keys"}, {"pid": 28243, "tid": 874131, "ts": 174199647365.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199647365.02, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199647365.1, "ph": "X", "cat": "fee", "dur": 2.9, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199647365.0, "ph": "X", "cat": "fee", "dur": 9.0, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199647374.02, "ph": "X", "cat": "fee", "dur": 0.02, "name": "dict.keys"}, {"pid": 28243, "tid": 874131, "ts": 174199647387.04, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 28243, "tid": 874131, "ts": 174199647387.02, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)"}, {"pid": 28243, "tid": 874131, "ts": 174199647387.1, "ph": "X", "cat": "fee", "dur": 2.9, "name": "re.Pattern.sub"}, {"pid": 28243, "tid": 874131, "ts": 174199647387.0, "ph": "X", "cat": "fee", "dur": 3.02, "name": "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)"}, {"pid": 28243, "tid": 874131, "ts": 174199647391.0, "ph": "X", "cat": "fee", "dur": 11.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199647709.0, "ph": "X", "cat": "fee", "dur": 8.0, "name": "builtins.print"}, {"pid": 28243, "tid": 874131, "ts": 174199645479.0, "ph": "X", "cat": "fee", "dur": 2239.0, "name": "printWordFrequencyOverYears (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:183)"}, {"pid": 28243, "tid": 874131, "ts": 173956443150.02, "ph": "X", "cat": "fee", "dur": 243204568.0, "name": "runWordCounter (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:214)"}, {"pid": 28243, "tid": 874131, "ts": 173956443150.0, "ph": "X", "cat": "fee", "dur": 245051416.0, "name": "main (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:255)"}, {"pid": 28243, "tid": 874131, "ts": 173956443141.0, "ph": "X", "cat": "fee", "dur": 245051434.0, "name": "<module> (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:1)"}, {"pid": 28243, "tid": 874131, "ts": 173956443139.0, "ph": "X", "cat": "fee", "dur": 245052291.0, "name": "builtins.exec"}], "viztracer_metadata": {"overflow": false, "version": "0.15.1"}, "file_info": {"files": {"/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py": ["\"\"\"Common operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The \"os.path\" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n\"\"\"\n\n# Strings representing various path-related bits and pieces.\n# These are primarily for export; internally, they are hardcoded.\n# Should be set before imports for resolving cyclic dependency.\ncurdir = '.'\npardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\n\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"samefile\",\"sameopenfile\",\"samestat\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\"extsep\",\n           \"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"commonpath\"]\n\n\ndef _get_sep(path):\n    if isinstance(path, bytes):\n        return b'/'\n    else:\n        return '/'\n\n# Normalize the case of a pathname.  Trivial in Posix, string.lower on Mac.\n# On MS-DOS this may also turn slashes into backslashes; however, other\n# normalizations (such as optimizing '../' away) are not allowed\n# (another function should be defined to do that).\n\ndef normcase(s):\n    \"\"\"Normalize case of pathname.  Has no effect under Posix\"\"\"\n    return os.fspath(s)\n\n\n# Return whether a path is absolute.\n# Trivial in Posix, harder on the Mac or MS-DOS.\n\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    sep = _get_sep(s)\n    return s.startswith(sep)\n\n\n# Join pathnames.\n# Ignore the previous parts if a part is absolute.\n# Insert a '/' unless the first part is empty or already ends in '/'.\n\ndef join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator.\"\"\"\n    a = os.fspath(a)\n    sep = _get_sep(a)\n    path = a\n    try:\n        if not p:\n            path[:0] + sep  #23780: Ensure compatible data type even if p is null.\n        for b in map(os.fspath, p):\n            if b.startswith(sep):\n                path = b\n            elif not path or path.endswith(sep):\n                path += b\n            else:\n                path += sep + b\n    except (TypeError, AttributeError, BytesWarning):\n        genericpath._check_arg_types('join', a, *p)\n        raise\n    return path\n\n\n# Split a path in head (everything up to the last '/') and tail (the\n# rest).  If the path ends in '/', tail will be empty.  If there is no\n# '/' in the path, head  will be empty.\n# Trailing '/'es are stripped from head unless it is the root.\n\ndef split(p):\n    \"\"\"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n    everything after the final slash.  Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\ndef splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        sep = b'/'\n        extsep = b'.'\n    else:\n        sep = '/'\n        extsep = '.'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__\n\n# Split a pathname into a drive specification and the rest of the\n# path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.\n\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    p = os.fspath(p)\n    return p[:0], p\n\n\n# Return the tail (basename) part of a path, same as split(path)[1].\n\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\n\n\n# Return the head (dirname) part of a path, same as split(path)[0].\n\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\n\n\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\n\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n\n# Being true for dangling symbolic links is also useful.\n\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        os.lstat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n\n\n# Is a path a mount point?\n# (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)\n\ndef ismount(path):\n    \"\"\"Test whether a path is a mount point\"\"\"\n    try:\n        s1 = os.lstat(path)\n    except (OSError, ValueError):\n        # It doesn't exist -- so not a mount point. :-)\n        return False\n    else:\n        # A symlink can never be a mount point\n        if stat.S_ISLNK(s1.st_mode):\n            return False\n\n    if isinstance(path, bytes):\n        parent = join(path, b'..')\n    else:\n        parent = join(path, '..')\n    parent = realpath(parent)\n    try:\n        s2 = os.lstat(parent)\n    except (OSError, ValueError):\n        return False\n\n    dev1 = s1.st_dev\n    dev2 = s2.st_dev\n    if dev1 != dev2:\n        return True     # path/.. on a different device as path\n    ino1 = s1.st_ino\n    ino2 = s2.st_ino\n    if ino1 == ino2:\n        return True     # path/.. is the same i-node as path\n    return False\n\n\n# Expand paths beginning with '~' or '~user'.\n# '~' means $HOME; '~user' means that user's home directory.\n# If the path doesn't begin with '~', or if the user or $HOME is unknown,\n# the path is returned unchanged (leaving error reporting to whatever\n# function is called with the expanded path as argument).\n# See also module 'glob' for expansion of *, ? and [...] in pathnames.\n# (A function should also be defined to do full *sh-style environment\n# variable expansion.)\n\ndef expanduser(path):\n    \"\"\"Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path\n    sep = _get_sep(path)\n    i = path.find(sep, 1)\n    if i < 0:\n        i = len(path)\n    if i == 1:\n        if 'HOME' not in os.environ:\n            import pwd\n            try:\n                userhome = pwd.getpwuid(os.getuid()).pw_dir\n            except KeyError:\n                # bpo-10496: if the current user identifier doesn't exist in the\n                # password database, return the path unchanged\n                return path\n        else:\n            userhome = os.environ['HOME']\n    else:\n        import pwd\n        name = path[1:i]\n        if isinstance(name, bytes):\n            name = str(name, 'ASCII')\n        try:\n            pwent = pwd.getpwnam(name)\n        except KeyError:\n            # bpo-10496: if the user name from the path doesn't exist in the\n            # password database, return the path unchanged\n            return path\n        userhome = pwent.pw_dir\n    if isinstance(path, bytes):\n        userhome = os.fsencode(userhome)\n        root = b'/'\n    else:\n        root = '/'\n    userhome = userhome.rstrip(root)\n    return (userhome + path[i:]) or root\n\n\n# Expand paths containing shell variable substitutions.\n# This expands the forms $variable and ${variable} only.\n# Non-existent variables are left unchanged.\n\n_varprog = None\n_varprogb = None\n\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:\n            import re\n            _varprogb = re.compile(br'\\$(\\w+|\\{[^}]*\\})', re.ASCII)\n        search = _varprogb.search\n        start = b'{'\n        end = b'}'\n        environ = getattr(os, 'environb', None)\n    else:\n        if '$' not in path:\n            return path\n        if not _varprog:\n            import re\n            _varprog = re.compile(r'\\$(\\w+|\\{[^}]*\\})', re.ASCII)\n        search = _varprog.search\n        start = '{'\n        end = '}'\n        environ = os.environ\n    i = 0\n    while True:\n        m = search(path, i)\n        if not m:\n            break\n        i, j = m.span(0)\n        name = m.group(1)\n        if name.startswith(start) and name.endswith(end):\n            name = name[1:-1]\n        try:\n            if environ is None:\n                value = os.fsencode(os.environ[os.fsdecode(name)])\n            else:\n                value = environ[name]\n        except KeyError:\n            i = j\n        else:\n            tail = path[j:]\n            path = path[:i] + value\n            i = len(path)\n            path += tail\n    return path\n\n\n# Normalize a path, e.g. A//B, A/./B and A/foo/../B all become A/B.\n# It should be understood that this may change the meaning of the path\n# if it contains symbolic links!\n\ndef normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'/'\n        empty = b''\n        dot = b'.'\n        dotdot = b'..'\n    else:\n        sep = '/'\n        empty = ''\n        dot = '.'\n        dotdot = '..'\n    if path == empty:\n        return dot\n    initial_slashes = path.startswith(sep)\n    # POSIX allows one or two initial slashes, but treats three or more\n    # as single slash.\n    # (see http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_13)\n    if (initial_slashes and\n        path.startswith(sep*2) and not path.startswith(sep*3)):\n        initial_slashes = 2\n    comps = path.split(sep)\n    new_comps = []\n    for comp in comps:\n        if comp in (empty, dot):\n            continue\n        if (comp != dotdot or (not initial_slashes and not new_comps) or\n             (new_comps and new_comps[-1] == dotdot)):\n            new_comps.append(comp)\n        elif new_comps:\n            new_comps.pop()\n    comps = new_comps\n    path = sep.join(comps)\n    if initial_slashes:\n        path = sep*initial_slashes + path\n    return path or dot\n\n\ndef abspath(path):\n    \"\"\"Return an absolute path.\"\"\"\n    path = os.fspath(path)\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\n\n\n# Return a canonical path (i.e. the absolute location of a file on the\n# filesystem).\n\ndef realpath(filename):\n    \"\"\"Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.\"\"\"\n    filename = os.fspath(filename)\n    path, ok = _joinrealpath(filename[:0], filename, {})\n    return abspath(path)\n\n# Join two paths, normalizing and eliminating any symbolic links\n# encountered in the second path.\ndef _joinrealpath(path, rest, seen):\n    if isinstance(path, bytes):\n        sep = b'/'\n        curdir = b'.'\n        pardir = b'..'\n    else:\n        sep = '/'\n        curdir = '.'\n        pardir = '..'\n\n    if isabs(rest):\n        rest = rest[1:]\n        path = sep\n\n    while rest:\n        name, _, rest = rest.partition(sep)\n        if not name or name == curdir:\n            # current dir\n            continue\n        if name == pardir:\n            # parent dir\n            if path:\n                path, name = split(path)\n                if name == pardir:\n                    path = join(path, pardir, pardir)\n            else:\n                path = pardir\n            continue\n        newpath = join(path, name)\n        if not islink(newpath):\n            path = newpath\n            continue\n        # Resolve the symbolic link\n        if newpath in seen:\n            # Already seen this path\n            path = seen[newpath]\n            if path is not None:\n                # use cached value\n                continue\n            # The symlink is not resolved, so we must have a symlink loop.\n            # Return already resolved part + rest of the path unchanged.\n            return join(newpath, rest), False\n        seen[newpath] = None # not resolved symlink\n        path, ok = _joinrealpath(path, os.readlink(newpath), seen)\n        if not ok:\n            return join(path, rest), False\n        seen[newpath] = path # resolved symlink\n\n    return path, True\n\n\nsupports_unicode_filenames = (sys.platform == 'darwin')\n\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n\n    if not path:\n        raise ValueError(\"no path specified\")\n\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'\n    else:\n        curdir = '.'\n        sep = '/'\n        pardir = '..'\n\n    if start is None:\n        start = curdir\n    else:\n        start = os.fspath(start)\n\n    try:\n        start_list = [x for x in abspath(start).split(sep) if x]\n        path_list = [x for x in abspath(path).split(sep) if x]\n        # Work out how much of the filepath is shared by start and path.\n        i = len(commonprefix([start_list, path_list]))\n\n        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]\n        if not rel_list:\n            return curdir\n        return join(*rel_list)\n    except (TypeError, AttributeError, BytesWarning, DeprecationWarning):\n        genericpath._check_arg_types('relpath', path, start)\n        raise\n\n\n# Return the longest common sub-path of the sequence of paths given as input.\n# The paths are not normalized before comparing them (this is the\n# responsibility of the caller). Any trailing separator is stripped from the\n# returned path.\n\ndef commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'/'\n        curdir = b'.'\n    else:\n        sep = '/'\n        curdir = '.'\n\n    try:\n        split_paths = [path.split(sep) for path in paths]\n\n        try:\n            isabs, = set(p[:1] == sep for p in paths)\n        except ValueError:\n            raise ValueError(\"Can't mix absolute and relative paths\") from None\n\n        split_paths = [[c for c in s if c and c != curdir] for s in split_paths]\n        s1 = min(split_paths)\n        s2 = max(split_paths)\n        common = s1\n        for i, c in enumerate(s1):\n            if c != s2[i]:\n                common = s1[:i]\n                break\n\n        prefix = sep if isabs else sep[:0]\n        return prefix + sep.join(common)\n    except (TypeError, AttributeError):\n        genericpath._check_arg_types('commonpath', *paths)\n        raise\n", 526], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py": ["\"\"\"A minimal subset of the locale module used at interpreter startup\n(imported by the _io module), in order to reduce startup time.\n\nDon't import directly from third-party code; use the `locale` module instead!\n\"\"\"\n\nimport sys\nimport _locale\n\nif sys.platform.startswith(\"win\"):\n    def getpreferredencoding(do_setlocale=True):\n        if sys.flags.utf8_mode:\n            return 'UTF-8'\n        return _locale._getdefaultlocale()[1]\nelse:\n    try:\n        _locale.CODESET\n    except AttributeError:\n        if hasattr(sys, 'getandroidapilevel'):\n            # On Android langinfo.h and CODESET are missing, and UTF-8 is\n            # always used in mbstowcs() and wcstombs().\n            def getpreferredencoding(do_setlocale=True):\n                return 'UTF-8'\n        else:\n            def getpreferredencoding(do_setlocale=True):\n                if sys.flags.utf8_mode:\n                    return 'UTF-8'\n                # This path for legacy systems needs the more complex\n                # getdefaultlocale() function, import the full locale module.\n                import locale\n                return locale.getpreferredencoding(do_setlocale)\n    else:\n        def getpreferredencoding(do_setlocale=True):\n            assert not do_setlocale\n            if sys.flags.utf8_mode:\n                return 'UTF-8'\n            result = _locale.nl_langinfo(_locale.CODESET)\n            if not result and sys.platform == 'darwin':\n                # nl_langinfo can return an empty string\n                # when the setting has an invalid value.\n                # Default to UTF-8 in that case because\n                # UTF-8 is the default charset on OSX and\n                # returning nothing will crash the\n                # interpreter.\n                result = 'UTF-8'\n            return result\n", 46], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py": ["\"\"\" codecs -- Python Codec Registry, API and helpers.\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n\"\"\"\n\nimport builtins\nimport sys\n\n### Registry and builtin stateless codec functions\n\ntry:\n    from _codecs import *\nexcept ImportError as why:\n    raise SystemError('Failed to load the builtin codecs: %s' % why)\n\n__all__ = [\"register\", \"lookup\", \"open\", \"EncodedFile\", \"BOM\", \"BOM_BE\",\n           \"BOM_LE\", \"BOM32_BE\", \"BOM32_LE\", \"BOM64_BE\", \"BOM64_LE\",\n           \"BOM_UTF8\", \"BOM_UTF16\", \"BOM_UTF16_LE\", \"BOM_UTF16_BE\",\n           \"BOM_UTF32\", \"BOM_UTF32_LE\", \"BOM_UTF32_BE\",\n           \"CodecInfo\", \"Codec\", \"IncrementalEncoder\", \"IncrementalDecoder\",\n           \"StreamReader\", \"StreamWriter\",\n           \"StreamReaderWriter\", \"StreamRecoder\",\n           \"getencoder\", \"getdecoder\", \"getincrementalencoder\",\n           \"getincrementaldecoder\", \"getreader\", \"getwriter\",\n           \"encode\", \"decode\", \"iterencode\", \"iterdecode\",\n           \"strict_errors\", \"ignore_errors\", \"replace_errors\",\n           \"xmlcharrefreplace_errors\",\n           \"backslashreplace_errors\", \"namereplace_errors\",\n           \"register_error\", \"lookup_error\"]\n\n### Constants\n\n#\n# Byte Order Mark (BOM = ZERO WIDTH NO-BREAK SPACE = U+FEFF)\n# and its possible byte string values\n# for UTF8/UTF16/UTF32 output and little/big endian machines\n#\n\n# UTF-8\nBOM_UTF8 = b'\\xef\\xbb\\xbf'\n\n# UTF-16, little endian\nBOM_LE = BOM_UTF16_LE = b'\\xff\\xfe'\n\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\n\nif sys.byteorder == 'little':\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\n\nelse:\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_BE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_BE\n\n# Old broken names (don't use in new code)\nBOM32_LE = BOM_UTF16_LE\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n\n\n### Codec base classes (defining the API)\n\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619\n    _is_text_encoding = True # Assume codecs are text encodings by default\n\n    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,\n        incrementalencoder=None, incrementaldecoder=None, name=None,\n        *, _is_text_encoding=None):\n        self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))\n        self.name = name\n        self.encode = encode\n        self.decode = decode\n        self.incrementalencoder = incrementalencoder\n        self.incrementaldecoder = incrementaldecoder\n        self.streamwriter = streamwriter\n        self.streamreader = streamreader\n        if _is_text_encoding is not None:\n            self._is_text_encoding = _is_text_encoding\n        return self\n\n    def __repr__(self):\n        return \"<%s.%s object for encoding %s at %#x>\" % \\\n                (self.__class__.__module__, self.__class__.__qualname__,\n                 self.name, id(self))\n\nclass Codec:\n\n    \"\"\" Defines the interface for stateless encoders/decoders.\n\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and '?' on encoding.\n         'surrogateescape' - replace with private code points U+DCnn.\n         'xmlcharrefreplace' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         'backslashreplace'  - Replace with backslashed escape sequences.\n         'namereplace'       - Replace with \\\\N{...} escape sequences\n                               (only for encoding).\n\n        The set of allowed values can be extended via register_error.\n\n    \"\"\"\n    def encode(self, input, errors='strict'):\n\n        \"\"\" Encodes the object input and returns a tuple (output\n            object, length consumed).\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamWriter for codecs which have to keep state in order to\n            make encoding efficient.\n\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        \"\"\"\n        raise NotImplementedError\n\n    def decode(self, input, errors='strict'):\n\n        \"\"\" Decodes the object input and returns a tuple (output\n            object, length consumed).\n\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamReader for codecs which have to keep state in order to\n            make decoding efficient.\n\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        \"\"\"\n        raise NotImplementedError\n\nclass IncrementalEncoder(object):\n    \"\"\"\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Creates an IncrementalEncoder instance.\n\n        The IncrementalEncoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        \"\"\"\n        self.errors = errors\n        self.buffer = \"\"\n\n    def encode(self, input, final=False):\n        \"\"\"\n        Encodes input and returns the resulting object.\n        \"\"\"\n        raise NotImplementedError\n\n    def reset(self):\n        \"\"\"\n        Resets the encoder to the initial state.\n        \"\"\"\n\n    def getstate(self):\n        \"\"\"\n        Return the current state of the encoder.\n        \"\"\"\n        return 0\n\n    def setstate(self, state):\n        \"\"\"\n        Set the current state of the encoder. state must have been\n        returned by getstate().\n        \"\"\"\n\nclass BufferedIncrementalEncoder(IncrementalEncoder):\n    \"\"\"\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalEncoder.__init__(self, errors)\n        # unencoded input that is kept between calls to encode()\n        self.buffer = \"\"\n\n    def _buffer_encode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must encode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def encode(self, input, final=False):\n        # encode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_encode(data, self.errors, final)\n        # keep unencoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalEncoder.reset(self)\n        self.buffer = \"\"\n\n    def getstate(self):\n        return self.buffer or 0\n\n    def setstate(self, state):\n        self.buffer = state or \"\"\n\nclass IncrementalDecoder(object):\n    \"\"\"\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Create an IncrementalDecoder instance.\n\n        The IncrementalDecoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        \"\"\"\n        self.errors = errors\n\n    def decode(self, input, final=False):\n        \"\"\"\n        Decode input and returns the resulting object.\n        \"\"\"\n        raise NotImplementedError\n\n    def reset(self):\n        \"\"\"\n        Reset the decoder to the initial state.\n        \"\"\"\n\n    def getstate(self):\n        \"\"\"\n        Return the current state of the decoder.\n\n        This must be a (buffered_input, additional_state_info) tuple.\n        buffered_input must be a bytes object containing bytes that\n        were passed to decode() that have not yet been converted.\n        additional_state_info must be a non-negative integer\n        representing the state of the decoder WITHOUT yet having\n        processed the contents of buffered_input.  In the initial state\n        and after reset(), getstate() must return (b\"\", 0).\n        \"\"\"\n        return (b\"\", 0)\n\n    def setstate(self, state):\n        \"\"\"\n        Set the current state of the decoder.\n\n        state must have been returned by getstate().  The effect of\n        setstate((b\"\", 0)) must be equivalent to reset().\n        \"\"\"\n\nclass BufferedIncrementalDecoder(IncrementalDecoder):\n    \"\"\"\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalDecoder.__init__(self, errors)\n        # undecoded input that is kept between calls to decode()\n        self.buffer = b\"\"\n\n    def _buffer_decode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must decode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def decode(self, input, final=False):\n        # decode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_decode(data, self.errors, final)\n        # keep undecoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalDecoder.reset(self)\n        self.buffer = b\"\"\n\n    def getstate(self):\n        # additional state info is always 0\n        return (self.buffer, 0)\n\n    def setstate(self, state):\n        # ignore additional state info\n        self.buffer = state[0]\n\n#\n# The StreamWriter and StreamReader class provide generic working\n# interfaces which can be used to implement new encoding submodules\n# very easily. See encodings/utf_8.py for an example on how this is\n# done.\n#\n\nclass StreamWriter(Codec):\n\n    def __init__(self, stream, errors='strict'):\n\n        \"\"\" Creates a StreamWriter instance.\n\n            stream must be a file-like object open for writing.\n\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character\n             'xmlcharrefreplace' - Replace with the appropriate XML\n                                   character reference.\n             'backslashreplace'  - Replace with backslashed escape\n                                   sequences.\n             'namereplace'       - Replace with \\\\N{...} escape sequences.\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        \"\"\"\n        self.stream = stream\n        self.errors = errors\n\n    def write(self, object):\n\n        \"\"\" Writes the object's contents encoded to self.stream.\n        \"\"\"\n        data, consumed = self.encode(object, self.errors)\n        self.stream.write(data)\n\n    def writelines(self, list):\n\n        \"\"\" Writes the concatenated list of strings to the stream\n            using .write().\n        \"\"\"\n        self.write(''.join(list))\n\n    def reset(self):\n\n        \"\"\" Resets the codec buffers used for keeping internal state.\n\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n\n        \"\"\"\n        pass\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        if whence == 0 and offset == 0:\n            self.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReader(Codec):\n\n    charbuffertype = str\n\n    def __init__(self, stream, errors='strict'):\n\n        \"\"\" Creates a StreamReader instance.\n\n            stream must be a file-like object open for reading.\n\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character\n             'backslashreplace' - Replace with backslashed escape sequences;\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        \"\"\"\n        self.stream = stream\n        self.errors = errors\n        self.bytebuffer = b\"\"\n        self._empty_charbuffer = self.charbuffertype()\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def decode(self, input, errors='strict'):\n        raise NotImplementedError\n\n    def read(self, size=-1, chars=-1, firstline=False):\n\n        \"\"\" Decodes data from the stream self.stream and returns the\n            resulting object.\n\n            chars indicates the number of decoded code points or bytes to\n            return. read() will never return more data than requested,\n            but it might return less, if there is not enough available.\n\n            size indicates the approximate maximum number of decoded\n            bytes or code points to read for decoding. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n\n            The method should use a greedy read strategy, meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        \"\"\"\n        # If we have lines cached, first merge them back into characters\n        if self.linebuffer:\n            self.charbuffer = self._empty_charbuffer.join(self.linebuffer)\n            self.linebuffer = None\n\n        if chars < 0:\n            # For compatibility with other read() methods that take a\n            # single argument\n            chars = size\n\n        # read until we get the required number of characters (if available)\n        while True:\n            # can the request be satisfied from the character buffer?\n            if chars >= 0:\n                if len(self.charbuffer) >= chars:\n                    break\n            # we need more data\n            if size < 0:\n                newdata = self.stream.read()\n            else:\n                newdata = self.stream.read(size)\n            # decode bytes (those remaining from the last call included)\n            data = self.bytebuffer + newdata\n            if not data:\n                break\n            try:\n                newchars, decodedbytes = self.decode(data, self.errors)\n            except UnicodeDecodeError as exc:\n                if firstline:\n                    newchars, decodedbytes = \\\n                        self.decode(data[:exc.start], self.errors)\n                    lines = newchars.splitlines(keepends=True)\n                    if len(lines)<=1:\n                        raise\n                else:\n                    raise\n            # keep undecoded bytes until the next call\n            self.bytebuffer = data[decodedbytes:]\n            # put new characters in the character buffer\n            self.charbuffer += newchars\n            # there was no data available\n            if not newdata:\n                break\n        if chars < 0:\n            # Return everything we've got\n            result = self.charbuffer\n            self.charbuffer = self._empty_charbuffer\n        else:\n            # Return the first chars characters\n            result = self.charbuffer[:chars]\n            self.charbuffer = self.charbuffer[chars:]\n        return result\n\n    def readline(self, size=None, keepends=True):\n\n        \"\"\" Read one line from the input stream and return the\n            decoded data.\n\n            size, if given, is passed as size argument to the\n            read() method.\n\n        \"\"\"\n        # If we have lines cached from an earlier read, return\n        # them unconditionally\n        if self.linebuffer:\n            line = self.linebuffer[0]\n            del self.linebuffer[0]\n            if len(self.linebuffer) == 1:\n                # revert to charbuffer mode; we might need more data\n                # next time\n                self.charbuffer = self.linebuffer[0]\n                self.linebuffer = None\n            if not keepends:\n                line = line.splitlines(keepends=False)[0]\n            return line\n\n        readsize = size or 72\n        line = self._empty_charbuffer\n        # If size is given, we call read() only once\n        while True:\n            data = self.read(readsize, firstline=True)\n            if data:\n                # If we're at a \"\\r\" read one extra character (which might\n                # be a \"\\n\") to get a proper line ending. If the stream is\n                # temporarily exhausted we return the wrong line ending.\n                if (isinstance(data, str) and data.endswith(\"\\r\")) or \\\n                   (isinstance(data, bytes) and data.endswith(b\"\\r\")):\n                    data += self.read(size=1, chars=1)\n\n            line += data\n            lines = line.splitlines(keepends=True)\n            if lines:\n                if len(lines) > 1:\n                    # More than one line result; the first line is a full line\n                    # to return\n                    line = lines[0]\n                    del lines[0]\n                    if len(lines) > 1:\n                        # cache the remaining lines\n                        lines[-1] += self.charbuffer\n                        self.linebuffer = lines\n                        self.charbuffer = None\n                    else:\n                        # only one remaining line, put it back into charbuffer\n                        self.charbuffer = lines[0] + self.charbuffer\n                    if not keepends:\n                        line = line.splitlines(keepends=False)[0]\n                    break\n                line0withend = lines[0]\n                line0withoutend = lines[0].splitlines(keepends=False)[0]\n                if line0withend != line0withoutend: # We really have a line end\n                    # Put the rest back together and keep it until the next call\n                    self.charbuffer = self._empty_charbuffer.join(lines[1:]) + \\\n                                      self.charbuffer\n                    if keepends:\n                        line = line0withend\n                    else:\n                        line = line0withoutend\n                    break\n            # we didn't get anything or this was our only try\n            if not data or size is not None:\n                if line and not keepends:\n                    line = line.splitlines(keepends=False)[0]\n                break\n            if readsize < 8000:\n                readsize *= 2\n        return line\n\n    def readlines(self, sizehint=None, keepends=True):\n\n        \"\"\" Read all lines available on the input stream\n            and return them as a list.\n\n            Line breaks are implemented using the codec's decoder\n            method and are included in the list entries.\n\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n\n        \"\"\"\n        data = self.read()\n        return data.splitlines(keepends)\n\n    def reset(self):\n\n        \"\"\" Resets the codec buffers used for keeping internal state.\n\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n\n        \"\"\"\n        self.bytebuffer = b\"\"\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def seek(self, offset, whence=0):\n        \"\"\" Set the input stream's current position.\n\n            Resets the codec buffers used for keeping state.\n        \"\"\"\n        self.stream.seek(offset, whence)\n        self.reset()\n\n    def __next__(self):\n\n        \"\"\" Return the next decoded line from the input stream.\"\"\"\n        line = self.readline()\n        if line:\n            return line\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReaderWriter:\n\n    \"\"\" StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n\n    \"\"\"\n    # Optional attributes set by the file wrappers below\n    encoding = 'unknown'\n\n    def __init__(self, stream, Reader, Writer, errors='strict'):\n\n        \"\"\" Creates a StreamReaderWriter instance.\n\n            stream must be a Stream-like object.\n\n            Reader, Writer must be factory functions or classes\n            providing the StreamReader, StreamWriter interface resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        \"\"\"\n        self.stream = stream\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        return self.reader.read(size)\n\n    def readline(self, size=None):\n\n        return self.reader.readline(size)\n\n    def readlines(self, sizehint=None):\n\n        return self.reader.readlines(sizehint)\n\n    def __next__(self):\n\n        \"\"\" Return the next decoded line from the input stream.\"\"\"\n        return next(self.reader)\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        return self.writer.writelines(list)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        self.reader.reset()\n        if whence == 0 and offset == 0:\n            self.writer.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n\n    # these are needed to make \"with StreamReaderWriter(...)\" work properly\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamRecoder:\n\n    \"\"\" StreamRecoder instances translate data from one encoding to another.\n\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n\n        Data written to the StreamRecoder is first decoded into an\n        intermediate format (depending on the \"decode\" codec) and then\n        written to the underlying stream using an instance of the provided\n        Writer class.\n\n        In the other direction, data is read from the underlying stream using\n        a Reader instance and then encoded and returned to the caller.\n\n    \"\"\"\n    # Optional attributes set by the file wrappers below\n    data_encoding = 'unknown'\n    file_encoding = 'unknown'\n\n    def __init__(self, stream, encode, decode, Reader, Writer,\n                 errors='strict'):\n\n        \"\"\" Creates a StreamRecoder instance which implements a two-way\n            conversion: encode and decode work on the frontend (the\n            data visible to .read() and .write()) while Reader and Writer\n            work on the backend (the data in stream).\n\n            You can use these objects to do transparent\n            transcodings from e.g. latin-1 to utf-8 and back.\n\n            stream must be a file-like object.\n\n            encode and decode must adhere to the Codec interface; Reader and\n            Writer must be factory functions or classes providing the\n            StreamReader and StreamWriter interfaces resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        \"\"\"\n        self.stream = stream\n        self.encode = encode\n        self.decode = decode\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        data = self.reader.read(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readline(self, size=None):\n\n        if size is None:\n            data = self.reader.readline()\n        else:\n            data = self.reader.readline(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readlines(self, sizehint=None):\n\n        data = self.reader.read()\n        data, bytesencoded = self.encode(data, self.errors)\n        return data.splitlines(keepends=True)\n\n    def __next__(self):\n\n        \"\"\" Return the next decoded line from the input stream.\"\"\"\n        data = next(self.reader)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        data = b''.join(list)\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def seek(self, offset, whence=0):\n        # Seeks must be propagated to both the readers and writers\n        # as they might need to reset their internal buffers.\n        self.reader.seek(offset, whence)\n        self.writer.seek(offset, whence)\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n### Shortcuts\n\ndef open(filename, mode='r', encoding=None, errors='strict', buffering=-1):\n\n    \"\"\" Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n\n        Underlying encoded files are always opened in binary mode.\n        The default file mode is 'r', meaning to open the file in read mode.\n\n        encoding specifies the encoding which is to be used for the\n        file.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to -1 which means that the default buffer size will\n        be used.\n\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n\n    \"\"\"\n    if encoding is not None and \\\n       'b' not in mode:\n        # Force opening of the file in binary mode\n        mode = mode + 'b'\n    file = builtins.open(filename, mode, buffering)\n    if encoding is None:\n        return file\n\n    try:\n        info = lookup(encoding)\n        srw = StreamReaderWriter(file, info.streamreader, info.streamwriter, errors)\n        # Add attributes to simplify introspection\n        srw.encoding = encoding\n        return srw\n    except:\n        file.close()\n        raise\n\ndef EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):\n\n    \"\"\" Return a wrapped version of file which provides transparent\n        encoding translation.\n\n        Data written to the wrapped file is decoded according\n        to the given data_encoding and then encoded to the underlying\n        file using file_encoding. The intermediate data type\n        will usually be Unicode but depends on the specified codecs.\n\n        Bytes read from the file are decoded using file_encoding and then\n        passed back to the caller encoded using data_encoding.\n\n        If file_encoding is not given, it defaults to data_encoding.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n\n    \"\"\"\n    if file_encoding is None:\n        file_encoding = data_encoding\n    data_info = lookup(data_encoding)\n    file_info = lookup(file_encoding)\n    sr = StreamRecoder(file, data_info.encode, data_info.decode,\n                       file_info.streamreader, file_info.streamwriter, errors)\n    # Add attributes to simplify introspection\n    sr.data_encoding = data_encoding\n    sr.file_encoding = file_encoding\n    return sr\n\n### Helpers for codec lookup\n\ndef getencoder(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its encoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    \"\"\"\n    return lookup(encoding).encode\n\ndef getdecoder(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its decoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    \"\"\"\n    return lookup(encoding).decode\n\ndef getincrementalencoder(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n\n    \"\"\"\n    encoder = lookup(encoding).incrementalencoder\n    if encoder is None:\n        raise LookupError(encoding)\n    return encoder\n\ndef getincrementaldecoder(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n\n    \"\"\"\n    decoder = lookup(encoding).incrementaldecoder\n    if decoder is None:\n        raise LookupError(encoding)\n    return decoder\n\ndef getreader(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    \"\"\"\n    return lookup(encoding).streamreader\n\ndef getwriter(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    \"\"\"\n    return lookup(encoding).streamwriter\n\ndef iterencode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Encoding iterator.\n\n    Encodes the input strings from the iterator using an IncrementalEncoder.\n\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    \"\"\"\n    encoder = getincrementalencoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = encoder.encode(input)\n        if output:\n            yield output\n    output = encoder.encode(\"\", True)\n    if output:\n        yield output\n\ndef iterdecode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Decoding iterator.\n\n    Decodes the input strings from the iterator using an IncrementalDecoder.\n\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    \"\"\"\n    decoder = getincrementaldecoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = decoder.decode(input)\n        if output:\n            yield output\n    output = decoder.decode(b\"\", True)\n    if output:\n        yield output\n\n### Helpers for charmap-based codecs\n\ndef make_identity_dict(rng):\n\n    \"\"\" make_identity_dict(rng) -> dict\n\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n\n    \"\"\"\n    return {i:i for i in rng}\n\ndef make_encoding_map(decoding_map):\n\n    \"\"\" Creates an encoding map from a decoding map.\n\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n\n        One example where this happens is cp875.py which decodes\n        multiple character to \\\\u001a.\n\n    \"\"\"\n    m = {}\n    for k,v in decoding_map.items():\n        if not v in m:\n            m[v] = k\n        else:\n            m[v] = None\n    return m\n\n### error handlers\n\ntry:\n    strict_errors = lookup_error(\"strict\")\n    ignore_errors = lookup_error(\"ignore\")\n    replace_errors = lookup_error(\"replace\")\n    xmlcharrefreplace_errors = lookup_error(\"xmlcharrefreplace\")\n    backslashreplace_errors = lookup_error(\"backslashreplace\")\n    namereplace_errors = lookup_error(\"namereplace\")\nexcept LookupError:\n    # In --disable-unicode builds, these error handler are missing\n    strict_errors = None\n    ignore_errors = None\n    replace_errors = None\n    xmlcharrefreplace_errors = None\n    backslashreplace_errors = None\n    namereplace_errors = None\n\n# Tell modulefinder that using codecs probably needs the encodings\n# package\n_false = 0\nif _false:\n    import encodings\n\n### Tests\n\nif __name__ == '__main__':\n\n    # Make stdout translate Latin-1 output into UTF-8 output\n    sys.stdout = EncodedFile(sys.stdout, 'latin-1', 'utf-8')\n\n    # Have stdin translate Latin-1 input into UTF-8 input\n    sys.stdin = EncodedFile(sys.stdin, 'utf-8', 'latin-1')\n", 1126], "/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py": ["'''\nCS337 Spring 2022 - Operating Systems Prof. Al Madi\nProject 5 - Multitasking\nserial_code_4.py\nMatthew Bass\n03/13/2022\n\nThis is a file to count the words and do other functions with the the\nreddit's comments data\n\nAnother version much more simplified\n\nRefactored to process all the files one at a time\n\nIt does the following:\n    - Read in the Reddit comments files\n\n    - Count each word\n\n    - Print the 10 most common words in each file\n\n    - Print the frequency of a given word in each year to observe word trends\n      (frequency = word_count / number_of_words)\n\n    - Time your \u201ccommon word\u201d and \u201cword trend\u201d code reliably for comparison\n'''\n\nimport os\nimport re\nimport time\nfrom collections import Counter\n\n'''\nHelper FunctionS\n'''\n\n\n\n'''\nFunctions to parse the raw data and clean it\n'''\n\n\ndef readInData(data_file: str, data_path: str) -> str:\n    '''\n    A Function to read in the raw data from the file as a string\n\n    Args:\n        data_file (str): the name of the file\n        data_path (str): the path to the file\n\n    Returns:\n        data (str): the raw string of the data\n\n    '''\n    with open(data_path+data_file, 'r') as file:\n        data = file.read()\n    return data\n\n\ndef cleanAndTokenize(data : str) -> list:\n    '''\n    A Function to clean and tokenize the raw string\n    Args:\n        data (str): the raw string of the data\n\n    Returns:\n        tokens (list): a list of the cleaned word tokens\n\n    '''\n    # Remove extra spaces, tabs, and line breaks\n    data = \" \".join(data.split())\n\n    # keep only words\n    data = re.sub(r\"[^A-Za-z\\s]+\", \"\", data).split(\" \")\n    return data\n\ndef getWordCount(data_file: str, data_path: str) -> Counter:\n    '''\n    A Function to get the word count from specified file\n\n    Args:\n        data_file (str): the name of the file\n        data_path (str): the path to the file\n\n    Returns:\n        word_count(Counter): A counter of the files word count\n\n\n    '''\n    data = readInData(data_file,data_path)\n    data = cleanAndTokenize(data)\n    return Counter(data)\n\n\ndef getWordFrequencies(word_count : Counter) -> dict:\n    '''\n    A Function to get the word frequency from the counter\n\n    Args:\n        word_count (Counter):\n\n    Returns:\n        word_frequencies (dict): a dict of the word frequencies\n    '''\n    # Initialize word frequencies dict\n    word_frequencies = {}\n\n    # Get the total word count\n    total_count = sum(word_count.values())\n\n\n    for word, count in word_count.items():\n        word_frequencies[word] = (count / total_count)\n\n\n    return word_frequencies\n\n\n\n\ndef getWordData(data_file: str, data_path: str, debug = True) -> dict:\n    '''\n    Main running function to get all the word count data\n    :param data_file: the name of the file\n    :param data_path: the path to the file\n    :param debug: Bool if true debug staatement printed\n\n    :return word_data: a tuple of the word counts and word frequencies\n\n    '''\n\n\n    if debug:\n        t_start_time = time.perf_counter()\n        print(f\"START getWordData {data_file}\")\n\n    # Get the word counter\n    word_count = getWordCount(data_file,data_path)\n\n    if debug:\n        t_end_time = time.perf_counter()\n        t_total_time = t_end_time - t_start_time\n        print(f\"\\nEND getWordData {data_file}! \" +\n              f\"\\n\\tIt took {t_total_time} sec(s) to run in total!\\n\")\n\n    # Get the word frequencies\n    word_frequencies = getWordFrequencies(word_count)\n\n    # Make the word data object\n    word_data = (word_count, word_frequencies)\n\n    return word_data\n\n\ndef printTopNWords(files_data: dict, top_n_words: int = 10):\n    '''\n    A Function to print out the top N words over the years\n    Args:\n        files_data (dict): the dict of word data\n        top_n_words (int): the top n words to print out\n\n    Returns:\n\n    '''\n\n    # Get the top words from all the years\n    top_words = {}\n    for file_name, data in files_data.items():\n        n_words = data[0].most_common(top_n_words)\n\n        top_words[re.sub(\"[^0-9]\", \"\", file_name)] = n_words\n\n    print(f\"\\nThe top {top_n_words} words for each year (word, count)\")\n    print(f\"In Order Top: {[x+1 for x in range(top_n_words)]}\")\n    for year, tw in top_words.items():\n        print(f\"{year.upper()}. {tw}\")\n\n\n    return\n\n\ndef printWordFrequencyOverYears(files_data: dict, word: str):\n    '''\n    A Function to print out the top N words over the years\n    Args:\n        files_data (dict): the dict of word data\n        word (str): the word whos frequency to print out\n\n    Returns:\n\n    '''\n\n    # Get the word frequency from over the years\n    word_freq = {}\n    for file_name, data in files_data.items():\n        word_freqs = data[1]\n\n        # If the word is in the frequencies for that year add it\n        if word in word_freqs.keys():\n\n            word_freq[re.sub(\"[^0-9]\", \"\", file_name)] = word_freqs[word]\n\n        #if it isnt the frequency is 0\n        else:\n            word_freq[re.sub(\"[^0-9]\", \"\", file_name)] = 0\n\n    # Print the Header\n    print(f\"\\n The frequency of {word} over the years is:\")\n    print(f\"\\t {word_freq}\")\n    return\n\n\ndef runWordCounter() -> dict:\n    '''\n    Main function to run the word counter\n\n    Timing of funtions will be done in nanoseconds\n\n    :param data_type: a str of the data type to use. Valid types list, np, gpu\n    :return: a dictionary of all the files raw strings\n    '''\n\n\n    # Get the current file directory path of the file.\n    dir_path = os.path.dirname(os.path.realpath(__file__))\n\n    # Make the filepath the reddit comments (data) path\n\n    data_path = os.path.join(dir_path, os.path.normcase(\"data/\"))\n\n    # Get all the data files\n    data_files = os.listdir(data_path)\n\n    #calculate the word data for each data file\n    files_data = {}\n    getWordData_start_time = time.perf_counter()\n    for data_file in data_files:\n        files_data[data_file] = getWordData(data_file,data_path)\n    getWordData_end_time = time.perf_counter()\n    getWordData_total_time = getWordData_end_time - getWordData_start_time\n    print(f\"\\nWord Counter  is done! \" +\n          f\"\\n\\tIt took {getWordData_total_time} sec(s) to run in total!\\n\")\n\n    # Print the top 10 words\n    printTopNWords(files_data)\n\n    # Print word frequency of the\n    printWordFrequencyOverYears(files_data,\"the\")\n\n    return\n\n\n# Main function to run the script\ndef main():\n\n\n    runWordCounter()\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n", 263], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# convert template to internal format\n#\n# Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.\n#\n# See the sre.py file for information on usage and redistribution.\n#\n\n\"\"\"Internal support module for sre\"\"\"\n\nimport _sre\nimport sre_parse\nfrom sre_constants import *\n\nassert _sre.MAGIC == MAGIC, \"SRE module mismatch\"\n\n_LITERAL_CODES = {LITERAL, NOT_LITERAL}\n_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # i\u0131\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # s\u017f\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # \u00b5\u03bc\n    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI\n    (0x345, 0x3b9, 0x1fbe), # \\u0345\u03b9\u1fbe\n    # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n    (0x390, 0x1fd3), # \u0390\u1fd3\n    # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA\n    (0x3b0, 0x1fe3), # \u03b0\u1fe3\n    # GREEK SMALL LETTER BETA, GREEK BETA SYMBOL\n    (0x3b2, 0x3d0), # \u03b2\u03d0\n    # GREEK SMALL LETTER EPSILON, GREEK LUNATE EPSILON SYMBOL\n    (0x3b5, 0x3f5), # \u03b5\u03f5\n    # GREEK SMALL LETTER THETA, GREEK THETA SYMBOL\n    (0x3b8, 0x3d1), # \u03b8\u03d1\n    # GREEK SMALL LETTER KAPPA, GREEK KAPPA SYMBOL\n    (0x3ba, 0x3f0), # \u03ba\u03f0\n    # GREEK SMALL LETTER PI, GREEK PI SYMBOL\n    (0x3c0, 0x3d6), # \u03c0\u03d6\n    # GREEK SMALL LETTER RHO, GREEK RHO SYMBOL\n    (0x3c1, 0x3f1), # \u03c1\u03f1\n    # GREEK SMALL LETTER FINAL SIGMA, GREEK SMALL LETTER SIGMA\n    (0x3c2, 0x3c3), # \u03c2\u03c3\n    # GREEK SMALL LETTER PHI, GREEK PHI SYMBOL\n    (0x3c6, 0x3d5), # \u03c6\u03d5\n    # LATIN SMALL LETTER S WITH DOT ABOVE, LATIN SMALL LETTER LONG S WITH DOT ABOVE\n    (0x1e61, 0x1e9b), # \u1e61\u1e9b\n    # LATIN SMALL LIGATURE LONG S T, LATIN SMALL LIGATURE ST\n    (0xfb05, 0xfb06), # \ufb05\ufb06\n)\n\n# Maps the lowercase code to lowercase codes which have the same uppercase.\n_ignorecase_fixes = {i: tuple(j for j in t if i != j)\n                     for t in _equivalences for i in t}\n\ndef _combine_flags(flags, add_flags, del_flags,\n                   TYPE_FLAGS=sre_parse.TYPE_FLAGS):\n    if add_flags & TYPE_FLAGS:\n        flags &= ~TYPE_FLAGS\n    return (flags | add_flags) & ~del_flags\n\ndef _compile(code, pattern, flags):\n    # internal: compile a (sub)pattern\n    emit = code.append\n    _len = len\n    LITERAL_CODES = _LITERAL_CODES\n    REPEATING_CODES = _REPEATING_CODES\n    SUCCESS_CODES = _SUCCESS_CODES\n    ASSERT_CODES = _ASSERT_CODES\n    iscased = None\n    tolower = None\n    fixes = None\n    if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\n        if flags & SRE_FLAG_UNICODE:\n            iscased = _sre.unicode_iscased\n            tolower = _sre.unicode_tolower\n            fixes = _ignorecase_fixes\n        else:\n            iscased = _sre.ascii_iscased\n            tolower = _sre.ascii_tolower\n    for op, av in pattern:\n        if op in LITERAL_CODES:\n            if not flags & SRE_FLAG_IGNORECASE:\n                emit(op)\n                emit(av)\n            elif flags & SRE_FLAG_LOCALE:\n                emit(OP_LOCALE_IGNORE[op])\n                emit(av)\n            elif not iscased(av):\n                emit(op)\n                emit(av)\n            else:\n                lo = tolower(av)\n                if not fixes:  # ascii\n                    emit(OP_IGNORE[op])\n                    emit(lo)\n                elif lo not in fixes:\n                    emit(OP_UNICODE_IGNORE[op])\n                    emit(lo)\n                else:\n                    emit(IN_UNI_IGNORE)\n                    skip = _len(code); emit(0)\n                    if op is NOT_LITERAL:\n                        emit(NEGATE)\n                    for k in (lo,) + fixes[lo]:\n                        emit(LITERAL)\n                        emit(k)\n                    emit(FAILURE)\n                    code[skip] = _len(code) - skip\n        elif op is IN:\n            charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\n            if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\n                emit(IN_LOC_IGNORE)\n            elif not hascased:\n                emit(IN)\n            elif not fixes:  # ascii\n                emit(IN_IGNORE)\n            else:\n                emit(IN_UNI_IGNORE)\n            skip = _len(code); emit(0)\n            _compile_charset(charset, flags, code)\n            code[skip] = _len(code) - skip\n        elif op is ANY:\n            if flags & SRE_FLAG_DOTALL:\n                emit(ANY_ALL)\n            else:\n                emit(ANY)\n        elif op in REPEATING_CODES:\n            if flags & SRE_FLAG_TEMPLATE:\n                raise error(\"internal: unsupported template operator %r\" % (op,))\n            if _simple(av[2]):\n                if op is MAX_REPEAT:\n                    emit(REPEAT_ONE)\n                else:\n                    emit(MIN_REPEAT_ONE)\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                emit(SUCCESS)\n                code[skip] = _len(code) - skip\n            else:\n                emit(REPEAT)\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                code[skip] = _len(code) - skip\n                if op is MAX_REPEAT:\n                    emit(MAX_UNTIL)\n                else:\n                    emit(MIN_UNTIL)\n        elif op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            if group:\n                emit(MARK)\n                emit((group-1)*2)\n            # _compile_info(code, p, _combine_flags(flags, add_flags, del_flags))\n            _compile(code, p, _combine_flags(flags, add_flags, del_flags))\n            if group:\n                emit(MARK)\n                emit((group-1)*2+1)\n        elif op in SUCCESS_CODES:\n            emit(op)\n        elif op in ASSERT_CODES:\n            emit(op)\n            skip = _len(code); emit(0)\n            if av[0] >= 0:\n                emit(0) # look ahead\n            else:\n                lo, hi = av[1].getwidth()\n                if lo != hi:\n                    raise error(\"look-behind requires fixed-width pattern\")\n                emit(lo) # look behind\n            _compile(code, av[1], flags)\n            emit(SUCCESS)\n            code[skip] = _len(code) - skip\n        elif op is CALL:\n            emit(op)\n            skip = _len(code); emit(0)\n            _compile(code, av, flags)\n            emit(SUCCESS)\n            code[skip] = _len(code) - skip\n        elif op is AT:\n            emit(op)\n            if flags & SRE_FLAG_MULTILINE:\n                av = AT_MULTILINE.get(av, av)\n            if flags & SRE_FLAG_LOCALE:\n                av = AT_LOCALE.get(av, av)\n            elif flags & SRE_FLAG_UNICODE:\n                av = AT_UNICODE.get(av, av)\n            emit(av)\n        elif op is BRANCH:\n            emit(op)\n            tail = []\n            tailappend = tail.append\n            for av in av[1]:\n                skip = _len(code); emit(0)\n                # _compile_info(code, av, flags)\n                _compile(code, av, flags)\n                emit(JUMP)\n                tailappend(_len(code)); emit(0)\n                code[skip] = _len(code) - skip\n            emit(FAILURE) # end of branch\n            for tail in tail:\n                code[tail] = _len(code) - tail\n        elif op is CATEGORY:\n            emit(op)\n            if flags & SRE_FLAG_LOCALE:\n                av = CH_LOCALE[av]\n            elif flags & SRE_FLAG_UNICODE:\n                av = CH_UNICODE[av]\n            emit(av)\n        elif op is GROUPREF:\n            if not flags & SRE_FLAG_IGNORECASE:\n                emit(op)\n            elif flags & SRE_FLAG_LOCALE:\n                emit(GROUPREF_LOC_IGNORE)\n            elif not fixes:  # ascii\n                emit(GROUPREF_IGNORE)\n            else:\n                emit(GROUPREF_UNI_IGNORE)\n            emit(av-1)\n        elif op is GROUPREF_EXISTS:\n            emit(op)\n            emit(av[0]-1)\n            skipyes = _len(code); emit(0)\n            _compile(code, av[1], flags)\n            if av[2]:\n                emit(JUMP)\n                skipno = _len(code); emit(0)\n                code[skipyes] = _len(code) - skipyes + 1\n                _compile(code, av[2], flags)\n                code[skipno] = _len(code) - skipno\n            else:\n                code[skipyes] = _len(code) - skipyes + 1\n        else:\n            raise error(\"internal: unsupported operand type %r\" % (op,))\n\ndef _compile_charset(charset, flags, code):\n    # compile charset subprogram\n    emit = code.append\n    for op, av in charset:\n        emit(op)\n        if op is NEGATE:\n            pass\n        elif op is LITERAL:\n            emit(av)\n        elif op is RANGE or op is RANGE_UNI_IGNORE:\n            emit(av[0])\n            emit(av[1])\n        elif op is CHARSET:\n            code.extend(av)\n        elif op is BIGCHARSET:\n            code.extend(av)\n        elif op is CATEGORY:\n            if flags & SRE_FLAG_LOCALE:\n                emit(CH_LOCALE[av])\n            elif flags & SRE_FLAG_UNICODE:\n                emit(CH_UNICODE[av])\n            else:\n                emit(av)\n        else:\n            raise error(\"internal: unsupported set operator %r\" % (op,))\n    emit(FAILURE)\n\ndef _optimize_charset(charset, iscased=None, fixup=None, fixes=None):\n    # internal: optimize character set\n    out = []\n    tail = []\n    charmap = bytearray(256)\n    hascased = False\n    for op, av in charset:\n        while True:\n            try:\n                if op is LITERAL:\n                    if fixup:\n                        lo = fixup(av)\n                        charmap[lo] = 1\n                        if fixes and lo in fixes:\n                            for k in fixes[lo]:\n                                charmap[k] = 1\n                        if not hascased and iscased(av):\n                            hascased = True\n                    else:\n                        charmap[av] = 1\n                elif op is RANGE:\n                    r = range(av[0], av[1]+1)\n                    if fixup:\n                        if fixes:\n                            for i in map(fixup, r):\n                                charmap[i] = 1\n                                if i in fixes:\n                                    for k in fixes[i]:\n                                        charmap[k] = 1\n                        else:\n                            for i in map(fixup, r):\n                                charmap[i] = 1\n                        if not hascased:\n                            hascased = any(map(iscased, r))\n                    else:\n                        for i in r:\n                            charmap[i] = 1\n                elif op is NEGATE:\n                    out.append((op, av))\n                else:\n                    tail.append((op, av))\n            except IndexError:\n                if len(charmap) == 256:\n                    # character set contains non-UCS1 character codes\n                    charmap += b'\\0' * 0xff00\n                    continue\n                # Character set contains non-BMP character codes.\n                if fixup:\n                    hascased = True\n                    # There are only two ranges of cased non-BMP characters:\n                    # 10400-1044F (Deseret) and 118A0-118DF (Warang Citi),\n                    # and for both ranges RANGE_UNI_IGNORE works.\n                    if op is RANGE:\n                        op = RANGE_UNI_IGNORE\n                tail.append((op, av))\n            break\n\n    # compress character map\n    runs = []\n    q = 0\n    while True:\n        p = charmap.find(1, q)\n        if p < 0:\n            break\n        if len(runs) >= 2:\n            runs = None\n            break\n        q = charmap.find(0, p)\n        if q < 0:\n            runs.append((p, len(charmap)))\n            break\n        runs.append((p, q))\n    if runs is not None:\n        # use literal/range\n        for p, q in runs:\n            if q - p == 1:\n                out.append((LITERAL, p))\n            else:\n                out.append((RANGE, (p, q - 1)))\n        out += tail\n        # if the case was changed or new representation is more compact\n        if hascased or len(out) < len(charset):\n            return out, hascased\n        # else original character set is good enough\n        return charset, hascased\n\n    # use bitmap\n    if len(charmap) == 256:\n        data = _mk_bitmap(charmap)\n        out.append((CHARSET, data))\n        out += tail\n        return out, hascased\n\n    # To represent a big charset, first a bitmap of all characters in the\n    # set is constructed. Then, this bitmap is sliced into chunks of 256\n    # characters, duplicate chunks are eliminated, and each chunk is\n    # given a number. In the compiled expression, the charset is\n    # represented by a 32-bit word sequence, consisting of one word for\n    # the number of different chunks, a sequence of 256 bytes (64 words)\n    # of chunk numbers indexed by their original chunk position, and a\n    # sequence of 256-bit chunks (8 words each).\n\n    # Compression is normally good: in a typical charset, large ranges of\n    # Unicode will be either completely excluded (e.g. if only cyrillic\n    # letters are to be matched), or completely included (e.g. if large\n    # subranges of Kanji match). These ranges will be represented by\n    # chunks of all one-bits or all zero-bits.\n\n    # Matching can be also done efficiently: the more significant byte of\n    # the Unicode character is an index into the chunk number, and the\n    # less significant byte is a bit index in the chunk (just like the\n    # CHARSET matching).\n\n    charmap = bytes(charmap) # should be hashable\n    comps = {}\n    mapping = bytearray(256)\n    block = 0\n    data = bytearray()\n    for i in range(0, 65536, 256):\n        chunk = charmap[i: i + 256]\n        if chunk in comps:\n            mapping[i // 256] = comps[chunk]\n        else:\n            mapping[i // 256] = comps[chunk] = block\n            block += 1\n            data += chunk\n    data = _mk_bitmap(data)\n    data[0:0] = [block] + _bytes_to_codes(mapping)\n    out.append((BIGCHARSET, data))\n    out += tail\n    return out, hascased\n\n_CODEBITS = _sre.CODESIZE * 8\nMAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\n\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE\n    assert len(a) * a.itemsize == len(b)\n    return a.tolist()\n\ndef _simple(p):\n    # check if this subpattern is a \"simple\" operator\n    if len(p) != 1:\n        return False\n    op, av = p[0]\n    if op is SUBPATTERN:\n        return av[0] is None and _simple(av[-1])\n    return op in _UNIT_CODES\n\ndef _generate_overlap_table(prefix):\n    \"\"\"\n    Generate an overlap table for the following prefix.\n    An overlap table is a table of the same size as the prefix which\n    informs about the potential self-overlap for each index in the prefix:\n    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]\n    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with\n      prefix[0:k]\n    \"\"\"\n    table = [0] * len(prefix)\n    for i in range(1, len(prefix)):\n        idx = table[i - 1]\n        while prefix[i] != prefix[idx]:\n            if idx == 0:\n                table[i] = 0\n                break\n            idx = table[idx - 1]\n        else:\n            table[i] = idx + 1\n    return table\n\ndef _get_iscased(flags):\n    if not flags & SRE_FLAG_IGNORECASE:\n        return None\n    elif flags & SRE_FLAG_UNICODE:\n        return _sre.unicode_iscased\n    else:\n        return _sre.ascii_iscased\n\ndef _get_literal_prefix(pattern, flags):\n    # look for literal prefix\n    prefix = []\n    prefixappend = prefix.append\n    prefix_skip = None\n    iscased = _get_iscased(flags)\n    for op, av in pattern.data:\n        if op is LITERAL:\n            if iscased and iscased(av):\n                break\n            prefixappend(av)\n        elif op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            flags1 = _combine_flags(flags, add_flags, del_flags)\n            if flags1 & SRE_FLAG_IGNORECASE and flags1 & SRE_FLAG_LOCALE:\n                break\n            prefix1, prefix_skip1, got_all = _get_literal_prefix(p, flags1)\n            if prefix_skip is None:\n                if group is not None:\n                    prefix_skip = len(prefix)\n                elif prefix_skip1 is not None:\n                    prefix_skip = len(prefix) + prefix_skip1\n            prefix.extend(prefix1)\n            if not got_all:\n                break\n        else:\n            break\n    else:\n        return prefix, prefix_skip, True\n    return prefix, prefix_skip, False\n\ndef _get_charset_prefix(pattern, flags):\n    while True:\n        if not pattern.data:\n            return None\n        op, av = pattern.data[0]\n        if op is not SUBPATTERN:\n            break\n        group, add_flags, del_flags, pattern = av\n        flags = _combine_flags(flags, add_flags, del_flags)\n        if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\n            return None\n\n    iscased = _get_iscased(flags)\n    if op is LITERAL:\n        if iscased and iscased(av):\n            return None\n        return [(op, av)]\n    elif op is BRANCH:\n        charset = []\n        charsetappend = charset.append\n        for p in av[1]:\n            if not p:\n                return None\n            op, av = p[0]\n            if op is LITERAL and not (iscased and iscased(av)):\n                charsetappend((op, av))\n            else:\n                return None\n        return charset\n    elif op is IN:\n        charset = av\n        if iscased:\n            for op, av in charset:\n                if op is LITERAL:\n                    if iscased(av):\n                        return None\n                elif op is RANGE:\n                    if av[1] > 0xffff:\n                        return None\n                    if any(map(iscased, range(av[0], av[1]+1))):\n                        return None\n        return charset\n    return None\n\ndef _compile_info(code, pattern, flags):\n    # internal: compile an info block.  in the current version,\n    # this contains min/max pattern width, and an optional literal\n    # prefix or a character map\n    lo, hi = pattern.getwidth()\n    if hi > MAXCODE:\n        hi = MAXCODE\n    if lo == 0:\n        code.extend([INFO, 4, 0, lo, hi])\n        return\n    # look for a literal prefix\n    prefix = []\n    prefix_skip = 0\n    charset = [] # not used\n    if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\n        # look for literal prefix\n        prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\n        # if no prefix, look for charset prefix\n        if not prefix:\n            charset = _get_charset_prefix(pattern, flags)\n##     if prefix:\n##         print(\"*** PREFIX\", prefix, prefix_skip)\n##     if charset:\n##         print(\"*** CHARSET\", charset)\n    # add an info block\n    emit = code.append\n    emit(INFO)\n    skip = len(code); emit(0)\n    # literal flag\n    mask = 0\n    if prefix:\n        mask = SRE_INFO_PREFIX\n        if prefix_skip is None and got_all:\n            mask = mask | SRE_INFO_LITERAL\n    elif charset:\n        mask = mask | SRE_INFO_CHARSET\n    emit(mask)\n    # pattern length\n    if lo < MAXCODE:\n        emit(lo)\n    else:\n        emit(MAXCODE)\n        prefix = prefix[:MAXCODE]\n    emit(min(hi, MAXCODE))\n    # add literal prefix\n    if prefix:\n        emit(len(prefix)) # length\n        if prefix_skip is None:\n            prefix_skip =  len(prefix)\n        emit(prefix_skip) # skip\n        code.extend(prefix)\n        # generate overlap table\n        code.extend(_generate_overlap_table(prefix))\n    elif charset:\n        charset, hascased = _optimize_charset(charset)\n        assert not hascased\n        _compile_charset(charset, flags, code)\n    code[skip] = len(code) - skip\n\ndef isstring(obj):\n    return isinstance(obj, (str, bytes))\n\ndef _code(p, flags):\n\n    flags = p.state.flags | flags\n    code = []\n\n    # compile info block\n    _compile_info(code, p, flags)\n\n    # compile the pattern\n    _compile(code, p.data, flags)\n\n    code.append(SUCCESS)\n\n    return code\n\ndef _hex_code(code):\n    return '[%s]' % ', '.join('%#0*x' % (_sre.CODESIZE*2+2, x) for x in code)\n\ndef dis(code):\n    import sys\n\n    labels = set()\n    level = 0\n    offset_width = len(str(len(code) - 1))\n\n    def dis_(start, end):\n        def print_(*args, to=None):\n            if to is not None:\n                labels.add(to)\n                args += ('(to %d)' % (to,),)\n            print('%*d%s ' % (offset_width, start, ':' if start in labels else '.'),\n                  end='  '*(level-1))\n            print(*args)\n\n        def print_2(*args):\n            print(end=' '*(offset_width + 2*level))\n            print(*args)\n\n        nonlocal level\n        level += 1\n        i = start\n        while i < end:\n            start = i\n            op = code[i]\n            i += 1\n            op = OPCODES[op]\n            if op in (SUCCESS, FAILURE, ANY, ANY_ALL,\n                      MAX_UNTIL, MIN_UNTIL, NEGATE):\n                print_(op)\n            elif op in (LITERAL, NOT_LITERAL,\n                        LITERAL_IGNORE, NOT_LITERAL_IGNORE,\n                        LITERAL_UNI_IGNORE, NOT_LITERAL_UNI_IGNORE,\n                        LITERAL_LOC_IGNORE, NOT_LITERAL_LOC_IGNORE):\n                arg = code[i]\n                i += 1\n                print_(op, '%#02x (%r)' % (arg, chr(arg)))\n            elif op is AT:\n                arg = code[i]\n                i += 1\n                arg = str(ATCODES[arg])\n                assert arg[:3] == 'AT_'\n                print_(op, arg[3:])\n            elif op is CATEGORY:\n                arg = code[i]\n                i += 1\n                arg = str(CHCODES[arg])\n                assert arg[:9] == 'CATEGORY_'\n                print_(op, arg[9:])\n            elif op in (IN, IN_IGNORE, IN_UNI_IGNORE, IN_LOC_IGNORE):\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                dis_(i+1, i+skip)\n                i += skip\n            elif op in (RANGE, RANGE_UNI_IGNORE):\n                lo, hi = code[i: i+2]\n                i += 2\n                print_(op, '%#02x %#02x (%r-%r)' % (lo, hi, chr(lo), chr(hi)))\n            elif op is CHARSET:\n                print_(op, _hex_code(code[i: i + 256//_CODEBITS]))\n                i += 256//_CODEBITS\n            elif op is BIGCHARSET:\n                arg = code[i]\n                i += 1\n                mapping = list(b''.join(x.to_bytes(_sre.CODESIZE, sys.byteorder)\n                                        for x in code[i: i + 256//_sre.CODESIZE]))\n                print_(op, arg, mapping)\n                i += 256//_sre.CODESIZE\n                level += 1\n                for j in range(arg):\n                    print_2(_hex_code(code[i: i + 256//_CODEBITS]))\n                    i += 256//_CODEBITS\n                level -= 1\n            elif op in (MARK, GROUPREF, GROUPREF_IGNORE, GROUPREF_UNI_IGNORE,\n                        GROUPREF_LOC_IGNORE):\n                arg = code[i]\n                i += 1\n                print_(op, arg)\n            elif op is JUMP:\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                i += 1\n            elif op is BRANCH:\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                while skip:\n                    dis_(i+1, i+skip)\n                    i += skip\n                    start = i\n                    skip = code[i]\n                    if skip:\n                        print_('branch', skip, to=i+skip)\n                    else:\n                        print_(FAILURE)\n                i += 1\n            elif op in (REPEAT, REPEAT_ONE, MIN_REPEAT_ONE):\n                skip, min, max = code[i: i+3]\n                if max == MAXREPEAT:\n                    max = 'MAXREPEAT'\n                print_(op, skip, min, max, to=i+skip)\n                dis_(i+3, i+skip)\n                i += skip\n            elif op is GROUPREF_EXISTS:\n                arg, skip = code[i: i+2]\n                print_(op, arg, skip, to=i+skip)\n                i += 2\n            elif op in (ASSERT, ASSERT_NOT):\n                skip, arg = code[i: i+2]\n                print_(op, skip, arg, to=i+skip)\n                dis_(i+2, i+skip)\n                i += skip\n            elif op is INFO:\n                skip, flags, min, max = code[i: i+4]\n                if max == MAXREPEAT:\n                    max = 'MAXREPEAT'\n                print_(op, skip, bin(flags), min, max, to=i+skip)\n                start = i+4\n                if flags & SRE_INFO_PREFIX:\n                    prefix_len, prefix_skip = code[i+4: i+6]\n                    print_2('  prefix_skip', prefix_skip)\n                    start = i + 6\n                    prefix = code[start: start+prefix_len]\n                    print_2('  prefix',\n                            '[%s]' % ', '.join('%#02x' % x for x in prefix),\n                            '(%r)' % ''.join(map(chr, prefix)))\n                    start += prefix_len\n                    print_2('  overlap', code[start: start+prefix_len])\n                    start += prefix_len\n                if flags & SRE_INFO_CHARSET:\n                    level += 1\n                    print_2('in')\n                    dis_(start, i+skip)\n                    level -= 1\n                i += skip\n            else:\n                raise ValueError(op)\n\n        level -= 1\n\n    dis_(0, len(code))\n\n\ndef compile(p, flags=0):\n    # internal: convert pattern list to internal format\n\n    if isstring(p):\n        pattern = p\n        p = sre_parse.parse(p, flags)\n    else:\n        pattern = None\n\n    code = _code(p, flags)\n\n    if flags & SRE_FLAG_DEBUG:\n        print()\n        dis(code)\n\n    # map in either direction\n    groupindex = p.state.groupdict\n    indexgroup = [None] * p.state.groups\n    for k, i in groupindex.items():\n        indexgroup[i] = k\n\n    return _sre.compile(\n        pattern, flags | p.state.flags, code,\n        p.state.groups-1,\n        groupindex, tuple(indexgroup)\n        )\n", 784], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# convert re-style regular expression to sre pattern\n#\n# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.\n#\n# See the sre.py file for information on usage and redistribution.\n#\n\n\"\"\"Internal support module for sre\"\"\"\n\n# XXX: show string offset and offending character for all errors\n\nfrom sre_constants import *\n\nSPECIAL_CHARS = \".\\\\[{()*+?^$|\"\nREPEAT_CHARS = \"*+?{\"\n\nDIGITS = frozenset(\"0123456789\")\n\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\n\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))\n}\n\nCATEGORIES = {\n    r\"\\A\": (AT, AT_BEGINNING_STRING), # start of string\n    r\"\\b\": (AT, AT_BOUNDARY),\n    r\"\\B\": (AT, AT_NON_BOUNDARY),\n    r\"\\d\": (IN, [(CATEGORY, CATEGORY_DIGIT)]),\n    r\"\\D\": (IN, [(CATEGORY, CATEGORY_NOT_DIGIT)]),\n    r\"\\s\": (IN, [(CATEGORY, CATEGORY_SPACE)]),\n    r\"\\S\": (IN, [(CATEGORY, CATEGORY_NOT_SPACE)]),\n    r\"\\w\": (IN, [(CATEGORY, CATEGORY_WORD)]),\n    r\"\\W\": (IN, [(CATEGORY, CATEGORY_NOT_WORD)]),\n    r\"\\Z\": (AT, AT_END_STRING), # end of string\n}\n\nFLAGS = {\n    # standard flags\n    \"i\": SRE_FLAG_IGNORECASE,\n    \"L\": SRE_FLAG_LOCALE,\n    \"m\": SRE_FLAG_MULTILINE,\n    \"s\": SRE_FLAG_DOTALL,\n    \"x\": SRE_FLAG_VERBOSE,\n    # extensions\n    \"a\": SRE_FLAG_ASCII,\n    \"t\": SRE_FLAG_TEMPLATE,\n    \"u\": SRE_FLAG_UNICODE,\n}\n\nTYPE_FLAGS = SRE_FLAG_ASCII | SRE_FLAG_LOCALE | SRE_FLAG_UNICODE\nGLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\n\nclass Verbose(Exception):\n    pass\n\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n    @property\n    def groups(self):\n        return len(self.groupwidths)\n    def opengroup(self, name=None):\n        gid = self.groups\n        self.groupwidths.append(None)\n        if self.groups > MAXGROUPS:\n            raise error(\"too many groups\")\n        if name is not None:\n            ogid = self.groupdict.get(name, None)\n            if ogid is not None:\n                raise error(\"redefinition of group name %r as group %d; \"\n                            \"was group %d\" % (name, gid,  ogid))\n            self.groupdict[name] = gid\n        return gid\n    def closegroup(self, gid, p):\n        self.groupwidths[gid] = p.getwidth()\n    def checkgroup(self, gid):\n        return gid < self.groups and self.groupwidths[gid] is not None\n\n    def checklookbehindgroup(self, gid, source):\n        if self.lookbehindgroups is not None:\n            if not self.checkgroup(gid):\n                raise source.error('cannot refer to an open group')\n            if gid >= self.lookbehindgroups:\n                raise source.error('cannot refer to group defined in the same '\n                                   'lookbehind subpattern')\n\nclass SubPattern:\n    # a subpattern, in intermediate form\n    def __init__(self, state, data=None):\n        self.state = state\n        if data is None:\n            data = []\n        self.data = data\n        self.width = None\n\n    def dump(self, level=0):\n        nl = True\n        seqtypes = (tuple, list)\n        for op, av in self.data:\n            print(level*\"  \" + str(op), end='')\n            if op is IN:\n                # member sublanguage\n                print()\n                for op, a in av:\n                    print((level+1)*\"  \" + str(op), a)\n            elif op is BRANCH:\n                print()\n                for i, a in enumerate(av[1]):\n                    if i:\n                        print(level*\"  \" + \"OR\")\n                    a.dump(level+1)\n            elif op is GROUPREF_EXISTS:\n                condgroup, item_yes, item_no = av\n                print('', condgroup)\n                item_yes.dump(level+1)\n                if item_no:\n                    print(level*\"  \" + \"ELSE\")\n                    item_no.dump(level+1)\n            elif isinstance(av, seqtypes):\n                nl = False\n                for a in av:\n                    if isinstance(a, SubPattern):\n                        if not nl:\n                            print()\n                        a.dump(level+1)\n                        nl = True\n                    else:\n                        if not nl:\n                            print(' ', end='')\n                        print(a, end='')\n                        nl = False\n                if not nl:\n                    print()\n            else:\n                print('', av)\n    def __repr__(self):\n        return repr(self.data)\n    def __len__(self):\n        return len(self.data)\n    def __delitem__(self, index):\n        del self.data[index]\n    def __getitem__(self, index):\n        if isinstance(index, slice):\n            return SubPattern(self.state, self.data[index])\n        return self.data[index]\n    def __setitem__(self, index, code):\n        self.data[index] = code\n    def insert(self, index, code):\n        self.data.insert(index, code)\n    def append(self, code):\n        self.data.append(code)\n    def getwidth(self):\n        # determine the width (min, max) for this subpattern\n        if self.width is not None:\n            return self.width\n        lo = hi = 0\n        for op, av in self.data:\n            if op is BRANCH:\n                i = MAXREPEAT - 1\n                j = 0\n                for av in av[1]:\n                    l, h = av.getwidth()\n                    i = min(i, l)\n                    j = max(j, h)\n                lo = lo + i\n                hi = hi + j\n            elif op is CALL:\n                i, j = av.getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op is SUBPATTERN:\n                i, j = av[-1].getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op in _REPEATCODES:\n                i, j = av[2].getwidth()\n                lo = lo + i * av[0]\n                hi = hi + j * av[1]\n            elif op in _UNITCODES:\n                lo = lo + 1\n                hi = hi + 1\n            elif op is GROUPREF:\n                i, j = self.state.groupwidths[av]\n                lo = lo + i\n                hi = hi + j\n            elif op is GROUPREF_EXISTS:\n                i, j = av[1].getwidth()\n                if av[2] is not None:\n                    l, h = av[2].getwidth()\n                    i = min(i, l)\n                    j = max(j, h)\n                else:\n                    i = 0\n                lo = lo + i\n                hi = hi + j\n            elif op is SUCCESS:\n                break\n        self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\n        return self.width\n\nclass Tokenizer:\n    def __init__(self, string):\n        self.istext = isinstance(string, str)\n        self.string = string\n        if not self.istext:\n            string = str(string, 'latin1')\n        self.decoded_string = string\n        self.index = 0\n        self.next = None\n        self.__next()\n    def __next(self):\n        index = self.index\n        try:\n            char = self.decoded_string[index]\n        except IndexError:\n            self.next = None\n            return\n        if char == \"\\\\\":\n            index += 1\n            try:\n                char += self.decoded_string[index]\n            except IndexError:\n                raise error(\"bad escape (end of pattern)\",\n                            self.string, len(self.string) - 1) from None\n        self.index = index + 1\n        self.next = char\n    def match(self, char):\n        if char == self.next:\n            self.__next()\n            return True\n        return False\n    def get(self):\n        this = self.next\n        self.__next()\n        return this\n    def getwhile(self, n, charset):\n        result = ''\n        for _ in range(n):\n            c = self.next\n            if c not in charset:\n                break\n            result += c\n            self.__next()\n        return result\n    def getuntil(self, terminator, name):\n        result = ''\n        while True:\n            c = self.next\n            self.__next()\n            if c is None:\n                if not result:\n                    raise self.error(\"missing \" + name)\n                raise self.error(\"missing %s, unterminated name\" % terminator,\n                                 len(result))\n            if c == terminator:\n                if not result:\n                    raise self.error(\"missing \" + name, 1)\n                break\n            result += c\n        return result\n    @property\n    def pos(self):\n        return self.index - len(self.next or '')\n    def tell(self):\n        return self.index - len(self.next or '')\n    def seek(self, index):\n        self.index = index\n        self.__next()\n\n    def error(self, msg, offset=0):\n        return error(msg, self.string, self.tell() - offset)\n\ndef _class_escape(source, escape):\n    # handle escape code inside character class\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    code = CATEGORIES.get(escape)\n    if code and code[0] is IN:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            # hexadecimal escape (exactly two digits)\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"u\" and source.istext:\n            # unicode escape (exactly four digits)\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            # unicode escape (exactly eight digits)\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c == \"N\" and source.istext:\n            import unicodedata\n            # named unicode escape e.g. \\N{EM DASH}\n            if not source.match('{'):\n                raise source.error(\"missing {\")\n            charname = source.getuntil('}', 'character name')\n            try:\n                c = ord(unicodedata.lookup(charname))\n            except KeyError:\n                raise source.error(\"undefined character name %r\" % charname,\n                                   len(charname) + len(r'\\N{}'))\n            return LITERAL, c\n        elif c in OCTDIGITS:\n            # octal escape (up to three digits)\n            escape += source.getwhile(2, OCTDIGITS)\n            c = int(escape[1:], 8)\n            if c > 0o377:\n                raise source.error('octal escape value %s outside of '\n                                   'range 0-0o377' % escape, len(escape))\n            return LITERAL, c\n        elif c in DIGITS:\n            raise ValueError\n        if len(escape) == 2:\n            if c in ASCIILETTERS:\n                raise source.error('bad escape %s' % escape, len(escape))\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise source.error(\"bad escape %s\" % escape, len(escape))\n\ndef _escape(source, escape, state):\n    # handle escape code in expression\n    code = CATEGORIES.get(escape)\n    if code:\n        return code\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            # hexadecimal escape\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"u\" and source.istext:\n            # unicode escape (exactly four digits)\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            # unicode escape (exactly eight digits)\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c == \"N\" and source.istext:\n            import unicodedata\n            # named unicode escape e.g. \\N{EM DASH}\n            if not source.match('{'):\n                raise source.error(\"missing {\")\n            charname = source.getuntil('}', 'character name')\n            try:\n                c = ord(unicodedata.lookup(charname))\n            except KeyError:\n                raise source.error(\"undefined character name %r\" % charname,\n                                   len(charname) + len(r'\\N{}'))\n            return LITERAL, c\n        elif c == \"0\":\n            # octal escape\n            escape += source.getwhile(2, OCTDIGITS)\n            return LITERAL, int(escape[1:], 8)\n        elif c in DIGITS:\n            # octal escape *or* decimal group reference (sigh)\n            if source.next in DIGITS:\n                escape += source.get()\n                if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and\n                    source.next in OCTDIGITS):\n                    # got three octal digits; this is an octal escape\n                    escape += source.get()\n                    c = int(escape[1:], 8)\n                    if c > 0o377:\n                        raise source.error('octal escape value %s outside of '\n                                           'range 0-0o377' % escape,\n                                           len(escape))\n                    return LITERAL, c\n            # not an octal escape, so this is a group reference\n            group = int(escape[1:])\n            if group < state.groups:\n                if not state.checkgroup(group):\n                    raise source.error(\"cannot refer to an open group\",\n                                       len(escape))\n                state.checklookbehindgroup(group, source)\n                return GROUPREF, group\n            raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)\n        if len(escape) == 2:\n            if c in ASCIILETTERS:\n                raise source.error(\"bad escape %s\" % escape, len(escape))\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise source.error(\"bad escape %s\" % escape, len(escape))\n\ndef _uniq(items):\n    return list(dict.fromkeys(items))\n\ndef _parse_sub(source, state, verbose, nested):\n    # parse an alternation: a|b|c\n\n    items = []\n    itemsappend = items.append\n    sourcematch = source.match\n    start = source.tell()\n    while True:\n        itemsappend(_parse(source, state, verbose, nested + 1,\n                           not nested and not items))\n        if not sourcematch(\"|\"):\n            break\n\n    if len(items) == 1:\n        return items[0]\n\n    subpattern = SubPattern(state)\n\n    # check if all items share a common prefix\n    while True:\n        prefix = None\n        for item in items:\n            if not item:\n                break\n            if prefix is None:\n                prefix = item[0]\n            elif item[0] != prefix:\n                break\n        else:\n            # all subitems start with a common \"prefix\".\n            # move it out of the branch\n            for item in items:\n                del item[0]\n            subpattern.append(prefix)\n            continue # check next one\n        break\n\n    # check if the branch can be replaced by a character set\n    set = []\n    for item in items:\n        if len(item) != 1:\n            break\n        op, av = item[0]\n        if op is LITERAL:\n            set.append((op, av))\n        elif op is IN and av[0][0] is not NEGATE:\n            set.extend(av)\n        else:\n            break\n    else:\n        # we can store this as a character set instead of a\n        # branch (the compiler may optimize this even more)\n        subpattern.append((IN, _uniq(set)))\n        return subpattern\n\n    subpattern.append((BRANCH, (None, items)))\n    return subpattern\n\ndef _parse(source, state, verbose, nested, first=False):\n    # parse a simple pattern\n    subpattern = SubPattern(state)\n\n    # precompute constants into local variables\n    subpatternappend = subpattern.append\n    sourceget = source.get\n    sourcematch = source.match\n    _len = len\n    _ord = ord\n\n    while True:\n\n        this = source.next\n        if this is None:\n            break # end of pattern\n        if this in \"|)\":\n            break # end of subpattern\n        sourceget()\n\n        if verbose:\n            # skip whitespace and comments\n            if this in WHITESPACE:\n                continue\n            if this == \"#\":\n                while True:\n                    this = sourceget()\n                    if this is None or this == \"\\n\":\n                        break\n                continue\n\n        if this[0] == \"\\\\\":\n            code = _escape(source, this, state)\n            subpatternappend(code)\n\n        elif this not in SPECIAL_CHARS:\n            subpatternappend((LITERAL, _ord(this)))\n\n        elif this == \"[\":\n            here = source.tell() - 1\n            # character set\n            set = []\n            setappend = set.append\n##          if sourcematch(\":\"):\n##              pass # handle character classes\n            if source.next == '[':\n                import warnings\n                warnings.warn(\n                    'Possible nested set at position %d' % source.tell(),\n                    FutureWarning, stacklevel=nested + 6\n                )\n            negate = sourcematch(\"^\")\n            # check remaining characters\n            while True:\n                this = sourceget()\n                if this is None:\n                    raise source.error(\"unterminated character set\",\n                                       source.tell() - here)\n                if this == \"]\" and set:\n                    break\n                elif this[0] == \"\\\\\":\n                    code1 = _class_escape(source, this)\n                else:\n                    if set and this in '-&~|' and source.next == this:\n                        import warnings\n                        warnings.warn(\n                            'Possible set %s at position %d' % (\n                                'difference' if this == '-' else\n                                'intersection' if this == '&' else\n                                'symmetric difference' if this == '~' else\n                                'union',\n                                source.tell() - 1),\n                            FutureWarning, stacklevel=nested + 6\n                        )\n                    code1 = LITERAL, _ord(this)\n                if sourcematch(\"-\"):\n                    # potential range\n                    that = sourceget()\n                    if that is None:\n                        raise source.error(\"unterminated character set\",\n                                           source.tell() - here)\n                    if that == \"]\":\n                        if code1[0] is IN:\n                            code1 = code1[1][0]\n                        setappend(code1)\n                        setappend((LITERAL, _ord(\"-\")))\n                        break\n                    if that[0] == \"\\\\\":\n                        code2 = _class_escape(source, that)\n                    else:\n                        if that == '-':\n                            import warnings\n                            warnings.warn(\n                                'Possible set difference at position %d' % (\n                                    source.tell() - 2),\n                                FutureWarning, stacklevel=nested + 6\n                            )\n                        code2 = LITERAL, _ord(that)\n                    if code1[0] != LITERAL or code2[0] != LITERAL:\n                        msg = \"bad character range %s-%s\" % (this, that)\n                        raise source.error(msg, len(this) + 1 + len(that))\n                    lo = code1[1]\n                    hi = code2[1]\n                    if hi < lo:\n                        msg = \"bad character range %s-%s\" % (this, that)\n                        raise source.error(msg, len(this) + 1 + len(that))\n                    setappend((RANGE, (lo, hi)))\n                else:\n                    if code1[0] is IN:\n                        code1 = code1[1][0]\n                    setappend(code1)\n\n            set = _uniq(set)\n            # XXX: <fl> should move set optimization to compiler!\n            if _len(set) == 1 and set[0][0] is LITERAL:\n                # optimization\n                if negate:\n                    subpatternappend((NOT_LITERAL, set[0][1]))\n                else:\n                    subpatternappend(set[0])\n            else:\n                if negate:\n                    set.insert(0, (NEGATE, None))\n                # charmap optimization can't be added here because\n                # global flags still are not known\n                subpatternappend((IN, set))\n\n        elif this in REPEAT_CHARS:\n            # repeat previous item\n            here = source.tell()\n            if this == \"?\":\n                min, max = 0, 1\n            elif this == \"*\":\n                min, max = 0, MAXREPEAT\n\n            elif this == \"+\":\n                min, max = 1, MAXREPEAT\n            elif this == \"{\":\n                if source.next == \"}\":\n                    subpatternappend((LITERAL, _ord(this)))\n                    continue\n\n                min, max = 0, MAXREPEAT\n                lo = hi = \"\"\n                while source.next in DIGITS:\n                    lo += sourceget()\n                if sourcematch(\",\"):\n                    while source.next in DIGITS:\n                        hi += sourceget()\n                else:\n                    hi = lo\n                if not sourcematch(\"}\"):\n                    subpatternappend((LITERAL, _ord(this)))\n                    source.seek(here)\n                    continue\n\n                if lo:\n                    min = int(lo)\n                    if min >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                if hi:\n                    max = int(hi)\n                    if max >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                    if max < min:\n                        raise source.error(\"min repeat greater than max repeat\",\n                                           source.tell() - here)\n            else:\n                raise AssertionError(\"unsupported quantifier %r\" % (char,))\n            # figure out which item to repeat\n            if subpattern:\n                item = subpattern[-1:]\n            else:\n                item = None\n            if not item or item[0][0] is AT:\n                raise source.error(\"nothing to repeat\",\n                                   source.tell() - here + len(this))\n            if item[0][0] in _REPEATCODES:\n                raise source.error(\"multiple repeat\",\n                                   source.tell() - here + len(this))\n            if item[0][0] is SUBPATTERN:\n                group, add_flags, del_flags, p = item[0][1]\n                if group is None and not add_flags and not del_flags:\n                    item = p\n            if sourcematch(\"?\"):\n                subpattern[-1] = (MIN_REPEAT, (min, max, item))\n            else:\n                subpattern[-1] = (MAX_REPEAT, (min, max, item))\n\n        elif this == \".\":\n            subpatternappend((ANY, None))\n\n        elif this == \"(\":\n            start = source.tell() - 1\n            group = True\n            name = None\n            add_flags = 0\n            del_flags = 0\n            if sourcematch(\"?\"):\n                # options\n                char = sourceget()\n                if char is None:\n                    raise source.error(\"unexpected end of pattern\")\n                if char == \"P\":\n                    # python extensions\n                    if sourcematch(\"<\"):\n                        # named group: skip forward to end of name\n                        name = source.getuntil(\">\", \"group name\")\n                        if not name.isidentifier():\n                            msg = \"bad character in group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                    elif sourcematch(\"=\"):\n                        # named backreference\n                        name = source.getuntil(\")\", \"group name\")\n                        if not name.isidentifier():\n                            msg = \"bad character in group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                        gid = state.groupdict.get(name)\n                        if gid is None:\n                            msg = \"unknown group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                        if not state.checkgroup(gid):\n                            raise source.error(\"cannot refer to an open group\",\n                                               len(name) + 1)\n                        state.checklookbehindgroup(gid, source)\n                        subpatternappend((GROUPREF, gid))\n                        continue\n\n                    else:\n                        char = sourceget()\n                        if char is None:\n                            raise source.error(\"unexpected end of pattern\")\n                        raise source.error(\"unknown extension ?P\" + char,\n                                           len(char) + 2)\n                elif char == \":\":\n                    # non-capturing group\n                    group = None\n                elif char == \"#\":\n                    # comment\n                    while True:\n                        if source.next is None:\n                            raise source.error(\"missing ), unterminated comment\",\n                                               source.tell() - start)\n                        if sourceget() == \")\":\n                            break\n                    continue\n\n                elif char in \"=!<\":\n                    # lookahead assertions\n                    dir = 1\n                    if char == \"<\":\n                        char = sourceget()\n                        if char is None:\n                            raise source.error(\"unexpected end of pattern\")\n                        if char not in \"=!\":\n                            raise source.error(\"unknown extension ?<\" + char,\n                                               len(char) + 2)\n                        dir = -1 # lookbehind\n                        lookbehindgroups = state.lookbehindgroups\n                        if lookbehindgroups is None:\n                            state.lookbehindgroups = state.groups\n                    p = _parse_sub(source, state, verbose, nested + 1)\n                    if dir < 0:\n                        if lookbehindgroups is None:\n                            state.lookbehindgroups = None\n                    if not sourcematch(\")\"):\n                        raise source.error(\"missing ), unterminated subpattern\",\n                                           source.tell() - start)\n                    if char == \"=\":\n                        subpatternappend((ASSERT, (dir, p)))\n                    else:\n                        subpatternappend((ASSERT_NOT, (dir, p)))\n                    continue\n\n                elif char == \"(\":\n                    # conditional backreference group\n                    condname = source.getuntil(\")\", \"group name\")\n                    if condname.isidentifier():\n                        condgroup = state.groupdict.get(condname)\n                        if condgroup is None:\n                            msg = \"unknown group name %r\" % condname\n                            raise source.error(msg, len(condname) + 1)\n                    else:\n                        try:\n                            condgroup = int(condname)\n                            if condgroup < 0:\n                                raise ValueError\n                        except ValueError:\n                            msg = \"bad character in group name %r\" % condname\n                            raise source.error(msg, len(condname) + 1) from None\n                        if not condgroup:\n                            raise source.error(\"bad group number\",\n                                               len(condname) + 1)\n                        if condgroup >= MAXGROUPS:\n                            msg = \"invalid group reference %d\" % condgroup\n                            raise source.error(msg, len(condname) + 1)\n                    state.checklookbehindgroup(condgroup, source)\n                    item_yes = _parse(source, state, verbose, nested + 1)\n                    if source.match(\"|\"):\n                        item_no = _parse(source, state, verbose, nested + 1)\n                        if source.next == \"|\":\n                            raise source.error(\"conditional backref with more than two branches\")\n                    else:\n                        item_no = None\n                    if not source.match(\")\"):\n                        raise source.error(\"missing ), unterminated subpattern\",\n                                           source.tell() - start)\n                    subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))\n                    continue\n\n                elif char in FLAGS or char == \"-\":\n                    # flags\n                    flags = _parse_flags(source, state, char)\n                    if flags is None:  # global flags\n                        if not first or subpattern:\n                            import warnings\n                            warnings.warn(\n                                'Flags not at the start of the expression %r%s' % (\n                                    source.string[:20],  # truncate long regexes\n                                    ' (truncated)' if len(source.string) > 20 else '',\n                                ),\n                                DeprecationWarning, stacklevel=nested + 6\n                            )\n                        if (state.flags & SRE_FLAG_VERBOSE) and not verbose:\n                            raise Verbose\n                        continue\n\n                    add_flags, del_flags = flags\n                    group = None\n                else:\n                    raise source.error(\"unknown extension ?\" + char,\n                                       len(char) + 1)\n\n            # parse group contents\n            if group is not None:\n                try:\n                    group = state.opengroup(name)\n                except error as err:\n                    raise source.error(err.msg, len(name) + 1) from None\n            sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\n                           not (del_flags & SRE_FLAG_VERBOSE))\n            p = _parse_sub(source, state, sub_verbose, nested + 1)\n            if not source.match(\")\"):\n                raise source.error(\"missing ), unterminated subpattern\",\n                                   source.tell() - start)\n            if group is not None:\n                state.closegroup(group, p)\n            subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\n\n        elif this == \"^\":\n            subpatternappend((AT, AT_BEGINNING))\n\n        elif this == \"$\":\n            subpatternappend((AT, AT_END))\n\n        else:\n            raise AssertionError(\"unsupported special character %r\" % (char,))\n\n    # unpack non-capturing groups\n    for i in range(len(subpattern))[::-1]:\n        op, av = subpattern[i]\n        if op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            if group is None and not add_flags and not del_flags:\n                subpattern[i: i+1] = p\n\n    return subpattern\n\ndef _parse_flags(source, state, char):\n    sourceget = source.get\n    add_flags = 0\n    del_flags = 0\n    if char != \"-\":\n        while True:\n            flag = FLAGS[char]\n            if source.istext:\n                if char == 'L':\n                    msg = \"bad inline flags: cannot use 'L' flag with a str pattern\"\n                    raise source.error(msg)\n            else:\n                if char == 'u':\n                    msg = \"bad inline flags: cannot use 'u' flag with a bytes pattern\"\n                    raise source.error(msg)\n            add_flags |= flag\n            if (flag & TYPE_FLAGS) and (add_flags & TYPE_FLAGS) != flag:\n                msg = \"bad inline flags: flags 'a', 'u' and 'L' are incompatible\"\n                raise source.error(msg)\n            char = sourceget()\n            if char is None:\n                raise source.error(\"missing -, : or )\")\n            if char in \")-:\":\n                break\n            if char not in FLAGS:\n                msg = \"unknown flag\" if char.isalpha() else \"missing -, : or )\"\n                raise source.error(msg, len(char))\n    if char == \")\":\n        state.flags |= add_flags\n        return None\n    if add_flags & GLOBAL_FLAGS:\n        raise source.error(\"bad inline flags: cannot turn on global flag\", 1)\n    if char == \"-\":\n        char = sourceget()\n        if char is None:\n            raise source.error(\"missing flag\")\n        if char not in FLAGS:\n            msg = \"unknown flag\" if char.isalpha() else \"missing flag\"\n            raise source.error(msg, len(char))\n        while True:\n            flag = FLAGS[char]\n            if flag & TYPE_FLAGS:\n                msg = \"bad inline flags: cannot turn off flags 'a', 'u' and 'L'\"\n                raise source.error(msg)\n            del_flags |= flag\n            char = sourceget()\n            if char is None:\n                raise source.error(\"missing :\")\n            if char == \":\":\n                break\n            if char not in FLAGS:\n                msg = \"unknown flag\" if char.isalpha() else \"missing :\"\n                raise source.error(msg, len(char))\n    assert char == \":\"\n    if del_flags & GLOBAL_FLAGS:\n        raise source.error(\"bad inline flags: cannot turn off global flag\", 1)\n    if add_flags & del_flags:\n        raise source.error(\"bad inline flags: flag turned on and off\", 1)\n    return add_flags, del_flags\n\ndef fix_flags(src, flags):\n    # Check and fix flags according to the type of pattern (str or bytes)\n    if isinstance(src, str):\n        if flags & SRE_FLAG_LOCALE:\n            raise ValueError(\"cannot use LOCALE flag with a str pattern\")\n        if not flags & SRE_FLAG_ASCII:\n            flags |= SRE_FLAG_UNICODE\n        elif flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"ASCII and UNICODE flags are incompatible\")\n    else:\n        if flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"cannot use UNICODE flag with a bytes pattern\")\n        if flags & SRE_FLAG_LOCALE and flags & SRE_FLAG_ASCII:\n            raise ValueError(\"ASCII and LOCALE flags are incompatible\")\n    return flags\n\ndef parse(str, flags=0, state=None):\n    # parse 're' pattern into list of (opcode, argument) tuples\n\n    source = Tokenizer(str)\n\n    if state is None:\n        state = State()\n    state.flags = flags\n    state.str = str\n\n    try:\n        p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n    except Verbose:\n        # the VERBOSE flag was switched on inside the pattern.  to be\n        # on the safe side, we'll parse the whole thing again...\n        state = State()\n        state.flags = flags | SRE_FLAG_VERBOSE\n        state.str = str\n        source.seek(0)\n        p = _parse_sub(source, state, True, 0)\n\n    p.state.flags = fix_flags(str, p.state.flags)\n\n    if source.next is not None:\n        assert source.next == \")\"\n        raise source.error(\"unbalanced parenthesis\")\n\n    if flags & SRE_FLAG_DEBUG:\n        p.dump()\n\n    return p\n\ndef parse_template(source, state):\n    # parse 're' replacement string into list of literals and\n    # group references\n    s = Tokenizer(source)\n    sget = s.get\n    groups = []\n    literals = []\n    literal = []\n    lappend = literal.append\n    def addgroup(index, pos):\n        if index > state.groups:\n            raise s.error(\"invalid group reference %d\" % index, pos)\n        if literal:\n            literals.append(''.join(literal))\n            del literal[:]\n        groups.append((len(literals), index))\n        literals.append(None)\n    groupindex = state.groupindex\n    while True:\n        this = sget()\n        if this is None:\n            break # end of replacement string\n        if this[0] == \"\\\\\":\n            # group\n            c = this[1]\n            if c == \"g\":\n                name = \"\"\n                if not s.match(\"<\"):\n                    raise s.error(\"missing <\")\n                name = s.getuntil(\">\", \"group name\")\n                if name.isidentifier():\n                    try:\n                        index = groupindex[name]\n                    except KeyError:\n                        raise IndexError(\"unknown group name %r\" % name)\n                else:\n                    try:\n                        index = int(name)\n                        if index < 0:\n                            raise ValueError\n                    except ValueError:\n                        raise s.error(\"bad character in group name %r\" % name,\n                                      len(name) + 1) from None\n                    if index >= MAXGROUPS:\n                        raise s.error(\"invalid group reference %d\" % index,\n                                      len(name) + 1)\n                addgroup(index, len(name) + 1)\n            elif c == \"0\":\n                if s.next in OCTDIGITS:\n                    this += sget()\n                    if s.next in OCTDIGITS:\n                        this += sget()\n                lappend(chr(int(this[1:], 8) & 0xff))\n            elif c in DIGITS:\n                isoctal = False\n                if s.next in DIGITS:\n                    this += sget()\n                    if (c in OCTDIGITS and this[2] in OCTDIGITS and\n                        s.next in OCTDIGITS):\n                        this += sget()\n                        isoctal = True\n                        c = int(this[1:], 8)\n                        if c > 0o377:\n                            raise s.error('octal escape value %s outside of '\n                                          'range 0-0o377' % this, len(this))\n                        lappend(chr(c))\n                if not isoctal:\n                    addgroup(int(this[1:]), len(this) - 1)\n            else:\n                try:\n                    this = chr(ESCAPES[this][1])\n                except KeyError:\n                    if c in ASCIILETTERS:\n                        raise s.error('bad escape %s' % this, len(this))\n                lappend(this)\n        else:\n            lappend(this)\n    if literal:\n        literals.append(''.join(literal))\n    if not isinstance(source, str):\n        # The tokenizer implicitly decodes bytes objects as latin-1, we must\n        # therefore re-encode the final representation.\n        literals = [None if s is None else s.encode('latin-1') for s in literals]\n    return groups, literals\n\ndef expand_template(template, match):\n    g = match.group\n    empty = match.string[:0]\n    groups, literals = template\n    literals = literals[:]\n    try:\n        for index, group in groups:\n            literals[index] = g(group) or empty\n    except IndexError:\n        raise error(\"invalid group reference %d\" % index)\n    return empty.join(literals)\n", 1064], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py": ["import sys\nfrom types import MappingProxyType, DynamicClassAttribute\n\n\n__all__ = [\n        'EnumMeta',\n        'Enum', 'IntEnum', 'Flag', 'IntFlag',\n        'auto', 'unique',\n        ]\n\n\ndef _is_descriptor(obj):\n    \"\"\"\n    Returns True if obj is a descriptor, False otherwise.\n    \"\"\"\n    return (\n            hasattr(obj, '__get__') or\n            hasattr(obj, '__set__') or\n            hasattr(obj, '__delete__')\n            )\n\ndef _is_dunder(name):\n    \"\"\"\n    Returns True if a __dunder__ name, False otherwise.\n    \"\"\"\n    return (\n            len(name) > 4 and\n            name[:2] == name[-2:] == '__' and\n            name[2] != '_' and\n            name[-3] != '_'\n            )\n\ndef _is_sunder(name):\n    \"\"\"\n    Returns True if a _sunder_ name, False otherwise.\n    \"\"\"\n    return (\n            len(name) > 2 and\n            name[0] == name[-1] == '_' and\n            name[1:2] != '_' and\n            name[-2:-1] != '_'\n            )\n\ndef _is_private(cls_name, name):\n    # do not use `re` as `re` imports `enum`\n    pattern = '_%s__' % (cls_name, )\n    if (\n            len(name) >= 5\n            and name.startswith(pattern)\n            and name[len(pattern)] != '_'\n            and (name[-1] != '_' or name[-2] != '_')\n        ):\n        return True\n    else:\n        return False\n\ndef _make_class_unpicklable(cls):\n    \"\"\"\n    Make the given class un-picklable.\n    \"\"\"\n    def _break_on_call_reduce(self, proto):\n        raise TypeError('%r cannot be pickled' % self)\n    cls.__reduce_ex__ = _break_on_call_reduce\n    cls.__module__ = '<unknown>'\n\n_auto_null = object()\nclass auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    value = _auto_null\n\n\nclass _EnumDict(dict):\n    \"\"\"\n    Track enum member order and ensure member names are not reused.\n\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._member_names = []\n        self._last_values = []\n        self._ignore = []\n        self._auto_called = False\n\n    def __setitem__(self, key, value):\n        \"\"\"\n        Changes anything not dundered or not a descriptor.\n\n        If an enum member name is used twice, an error is raised; duplicate\n        values are not checked for.\n\n        Single underscore (sunder) names are reserved.\n        \"\"\"\n        if _is_private(self._cls_name, key):\n            import warnings\n            warnings.warn(\n                    \"private variables, such as %r, will be normal attributes in 3.10\"\n                        % (key, ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                    )\n        if _is_sunder(key):\n            if key not in (\n                    '_order_', '_create_pseudo_member_',\n                    '_generate_next_value_', '_missing_', '_ignore_',\n                    ):\n                raise ValueError('_names_ are reserved for future Enum use')\n            if key == '_generate_next_value_':\n                # check if members already defined as auto()\n                if self._auto_called:\n                    raise TypeError(\"_generate_next_value_ must be defined before members\")\n                setattr(self, '_generate_next_value', value)\n            elif key == '_ignore_':\n                if isinstance(value, str):\n                    value = value.replace(',',' ').split()\n                else:\n                    value = list(value)\n                self._ignore = value\n                already = set(value) & set(self._member_names)\n                if already:\n                    raise ValueError(\n                            '_ignore_ cannot specify already set names: %r'\n                            % (already, )\n                            )\n        elif _is_dunder(key):\n            if key == '__order__':\n                key = '_order_'\n        elif key in self._member_names:\n            # descriptor overwriting an enum?\n            raise TypeError('Attempted to reuse key: %r' % key)\n        elif key in self._ignore:\n            pass\n        elif not _is_descriptor(value):\n            if key in self:\n                # enum overwriting a descriptor?\n                raise TypeError('%r already defined as: %r' % (key, self[key]))\n            if isinstance(value, auto):\n                if value.value == _auto_null:\n                    value.value = self._generate_next_value(\n                            key,\n                            1,\n                            len(self._member_names),\n                            self._last_values[:],\n                            )\n                    self._auto_called = True\n                value = value.value\n            self._member_names.append(key)\n            self._last_values.append(value)\n        super().__setitem__(key, value)\n\n\n# Dummy value for Enum as EnumMeta explicitly checks for it, but of course\n# until EnumMeta finishes running the first time the Enum class doesn't exist.\n# This is also why there are checks in EnumMeta like `if Enum is not None`\nEnum = None\n\nclass EnumMeta(type):\n    \"\"\"\n    Metaclass for Enum\n    \"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases, **kwds):\n        # check that previous enum members do not exist\n        metacls._check_for_existing_members(cls, bases)\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        enum_dict._cls_name = cls\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(cls, bases)\n        if first_enum is not None:\n            enum_dict['_generate_next_value_'] = getattr(\n                    first_enum, '_generate_next_value_', None,\n                    )\n        return enum_dict\n\n    def __new__(metacls, cls, bases, classdict, **kwds):\n        # an Enum class is final once enumeration items have been defined; it\n        # cannot be mixed with other types (int, float, etc.) if it has an\n        # inherited __new__ unless a new __new__ is defined (or the resulting\n        # class will fail).\n        #\n        # remove any keys listed in _ignore_\n        classdict.setdefault('_ignore_', []).append('_ignore_')\n        ignore = classdict['_ignore_']\n        for key in ignore:\n            classdict.pop(key, None)\n        member_type, first_enum = metacls._get_mixins_(cls, bases)\n        __new__, save_new, use_args = metacls._find_new_(\n                classdict, member_type, first_enum,\n                )\n\n        # save enum items into separate mapping so they don't get baked into\n        # the new class\n        enum_members = {k: classdict[k] for k in classdict._member_names}\n        for name in classdict._member_names:\n            del classdict[name]\n\n        # adjust the sunders\n        _order_ = classdict.pop('_order_', None)\n\n        # check for illegal enum names (any others?)\n        invalid_names = set(enum_members) & {'mro', ''}\n        if invalid_names:\n            raise ValueError('Invalid enum member name: {0}'.format(\n                ','.join(invalid_names)))\n\n        # create a default docstring if one has not been provided\n        if '__doc__' not in classdict:\n            classdict['__doc__'] = 'An enumeration.'\n\n        enum_class = super().__new__(metacls, cls, bases, classdict, **kwds)\n        enum_class._member_names_ = []               # names in definition order\n        enum_class._member_map_ = {}                 # name->value map\n        enum_class._member_type_ = member_type\n\n        # save DynamicClassAttribute attributes from super classes so we know\n        # if we can take the shortcut of storing members in the class dict\n        dynamic_attributes = {\n                k for c in enum_class.mro()\n                for k, v in c.__dict__.items()\n                if isinstance(v, DynamicClassAttribute)\n                }\n\n        # Reverse value->name map for hashable values.\n        enum_class._value2member_map_ = {}\n\n        # If a custom type is mixed into the Enum, and it does not know how\n        # to pickle itself, pickle.dumps will succeed but pickle.loads will\n        # fail.  Rather than have the error show up later and possibly far\n        # from the source, sabotage the pickle protocol for this class so\n        # that pickle.dumps also fails.\n        #\n        # However, if the new class implements its own __reduce_ex__, do not\n        # sabotage -- it's on them to make sure it works correctly.  We use\n        # __reduce_ex__ instead of any of the others as it is preferred by\n        # pickle over __reduce__, and it handles all pickle protocols.\n        if '__reduce_ex__' not in classdict:\n            if member_type is not object:\n                methods = ('__getnewargs_ex__', '__getnewargs__',\n                        '__reduce_ex__', '__reduce__')\n                if not any(m in member_type.__dict__ for m in methods):\n                    if '__new__' in classdict:\n                        # too late, sabotage\n                        _make_class_unpicklable(enum_class)\n                    else:\n                        # final attempt to verify that pickling would work:\n                        # travel mro until __new__ is found, checking for\n                        # __reduce__ and friends along the way -- if any of them\n                        # are found before/when __new__ is found, pickling should\n                        # work\n                        sabotage = None\n                        for chain in bases:\n                            for base in chain.__mro__:\n                                if base is object:\n                                    continue\n                                elif any(m in base.__dict__ for m in methods):\n                                    # found one, we're good\n                                    sabotage = False\n                                    break\n                                elif '__new__' in base.__dict__:\n                                    # not good\n                                    sabotage = True\n                                    break\n                            if sabotage is not None:\n                                break\n                        if sabotage:\n                            _make_class_unpicklable(enum_class)\n        # instantiate them, checking for duplicates as we go\n        # we instantiate first instead of checking for duplicates first in case\n        # a custom __new__ is doing something funky with the values -- such as\n        # auto-numbering ;)\n        for member_name in classdict._member_names:\n            value = enum_members[member_name]\n            if not isinstance(value, tuple):\n                args = (value, )\n            else:\n                args = value\n            if member_type is tuple:   # special case for tuple enums\n                args = (args, )     # wrap it one more time\n            if not use_args:\n                enum_member = __new__(enum_class)\n                if not hasattr(enum_member, '_value_'):\n                    enum_member._value_ = value\n            else:\n                enum_member = __new__(enum_class, *args)\n                if not hasattr(enum_member, '_value_'):\n                    if member_type is object:\n                        enum_member._value_ = value\n                    else:\n                        enum_member._value_ = member_type(*args)\n            value = enum_member._value_\n            enum_member._name_ = member_name\n            enum_member.__objclass__ = enum_class\n            enum_member.__init__(*args)\n            # If another member with the same value was already defined, the\n            # new member becomes an alias to the existing one.\n            for name, canonical_member in enum_class._member_map_.items():\n                if canonical_member._value_ == enum_member._value_:\n                    enum_member = canonical_member\n                    break\n            else:\n                # Aliases don't appear in member names (only in __members__).\n                enum_class._member_names_.append(member_name)\n            # performance boost for any member that would not shadow\n            # a DynamicClassAttribute\n            if member_name not in dynamic_attributes:\n                setattr(enum_class, member_name, enum_member)\n            # now add to _member_map_\n            enum_class._member_map_[member_name] = enum_member\n            try:\n                # This may fail if value is not hashable. We can't add the value\n                # to the map, and by-value lookups for this value will be\n                # linear.\n                enum_class._value2member_map_[value] = enum_member\n            except TypeError:\n                pass\n\n        # double check that repr and friends are not the mixin's or various\n        # things break (such as pickle)\n        # however, if the method is defined in the Enum itself, don't replace\n        # it\n        for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):\n            if name in classdict:\n                continue\n            class_method = getattr(enum_class, name)\n            obj_method = getattr(member_type, name, None)\n            enum_method = getattr(first_enum, name, None)\n            if obj_method is not None and obj_method is class_method:\n                setattr(enum_class, name, enum_method)\n\n        # replace any other __new__ with our own (as long as Enum is not None,\n        # anyway) -- again, this is to support pickle\n        if Enum is not None:\n            # if the user defined their own __new__, save it before it gets\n            # clobbered in case they subclass later\n            if save_new:\n                enum_class.__new_member__ = __new__\n            enum_class.__new__ = Enum.__new__\n\n        # py3 support for definition order (helps keep py2/py3 code in sync)\n        if _order_ is not None:\n            if isinstance(_order_, str):\n                _order_ = _order_.replace(',', ' ').split()\n            if _order_ != enum_class._member_names_:\n                raise TypeError('member order does not match _order_')\n\n        return enum_class\n\n    def __bool__(self):\n        \"\"\"\n        classes/types should always be True.\n        \"\"\"\n        return True\n\n    def __call__(cls, value, names=None, *, module=None, qualname=None, type=None, start=1):\n        \"\"\"\n        Either returns an existing member, or creates a new enum class.\n\n        This method is used both when an enum class is given a value to match\n        to an enumeration member (i.e. Color(3)) and for the functional API\n        (i.e. Color = Enum('Color', names='RED GREEN BLUE')).\n\n        When used for the functional API:\n\n        `value` will be the name of the new class.\n\n        `names` should be either a string of white-space/comma delimited names\n        (values will start at `start`), or an iterator/mapping of name, value pairs.\n\n        `module` should be set to the module this class is being created in;\n        if it is not set, an attempt to find that module will be made, but if\n        it fails the class will not be picklable.\n\n        `qualname` should be set to the actual location this class can be found\n        at in its module; by default it is set to the global scope.  If this is\n        not correct, unpickling will fail in some circumstances.\n\n        `type`, if set, will be mixed in as the first base class.\n        \"\"\"\n        if names is None:  # simple value lookup\n            return cls.__new__(cls, value)\n        # otherwise, functional API: we're creating a new Enum type\n        return cls._create_(\n                value,\n                names,\n                module=module,\n                qualname=qualname,\n                type=type,\n                start=start,\n                )\n\n    def __contains__(cls, member):\n        if not isinstance(member, Enum):\n            raise TypeError(\n                \"unsupported operand type(s) for 'in': '%s' and '%s'\" % (\n                    type(member).__qualname__, cls.__class__.__qualname__))\n        return isinstance(member, cls) and member._name_ in cls._member_map_\n\n    def __delattr__(cls, attr):\n        # nicer error message when someone tries to delete an attribute\n        # (see issue19025).\n        if attr in cls._member_map_:\n            raise AttributeError(\"%s: cannot delete Enum member.\" % cls.__name__)\n        super().__delattr__(attr)\n\n    def __dir__(self):\n        return (\n                ['__class__', '__doc__', '__members__', '__module__']\n                + self._member_names_\n                )\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n\n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def __getitem__(cls, name):\n        return cls._member_map_[name]\n\n    def __iter__(cls):\n        \"\"\"\n        Returns members in definition order.\n        \"\"\"\n        return (cls._member_map_[name] for name in cls._member_names_)\n\n    def __len__(cls):\n        return len(cls._member_names_)\n\n    @property\n    def __members__(cls):\n        \"\"\"\n        Returns a mapping of member name->value.\n\n        This mapping lists all enum members, including aliases. Note that this\n        is a read-only view of the internal mapping.\n        \"\"\"\n        return MappingProxyType(cls._member_map_)\n\n    def __repr__(cls):\n        return \"<enum %r>\" % cls.__name__\n\n    def __reversed__(cls):\n        \"\"\"\n        Returns members in reverse definition order.\n        \"\"\"\n        return (cls._member_map_[name] for name in reversed(cls._member_names_))\n\n    def __setattr__(cls, name, value):\n        \"\"\"\n        Block attempts to reassign Enum members.\n\n        A simple assignment to the class namespace only changes one of the\n        several possible ways to get an Enum member from the Enum class,\n        resulting in an inconsistent Enumeration.\n        \"\"\"\n        member_map = cls.__dict__.get('_member_map_', {})\n        if name in member_map:\n            raise AttributeError('Cannot reassign members.')\n        super().__setattr__(name, value)\n\n    def _create_(cls, class_name, names, *, module=None, qualname=None, type=None, start=1):\n        \"\"\"\n        Convenience method to create a new Enum class.\n\n        `names` can be:\n\n        * A string containing member names, separated either with spaces or\n          commas.  Values are incremented by 1 from `start`.\n        * An iterable of member names.  Values are incremented by 1 from `start`.\n        * An iterable of (member name, value) pairs.\n        * A mapping of member name -> value pairs.\n        \"\"\"\n        metacls = cls.__class__\n        bases = (cls, ) if type is None else (type, cls)\n        _, first_enum = cls._get_mixins_(cls, bases)\n        classdict = metacls.__prepare__(class_name, bases)\n\n        # special processing needed for names?\n        if isinstance(names, str):\n            names = names.replace(',', ' ').split()\n        if isinstance(names, (tuple, list)) and names and isinstance(names[0], str):\n            original_names, names = names, []\n            last_values = []\n            for count, name in enumerate(original_names):\n                value = first_enum._generate_next_value_(name, start, count, last_values[:])\n                last_values.append(value)\n                names.append((name, value))\n\n        # Here, names is either an iterable of (name, value) or a mapping.\n        for item in names:\n            if isinstance(item, str):\n                member_name, member_value = item, names[item]\n            else:\n                member_name, member_value = item\n            classdict[member_name] = member_value\n        enum_class = metacls.__new__(metacls, class_name, bases, classdict)\n\n        # TODO: replace the frame hack if a blessed way to know the calling\n        # module is ever developed\n        if module is None:\n            try:\n                module = sys._getframe(2).f_globals['__name__']\n            except (AttributeError, ValueError, KeyError):\n                pass\n        if module is None:\n            _make_class_unpicklable(enum_class)\n        else:\n            enum_class.__module__ = module\n        if qualname is not None:\n            enum_class.__qualname__ = qualname\n\n        return enum_class\n\n    def _convert_(cls, name, module, filter, source=None):\n        \"\"\"\n        Create a new Enum subclass that replaces a collection of global constants\n        \"\"\"\n        # convert all constants from source (or module) that pass filter() to\n        # a new Enum called name, and export the enum and its members back to\n        # module;\n        # also, replace the __reduce_ex__ method so unpickling works in\n        # previous Python versions\n        module_globals = vars(sys.modules[module])\n        if source:\n            source = vars(source)\n        else:\n            source = module_globals\n        # _value2member_map_ is populated in the same order every time\n        # for a consistent reverse mapping of number to name when there\n        # are multiple names for the same number.\n        members = [\n                (name, value)\n                for name, value in source.items()\n                if filter(name)]\n        try:\n            # sort by value\n            members.sort(key=lambda t: (t[1], t[0]))\n        except TypeError:\n            # unless some values aren't comparable, in which case sort by name\n            members.sort(key=lambda t: t[0])\n        cls = cls(name, members, module=module)\n        cls.__reduce_ex__ = _reduce_ex_by_name\n        module_globals.update(cls.__members__)\n        module_globals[name] = cls\n        return cls\n\n    @staticmethod\n    def _check_for_existing_members(class_name, bases):\n        for chain in bases:\n            for base in chain.__mro__:\n                if issubclass(base, Enum) and base._member_names_:\n                    raise TypeError(\n                            \"%s: cannot extend enumeration %r\"\n                            % (class_name, base.__name__)\n                            )\n\n    @staticmethod\n    def _get_mixins_(class_name, bases):\n        \"\"\"\n        Returns the type for creating enum members, and the first inherited\n        enum class.\n\n        bases: the tuple of bases that was given to __new__\n        \"\"\"\n        if not bases:\n            return object, Enum\n\n        def _find_data_type(bases):\n            data_types = set()\n            for chain in bases:\n                candidate = None\n                for base in chain.__mro__:\n                    if base is object:\n                        continue\n                    elif issubclass(base, Enum):\n                        if base._member_type_ is not object:\n                            data_types.add(base._member_type_)\n                            break\n                    elif '__new__' in base.__dict__:\n                        if issubclass(base, Enum):\n                            continue\n                        data_types.add(candidate or base)\n                        break\n                    else:\n                        candidate = candidate or base\n            if len(data_types) > 1:\n                raise TypeError('%r: too many data types: %r' % (class_name, data_types))\n            elif data_types:\n                return data_types.pop()\n            else:\n                return None\n\n        # ensure final parent class is an Enum derivative, find any concrete\n        # data type, and check that Enum has no members\n        first_enum = bases[-1]\n        if not issubclass(first_enum, Enum):\n            raise TypeError(\"new enumerations should be created as \"\n                    \"`EnumName([mixin_type, ...] [data_type,] enum_type)`\")\n        member_type = _find_data_type(bases) or object\n        if first_enum._member_names_:\n            raise TypeError(\"Cannot extend enumerations\")\n        return member_type, first_enum\n\n    @staticmethod\n    def _find_new_(classdict, member_type, first_enum):\n        \"\"\"\n        Returns the __new__ to be used for creating the enum members.\n\n        classdict: the class dictionary given to __new__\n        member_type: the data type whose __new__ will be used by default\n        first_enum: enumeration to check for an overriding __new__\n        \"\"\"\n        # now find the correct __new__, checking to see of one was defined\n        # by the user; also check earlier enum classes in case a __new__ was\n        # saved as __new_member__\n        __new__ = classdict.get('__new__', None)\n\n        # should __new__ be saved as __new_member__ later?\n        save_new = __new__ is not None\n\n        if __new__ is None:\n            # check all possibles for __new_member__ before falling back to\n            # __new__\n            for method in ('__new_member__', '__new__'):\n                for possible in (member_type, first_enum):\n                    target = getattr(possible, method, None)\n                    if target not in {\n                            None,\n                            None.__new__,\n                            object.__new__,\n                            Enum.__new__,\n                            }:\n                        __new__ = target\n                        break\n                if __new__ is not None:\n                    break\n            else:\n                __new__ = object.__new__\n\n        # if a non-object.__new__ is used then whatever value/tuple was\n        # assigned to the enum member name will be passed to __new__ and to the\n        # new enum member's __init__\n        if __new__ is object.__new__:\n            use_args = False\n        else:\n            use_args = True\n        return __new__, save_new, use_args\n\n\nclass Enum(metaclass=EnumMeta):\n    \"\"\"\n    Generic enumeration.\n\n    Derive from this class to define new enumerations.\n    \"\"\"\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)\n            return value\n        # by-value search for a matching enum member\n        # see if it's in the reverse mapping (for hashable values)\n        try:\n            return cls._value2member_map_[value]\n        except KeyError:\n            # Not found, no need to do long O(n) search\n            pass\n        except TypeError:\n            # not there, now do long search -- O(n) behavior\n            for member in cls._member_map_.values():\n                if member._value_ == value:\n                    return member\n        # still not found -- try _missing_ hook\n        try:\n            exc = None\n            result = cls._missing_(value)\n        except Exception as e:\n            exc = e\n            result = None\n        try:\n            if isinstance(result, cls):\n                return result\n            else:\n                ve_exc = ValueError(\"%r is not a valid %s\" % (value, cls.__qualname__))\n                if result is None and exc is None:\n                    raise ve_exc\n                elif exc is None:\n                    exc = TypeError(\n                            'error in %s._missing_: returned %r instead of None or a valid member'\n                            % (cls.__name__, result)\n                            )\n                exc.__context__ = ve_exc\n                raise exc\n        finally:\n            # ensure all variables that could hold an exception are destroyed\n            exc = None\n            ve_exc = None\n\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n\n        name: the name of the member\n        start: the initial start value or None\n        count: the number of existing members\n        last_value: the last value assigned or None\n        \"\"\"\n        for last_value in reversed(last_values):\n            try:\n                return last_value + 1\n            except TypeError:\n                pass\n        else:\n            return start\n\n    @classmethod\n    def _missing_(cls, value):\n        return None\n\n    def __repr__(self):\n        return \"<%s.%s: %r>\" % (\n                self.__class__.__name__, self._name_, self._value_)\n\n    def __str__(self):\n        return \"%s.%s\" % (self.__class__.__name__, self._name_)\n\n    def __dir__(self):\n        \"\"\"\n        Returns all members and all public methods\n        \"\"\"\n        added_behavior = [\n                m\n                for cls in self.__class__.mro()\n                for m in cls.__dict__\n                if m[0] != '_' and m not in self._member_map_\n                ] + [m for m in self.__dict__ if m[0] != '_']\n        return (['__class__', '__doc__', '__module__'] + added_behavior)\n\n    def __format__(self, format_spec):\n        \"\"\"\n        Returns format using actual value type unless __str__ has been overridden.\n        \"\"\"\n        # mixed-in Enums should use the mixed-in type's __format__, otherwise\n        # we can get strange results with the Enum name showing up instead of\n        # the value\n\n        # pure Enum branch, or branch with __str__ explicitly overridden\n        str_overridden = type(self).__str__ not in (Enum.__str__, Flag.__str__)\n        if self._member_type_ is object or str_overridden:\n            cls = str\n            val = str(self)\n        # mix-in branch\n        else:\n            cls = self._member_type_\n            val = self._value_\n        return cls.__format__(val, format_spec)\n\n    def __hash__(self):\n        return hash(self._name_)\n\n    def __reduce_ex__(self, proto):\n        return self.__class__, (self._value_, )\n\n    # DynamicClassAttribute is used to provide access to the `name` and\n    # `value` properties of enum members while keeping some measure of\n    # protection from modification, while still allowing for an enumeration\n    # to have members named `name` and `value`.  This works because enumeration\n    # members are not set directly on the enum class -- __getattr__ is\n    # used to look them up.\n\n    @DynamicClassAttribute\n    def name(self):\n        \"\"\"The name of the Enum member.\"\"\"\n        return self._name_\n\n    @DynamicClassAttribute\n    def value(self):\n        \"\"\"The value of the Enum member.\"\"\"\n        return self._value_\n\n\nclass IntEnum(int, Enum):\n    \"\"\"Enum where members are also (and must be) ints\"\"\"\n\n\ndef _reduce_ex_by_name(self, proto):\n    return self.name\n\nclass Flag(Enum):\n    \"\"\"\n    Support for flags\n    \"\"\"\n\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n\n        name: the name of the member\n        start: the initial start value or None\n        count: the number of existing members\n        last_value: the last value assigned or None\n        \"\"\"\n        if not count:\n            return start if start is not None else 1\n        for last_value in reversed(last_values):\n            try:\n                high_bit = _high_bit(last_value)\n                break\n            except Exception:\n                raise TypeError('Invalid Flag value: %r' % last_value) from None\n        return 2 ** (high_bit+1)\n\n    @classmethod\n    def _missing_(cls, value):\n        \"\"\"\n        Returns member (possibly creating it) if one can be found for value.\n        \"\"\"\n        original_value = value\n        if value < 0:\n            value = ~value\n        possible_member = cls._create_pseudo_member_(value)\n        if original_value < 0:\n            possible_member = ~possible_member\n        return possible_member\n\n    @classmethod\n    def _create_pseudo_member_(cls, value):\n        \"\"\"\n        Create a composite member iff value contains only members.\n        \"\"\"\n        pseudo_member = cls._value2member_map_.get(value, None)\n        if pseudo_member is None:\n            # verify all bits are accounted for\n            _, extra_flags = _decompose(cls, value)\n            if extra_flags:\n                raise ValueError(\"%r is not a valid %s\" % (value, cls.__qualname__))\n            # construct a singleton enum pseudo-member\n            pseudo_member = object.__new__(cls)\n            pseudo_member._name_ = None\n            pseudo_member._value_ = value\n            # use setdefault in case another thread already created a composite\n            # with this value\n            pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)\n        return pseudo_member\n\n    def __contains__(self, other):\n        \"\"\"\n        Returns True if self has at least the same flags set as other.\n        \"\"\"\n        if not isinstance(other, self.__class__):\n            raise TypeError(\n                \"unsupported operand type(s) for 'in': '%s' and '%s'\" % (\n                    type(other).__qualname__, self.__class__.__qualname__))\n        return other._value_ & self._value_ == other._value_\n\n    def __repr__(self):\n        cls = self.__class__\n        if self._name_ is not None:\n            return '<%s.%s: %r>' % (cls.__name__, self._name_, self._value_)\n        members, uncovered = _decompose(cls, self._value_)\n        return '<%s.%s: %r>' % (\n                cls.__name__,\n                '|'.join([str(m._name_ or m._value_) for m in members]),\n                self._value_,\n                )\n\n    def __str__(self):\n        cls = self.__class__\n        if self._name_ is not None:\n            return '%s.%s' % (cls.__name__, self._name_)\n        members, uncovered = _decompose(cls, self._value_)\n        if len(members) == 1 and members[0]._name_ is None:\n            return '%s.%r' % (cls.__name__, members[0]._value_)\n        else:\n            return '%s.%s' % (\n                    cls.__name__,\n                    '|'.join([str(m._name_ or m._value_) for m in members]),\n                    )\n\n    def __bool__(self):\n        return bool(self._value_)\n\n    def __or__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.__class__(self._value_ | other._value_)\n\n    def __and__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.__class__(self._value_ & other._value_)\n\n    def __xor__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.__class__(self._value_ ^ other._value_)\n\n    def __invert__(self):\n        members, uncovered = _decompose(self.__class__, self._value_)\n        inverted = self.__class__(0)\n        for m in self.__class__:\n            if m not in members and not (m._value_ & self._value_):\n                inverted = inverted | m\n        return self.__class__(inverted)\n\n\nclass IntFlag(int, Flag):\n    \"\"\"\n    Support for integer-based Flags\n    \"\"\"\n\n    @classmethod\n    def _missing_(cls, value):\n        \"\"\"\n        Returns member (possibly creating it) if one can be found for value.\n        \"\"\"\n        if not isinstance(value, int):\n            raise ValueError(\"%r is not a valid %s\" % (value, cls.__qualname__))\n        new_member = cls._create_pseudo_member_(value)\n        return new_member\n\n    @classmethod\n    def _create_pseudo_member_(cls, value):\n        \"\"\"\n        Create a composite member iff value contains only members.\n        \"\"\"\n        pseudo_member = cls._value2member_map_.get(value, None)\n        if pseudo_member is None:\n            need_to_create = [value]\n            # get unaccounted for bits\n            _, extra_flags = _decompose(cls, value)\n            # timer = 10\n            while extra_flags:\n                # timer -= 1\n                bit = _high_bit(extra_flags)\n                flag_value = 2 ** bit\n                if (flag_value not in cls._value2member_map_ and\n                        flag_value not in need_to_create\n                        ):\n                    need_to_create.append(flag_value)\n                if extra_flags == -flag_value:\n                    extra_flags = 0\n                else:\n                    extra_flags ^= flag_value\n            for value in reversed(need_to_create):\n                # construct singleton pseudo-members\n                pseudo_member = int.__new__(cls, value)\n                pseudo_member._name_ = None\n                pseudo_member._value_ = value\n                # use setdefault in case another thread already created a composite\n                # with this value\n                pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)\n        return pseudo_member\n\n    def __or__(self, other):\n        if not isinstance(other, (self.__class__, int)):\n            return NotImplemented\n        result = self.__class__(self._value_ | self.__class__(other)._value_)\n        return result\n\n    def __and__(self, other):\n        if not isinstance(other, (self.__class__, int)):\n            return NotImplemented\n        return self.__class__(self._value_ & self.__class__(other)._value_)\n\n    def __xor__(self, other):\n        if not isinstance(other, (self.__class__, int)):\n            return NotImplemented\n        return self.__class__(self._value_ ^ self.__class__(other)._value_)\n\n    __ror__ = __or__\n    __rand__ = __and__\n    __rxor__ = __xor__\n\n    def __invert__(self):\n        result = self.__class__(~self._value_)\n        return result\n\n\ndef _high_bit(value):\n    \"\"\"\n    returns index of highest bit, or -1 if value is zero or negative\n    \"\"\"\n    return value.bit_length() - 1\n\ndef unique(enumeration):\n    \"\"\"\n    Class decorator for enumerations ensuring unique member values.\n    \"\"\"\n    duplicates = []\n    for name, member in enumeration.__members__.items():\n        if name != member.name:\n            duplicates.append((name, member.name))\n    if duplicates:\n        alias_details = ', '.join(\n                [\"%s -> %s\" % (alias, name) for (alias, name) in duplicates])\n        raise ValueError('duplicate values found in %r: %s' %\n                (enumeration, alias_details))\n    return enumeration\n\ndef _decompose(flag, value):\n    \"\"\"\n    Extract all members from the value.\n    \"\"\"\n    # _decompose is only called if the value is not named\n    not_covered = value\n    negative = value < 0\n    members = []\n    for member in flag:\n        member_value = member.value\n        if member_value and member_value & value == member_value:\n            members.append(member)\n            not_covered &= ~member_value\n    if not negative:\n        tmp = not_covered\n        while tmp:\n            flag_value = 2 ** _high_bit(tmp)\n            if flag_value in flag._value2member_map_:\n                members.append(flag._value2member_map_[flag_value])\n                not_covered &= ~flag_value\n            tmp &= ~flag_value\n    if not members and value in flag._value2member_map_:\n        members.append(flag._value2member_map_[value])\n    members.sort(key=lambda m: m._value_, reverse=True)\n    if len(members) > 1 and members[0].value == value:\n        # we have the breakdown, don't need the value member itself\n        members.pop(0)\n    return members, not_covered\n", 1044], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# re-compatible interface for the sre matching engine\n#\n# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.\n#\n# This version of the SRE library can be redistributed under CNRI's\n# Python 1.6 license.  For any other use, please contact Secret Labs\n# AB (info@pythonware.com).\n#\n# Portions of this engine have been developed in cooperation with\n# CNRI.  Hewlett-Packard provided funding for 1.6 integration and\n# other compatibility work.\n#\n\nr\"\"\"Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) The letters set the corresponding flags defined below.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'.\n\n\"\"\"\n\nimport enum\nimport sre_compile\nimport sre_parse\nimport functools\ntry:\n    import _locale\nexcept ImportError:\n    _locale = None\n\n\n# public symbols\n__all__ = [\n    \"match\", \"fullmatch\", \"search\", \"sub\", \"subn\", \"split\",\n    \"findall\", \"finditer\", \"compile\", \"purge\", \"template\", \"escape\",\n    \"error\", \"Pattern\", \"Match\", \"A\", \"I\", \"L\", \"M\", \"S\", \"X\", \"U\",\n    \"ASCII\", \"IGNORECASE\", \"LOCALE\", \"MULTILINE\", \"DOTALL\", \"VERBOSE\",\n    \"UNICODE\",\n]\n\n__version__ = \"2.2.1\"\n\nclass RegexFlag(enum.IntFlag):\n    ASCII = A = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = I = sre_compile.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = L = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = U = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = M = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = S = sre_compile.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = X = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    # sre extensions (experimental, don't rely on these)\n    TEMPLATE = T = sre_compile.SRE_FLAG_TEMPLATE # disable backtracking\n    DEBUG = sre_compile.SRE_FLAG_DEBUG # dump pattern after compilation\n\n    def __repr__(self):\n        if self._name_ is not None:\n            return f're.{self._name_}'\n        value = self._value_\n        members = []\n        negative = value < 0\n        if negative:\n            value = ~value\n        for m in self.__class__:\n            if value & m._value_:\n                value &= ~m._value_\n                members.append(f're.{m._name_}')\n        if value:\n            members.append(hex(value))\n        res = '|'.join(members)\n        if negative:\n            if len(members) > 1:\n                res = f'~({res})'\n            else:\n                res = f'~{res}'\n        return res\n    __str__ = object.__str__\n\nglobals().update(RegexFlag.__members__)\n\n# sre exception\nerror = sre_compile.error\n\n# --------------------------------------------------------------------\n# public interface\n\ndef match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\n\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\n\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\n\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).sub(repl, string, count)\n\ndef subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).subn(repl, string, count)\n\ndef split(pattern, string, maxsplit=0, flags=0):\n    \"\"\"Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.\"\"\"\n    return _compile(pattern, flags).split(string, maxsplit)\n\ndef findall(pattern, string, flags=0):\n    \"\"\"Return a list of all non-overlapping matches in the string.\n\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).findall(string)\n\ndef finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).finditer(string)\n\ndef compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\n\ndef purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\n\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)\n# '&', '~', (extended character set operations)\n# '#' (comment) and WHITESPACE (ignored) in verbose mode\n_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\n\ndef escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')\n\nPattern = type(sre_compile.compile('', 0))\nMatch = type(sre_compile.compile('', 0).match(''))\n\n# --------------------------------------------------------------------\n# internals\n\n_cache = {}  # ordered!\n\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass\n    if isinstance(pattern, Pattern):\n        if flags:\n            raise ValueError(\n                \"cannot process flags argument with a compiled pattern\")\n        return pattern\n    if not sre_compile.isstring(pattern):\n        raise TypeError(\"first argument must be string or compiled pattern\")\n    p = sre_compile.compile(pattern, flags)\n    if not (flags & DEBUG):\n        if len(_cache) >= _MAXCACHE:\n            # Drop the oldest item\n            try:\n                del _cache[next(iter(_cache))]\n            except (StopIteration, RuntimeError, KeyError):\n                pass\n        _cache[type(pattern), pattern, flags] = p\n    return p\n\n@functools.lru_cache(_MAXCACHE)\ndef _compile_repl(repl, pattern):\n    # internal: compile replacement pattern\n    return sre_parse.parse_template(repl, pattern)\n\ndef _expand(pattern, match, template):\n    # internal: Match.expand implementation hook\n    template = sre_parse.parse_template(template, pattern)\n    return sre_parse.expand_template(template, match)\n\ndef _subx(pattern, template):\n    # internal: Pattern.sub/subn implementation helper\n    template = _compile_repl(template, pattern)\n    if not template[0] and len(template[1]) == 1:\n        # literal replacement\n        return template[1][0]\n    def filter(match, template=template):\n        return sre_parse.expand_template(template, match)\n    return filter\n\n# register myself for pickling\n\nimport copyreg\n\ndef _pickle(p):\n    return _compile, (p.pattern, p.flags)\n\ncopyreg.pickle(Pattern, _pickle, _compile)\n\n# --------------------------------------------------------------------\n# experimental stuff (see python-dev discussions for details)\n\nclass Scanner:\n    def __init__(self, lexicon, flags=0):\n        from sre_constants import BRANCH, SUBPATTERN\n        if isinstance(flags, RegexFlag):\n            flags = flags.value\n        self.lexicon = lexicon\n        # combine phrases into a compound pattern\n        p = []\n        s = sre_parse.State()\n        s.flags = flags\n        for phrase, action in lexicon:\n            gid = s.opengroup()\n            p.append(sre_parse.SubPattern(s, [\n                (SUBPATTERN, (gid, 0, 0, sre_parse.parse(phrase, flags))),\n                ]))\n            s.closegroup(gid, p[-1])\n        p = sre_parse.SubPattern(s, [(BRANCH, (None, p))])\n        self.scanner = sre_compile.compile(p)\n    def scan(self, string):\n        result = []\n        append = result.append\n        match = self.scanner.scanner(string).match\n        i = 0\n        while True:\n            m = match()\n            if not m:\n                break\n            j = m.end()\n            if i == j:\n                break\n            action = self.lexicon[m.lastindex-1][1]\n            if callable(action):\n                self.match = m\n                action = action(self, m.group())\n            if action is not None:\n                append(action)\n            i = j\n        return result, string[i:]\n", 384], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py": ["# Copyright 2007 Google, Inc. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.\n\nUnit tests are in test_collections.\n\"\"\"\n\nfrom abc import ABCMeta, abstractmethod\nimport sys\n\nGenericAlias = type(list[int])\nEllipsisType = type(...)\ndef _f(): pass\nFunctionType = type(_f)\ndel _f\n\n__all__ = [\"Awaitable\", \"Coroutine\",\n           \"AsyncIterable\", \"AsyncIterator\", \"AsyncGenerator\",\n           \"Hashable\", \"Iterable\", \"Iterator\", \"Generator\", \"Reversible\",\n           \"Sized\", \"Container\", \"Callable\", \"Collection\",\n           \"Set\", \"MutableSet\",\n           \"Mapping\", \"MutableMapping\",\n           \"MappingView\", \"KeysView\", \"ItemsView\", \"ValuesView\",\n           \"Sequence\", \"MutableSequence\",\n           \"ByteString\",\n           ]\n\n# This module has been renamed from collections.abc to _collections_abc to\n# speed up interpreter startup. Some of the types such as MutableMapping are\n# required early but collections module imports a lot of other modules.\n# See issue #19218\n__name__ = \"collections.abc\"\n\n# Private list of types that we want to register with the various ABCs\n# so that they will pass tests like:\n#       it = iter(somebytearray)\n#       assert isinstance(it, Iterable)\n# Note:  in other implementations, these types might not be distinct\n# and they may have their own implementation specific types that\n# are not included on this list.\nbytes_iterator = type(iter(b''))\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n\n\n### ONE-TRICK PONIES ###\n\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True\n\nclass Hashable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __hash__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Hashable:\n            return _check_methods(C, \"__hash__\")\n        return NotImplemented\n\n\nclass Awaitable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __await__(self):\n        yield\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Awaitable:\n            return _check_methods(C, \"__await__\")\n        return NotImplemented\n\n    __class_getitem__ = classmethod(GenericAlias)\n\n\nclass Coroutine(Awaitable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        \"\"\"Raise an exception in the coroutine.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        \"\"\"Raise GeneratorExit inside coroutine.\n        \"\"\"\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError(\"coroutine ignored GeneratorExit\")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Coroutine:\n            return _check_methods(C, '__await__', 'send', 'throw', 'close')\n        return NotImplemented\n\n\nCoroutine.register(coroutine)\n\n\nclass AsyncIterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __aiter__(self):\n        return AsyncIterator()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterable:\n            return _check_methods(C, \"__aiter__\")\n        return NotImplemented\n\n    __class_getitem__ = classmethod(GenericAlias)\n\n\nclass AsyncIterator(AsyncIterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    async def __anext__(self):\n        \"\"\"Return the next item or raise StopAsyncIteration when exhausted.\"\"\"\n        raise StopAsyncIteration\n\n    def __aiter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterator:\n            return _check_methods(C, \"__anext__\", \"__aiter__\")\n        return NotImplemented\n\n\nclass AsyncGenerator(AsyncIterator):\n\n    __slots__ = ()\n\n    async def __anext__(self):\n        \"\"\"Return the next item from the asynchronous generator.\n        When exhausted, raise StopAsyncIteration.\n        \"\"\"\n        return await self.asend(None)\n\n    @abstractmethod\n    async def asend(self, value):\n        \"\"\"Send a value into the asynchronous generator.\n        Return next yielded value or raise StopAsyncIteration.\n        \"\"\"\n        raise StopAsyncIteration\n\n    @abstractmethod\n    async def athrow(self, typ, val=None, tb=None):\n        \"\"\"Raise an exception in the asynchronous generator.\n        Return next yielded value or raise StopAsyncIteration.\n        \"\"\"\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    async def aclose(self):\n        \"\"\"Raise GeneratorExit inside coroutine.\n        \"\"\"\n        try:\n            await self.athrow(GeneratorExit)\n        except (GeneratorExit, StopAsyncIteration):\n            pass\n        else:\n            raise RuntimeError(\"asynchronous generator ignored GeneratorExit\")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncGenerator:\n            return _check_methods(C, '__aiter__', '__anext__',\n                                  'asend', 'athrow', 'aclose')\n        return NotImplemented\n\n\nAsyncGenerator.register(async_generator)\n\n\nclass Iterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            return _check_methods(C, \"__iter__\")\n        return NotImplemented\n\n    __class_getitem__ = classmethod(GenericAlias)\n\n\nclass Iterator(Iterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __next__(self):\n        'Return the next item from the iterator. When exhausted, raise StopIteration'\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterator:\n            return _check_methods(C, '__iter__', '__next__')\n        return NotImplemented\n\n\nIterator.register(bytes_iterator)\nIterator.register(bytearray_iterator)\n#Iterator.register(callable_iterator)\nIterator.register(dict_keyiterator)\nIterator.register(dict_valueiterator)\nIterator.register(dict_itemiterator)\nIterator.register(list_iterator)\nIterator.register(list_reverseiterator)\nIterator.register(range_iterator)\nIterator.register(longrange_iterator)\nIterator.register(set_iterator)\nIterator.register(str_iterator)\nIterator.register(tuple_iterator)\nIterator.register(zip_iterator)\n\n\nclass Reversible(Iterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __reversed__(self):\n        while False:\n            yield None\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Reversible:\n            return _check_methods(C, \"__reversed__\", \"__iter__\")\n        return NotImplemented\n\n\nclass Generator(Iterator):\n\n    __slots__ = ()\n\n    def __next__(self):\n        \"\"\"Return the next item from the generator.\n        When exhausted, raise StopIteration.\n        \"\"\"\n        return self.send(None)\n\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the generator.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        \"\"\"Raise an exception in the generator.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        \"\"\"Raise GeneratorExit inside generator.\n        \"\"\"\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError(\"generator ignored GeneratorExit\")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Generator:\n            return _check_methods(C, '__iter__', '__next__',\n                                  'send', 'throw', 'close')\n        return NotImplemented\n\n\nGenerator.register(generator)\n\n\nclass Sized(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __len__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            return _check_methods(C, \"__len__\")\n        return NotImplemented\n\n\nclass Container(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            return _check_methods(C, \"__contains__\")\n        return NotImplemented\n\n    __class_getitem__ = classmethod(GenericAlias)\n\n\nclass Collection(Sized, Iterable, Container):\n\n    __slots__ = ()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Collection:\n            return _check_methods(C,  \"__len__\", \"__iter__\", \"__contains__\")\n        return NotImplemented\n\n\nclass _CallableGenericAlias(GenericAlias):\n    \"\"\" Represent `Callable[argtypes, resulttype]`.\n\n    This sets ``__args__`` to a tuple containing the flattened``argtypes``\n    followed by ``resulttype``.\n\n    Example: ``Callable[[int, str], float]`` sets ``__args__`` to\n    ``(int, str, float)``.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __new__(cls, origin, args):\n        try:\n            return cls.__create_ga(origin, args)\n        except TypeError as exc:\n            import warnings\n            warnings.warn(f'{str(exc)} '\n                          f'(This will raise a TypeError in Python 3.10.)',\n                          DeprecationWarning)\n            return GenericAlias(origin, args)\n\n    @classmethod\n    def __create_ga(cls, origin, args):\n        if not isinstance(args, tuple) or len(args) != 2:\n            raise TypeError(\n                \"Callable must be used as Callable[[arg, ...], result].\")\n        t_args, t_result = args\n        if isinstance(t_args, (list, tuple)):\n            ga_args = tuple(t_args) + (t_result,)\n        # This relaxes what t_args can be on purpose to allow things like\n        # PEP 612 ParamSpec.  Responsibility for whether a user is using\n        # Callable[...] properly is deferred to static type checkers.\n        else:\n            ga_args = args\n        return super().__new__(cls, origin, ga_args)\n\n    def __repr__(self):\n        if len(self.__args__) == 2 and self.__args__[0] is Ellipsis:\n            return super().__repr__()\n        return (f'collections.abc.Callable'\n                f'[[{\", \".join([_type_repr(a) for a in self.__args__[:-1]])}], '\n                f'{_type_repr(self.__args__[-1])}]')\n\n    def __reduce__(self):\n        args = self.__args__\n        if not (len(args) == 2 and args[0] is Ellipsis):\n            args = list(args[:-1]), args[-1]\n        return _CallableGenericAlias, (Callable, args)\n\n    def __getitem__(self, item):\n        # Called during TypeVar substitution, returns the custom subclass\n        # rather than the default types.GenericAlias object.\n        ga = super().__getitem__(item)\n        args = ga.__args__\n        t_result = args[-1]\n        t_args = args[:-1]\n        args = (t_args, t_result)\n        return _CallableGenericAlias(Callable, args)\n\n\ndef _type_repr(obj):\n    \"\"\"Return the repr() of an object, special-casing types (internal helper).\n\n    Copied from :mod:`typing` since collections.abc\n    shouldn't depend on that module.\n    \"\"\"\n    if isinstance(obj, GenericAlias):\n        return repr(obj)\n    if isinstance(obj, type):\n        if obj.__module__ == 'builtins':\n            return obj.__qualname__\n        return f'{obj.__module__}.{obj.__qualname__}'\n    if obj is Ellipsis:\n        return '...'\n    if isinstance(obj, FunctionType):\n        return obj.__name__\n    return repr(obj)\n\n\nclass Callable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __call__(self, *args, **kwds):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Callable:\n            return _check_methods(C, \"__call__\")\n        return NotImplemented\n\n    __class_getitem__ = classmethod(_CallableGenericAlias)\n\n\n### SETS ###\n\n\nclass Set(Collection):\n\n    \"\"\"A set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), redefine __le__ and __ge__,\n    then the other operations will automatically follow suit.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __le__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) > len(other):\n            return False\n        for elem in self:\n            if elem not in other:\n                return False\n        return True\n\n    def __lt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) < len(other) and self.__le__(other)\n\n    def __gt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) > len(other) and self.__ge__(other)\n\n    def __ge__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) < len(other):\n            return False\n        for elem in other:\n            if elem not in self:\n                return False\n        return True\n\n    def __eq__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) == len(other) and self.__le__(other)\n\n    @classmethod\n    def _from_iterable(cls, it):\n        '''Construct an instance of the class from any iterable input.\n\n        Must override this method if the class constructor signature\n        does not accept an iterable for an input.\n        '''\n        return cls(it)\n\n    def __and__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        return self._from_iterable(value for value in other if value in self)\n\n    __rand__ = __and__\n\n    def isdisjoint(self, other):\n        'Return True if two sets have a null intersection.'\n        for value in other:\n            if value in self:\n                return False\n        return True\n\n    def __or__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        chain = (e for s in (self, other) for e in s)\n        return self._from_iterable(chain)\n\n    __ror__ = __or__\n\n    def __sub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in self\n                                   if value not in other)\n\n    def __rsub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in other\n                                   if value not in self)\n\n    def __xor__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return (self - other) | (other - self)\n\n    __rxor__ = __xor__\n\n    def _hash(self):\n        \"\"\"Compute the hash value of a set.\n\n        Note that we don't define __hash__: not all sets are hashable.\n        But if you define a hashable set type, its __hash__ should\n        call this function.\n\n        This must be compatible __eq__.\n\n        All sets ought to compare equal if they contain the same\n        elements, regardless of how they are implemented, and\n        regardless of the order of the elements; so there's not much\n        freedom for __eq__ or __hash__.  We match the algorithm used\n        by the built-in frozenset type.\n        \"\"\"\n        MAX = sys.maxsize\n        MASK = 2 * MAX + 1\n        n = len(self)\n        h = 1927868237 * (n + 1)\n        h &= MASK\n        for x in self:\n            hx = hash(x)\n            h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167\n            h &= MASK\n        h ^= (h >> 11) ^ (h >> 25)\n        h = h * 69069 + 907133923\n        h &= MASK\n        if h > MAX:\n            h -= MASK + 1\n        if h == -1:\n            h = 590923713\n        return h\n\n\nSet.register(frozenset)\n\n\nclass MutableSet(Set):\n    \"\"\"A mutable set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__, __len__,\n    add(), and discard().\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    \"\"\"\n\n    __slots__ = ()\n\n    @abstractmethod\n    def add(self, value):\n        \"\"\"Add an element.\"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def discard(self, value):\n        \"\"\"Remove an element.  Do not raise an exception if absent.\"\"\"\n        raise NotImplementedError\n\n    def remove(self, value):\n        \"\"\"Remove an element. If not a member, raise a KeyError.\"\"\"\n        if value not in self:\n            raise KeyError(value)\n        self.discard(value)\n\n    def pop(self):\n        \"\"\"Return the popped value.  Raise KeyError if empty.\"\"\"\n        it = iter(self)\n        try:\n            value = next(it)\n        except StopIteration:\n            raise KeyError from None\n        self.discard(value)\n        return value\n\n    def clear(self):\n        \"\"\"This is slow (creates N new iterators!) but effective.\"\"\"\n        try:\n            while True:\n                self.pop()\n        except KeyError:\n            pass\n\n    def __ior__(self, it):\n        for value in it:\n            self.add(value)\n        return self\n\n    def __iand__(self, it):\n        for value in (self - it):\n            self.discard(value)\n        return self\n\n    def __ixor__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            if not isinstance(it, Set):\n                it = self._from_iterable(it)\n            for value in it:\n                if value in self:\n                    self.discard(value)\n                else:\n                    self.add(value)\n        return self\n\n    def __isub__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            for value in it:\n                self.discard(value)\n        return self\n\n\nMutableSet.register(set)\n\n\n### MAPPINGS ###\n\n\nclass Mapping(Collection):\n\n    __slots__ = ()\n\n    \"\"\"A Mapping is a generic container for associating key/value\n    pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __iter__, and __len__.\n\n    \"\"\"\n\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError\n\n    def get(self, key, default=None):\n        'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def __contains__(self, key):\n        try:\n            self[key]\n        except KeyError:\n            return False\n        else:\n            return True\n\n    def keys(self):\n        \"D.keys() -> a set-like object providing a view on D's keys\"\n        return KeysView(self)\n\n    def items(self):\n        \"D.items() -> a set-like object providing a view on D's items\"\n        return ItemsView(self)\n\n    def values(self):\n        \"D.values() -> an object providing a view on D's values\"\n        return ValuesView(self)\n\n    def __eq__(self, other):\n        if not isinstance(other, Mapping):\n            return NotImplemented\n        return dict(self.items()) == dict(other.items())\n\n    __reversed__ = None\n\n\nMapping.register(mappingproxy)\n\n\nclass MappingView(Sized):\n\n    __slots__ = '_mapping',\n\n    def __init__(self, mapping):\n        self._mapping = mapping\n\n    def __len__(self):\n        return len(self._mapping)\n\n    def __repr__(self):\n        return '{0.__class__.__name__}({0._mapping!r})'.format(self)\n\n    __class_getitem__ = classmethod(GenericAlias)\n\n\nclass KeysView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, key):\n        return key in self._mapping\n\n    def __iter__(self):\n        yield from self._mapping\n\n\nKeysView.register(dict_keys)\n\n\nclass ItemsView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, item):\n        key, value = item\n        try:\n            v = self._mapping[key]\n        except KeyError:\n            return False\n        else:\n            return v is value or v == value\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield (key, self._mapping[key])\n\n\nItemsView.register(dict_items)\n\n\nclass ValuesView(MappingView, Collection):\n\n    __slots__ = ()\n\n    def __contains__(self, value):\n        for key in self._mapping:\n            v = self._mapping[key]\n            if v is value or v == value:\n                return True\n        return False\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield self._mapping[key]\n\n\nValuesView.register(dict_values)\n\n\nclass MutableMapping(Mapping):\n\n    __slots__ = ()\n\n    \"\"\"A MutableMapping is a generic container for associating\n    key/value pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __setitem__, __delitem__,\n    __iter__, and __len__.\n\n    \"\"\"\n\n    @abstractmethod\n    def __setitem__(self, key, value):\n        raise KeyError\n\n    @abstractmethod\n    def __delitem__(self, key):\n        raise KeyError\n\n    __marker = object()\n\n    def pop(self, key, default=__marker):\n        '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n          If key is not found, d is returned if given, otherwise KeyError is raised.\n        '''\n        try:\n            value = self[key]\n        except KeyError:\n            if default is self.__marker:\n                raise\n            return default\n        else:\n            del self[key]\n            return value\n\n    def popitem(self):\n        '''D.popitem() -> (k, v), remove and return some (key, value) pair\n           as a 2-tuple; but raise KeyError if D is empty.\n        '''\n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError from None\n        value = self[key]\n        del self[key]\n        return key, value\n\n    def clear(self):\n        'D.clear() -> None.  Remove all items from D.'\n        try:\n            while True:\n                self.popitem()\n        except KeyError:\n            pass\n\n    def update(self, other=(), /, **kwds):\n        ''' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.\n            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]\n            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\n            In either case, this is followed by: for k, v in F.items(): D[k] = v\n        '''\n        if isinstance(other, Mapping):\n            for key in other:\n                self[key] = other[key]\n        elif hasattr(other, \"keys\"):\n            for key in other.keys():\n                self[key] = other[key]\n        else:\n            for key, value in other:\n                self[key] = value\n        for key, value in kwds.items():\n            self[key] = value\n\n    def setdefault(self, key, default=None):\n        'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n        return default\n\n\nMutableMapping.register(dict)\n\n\n### SEQUENCES ###\n\n\nclass Sequence(Reversible, Collection):\n\n    \"\"\"All the operations on a read-only sequence.\n\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    \"\"\"\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __getitem__(self, index):\n        raise IndexError\n\n    def __iter__(self):\n        i = 0\n        try:\n            while True:\n                v = self[i]\n                yield v\n                i += 1\n        except IndexError:\n            return\n\n    def __contains__(self, value):\n        for v in self:\n            if v is value or v == value:\n                return True\n        return False\n\n    def __reversed__(self):\n        for i in reversed(range(len(self))):\n            yield self[i]\n\n    def index(self, value, start=0, stop=None):\n        '''S.index(value, [start, [stop]]) -> integer -- return first index of value.\n           Raises ValueError if the value is not present.\n\n           Supporting start and stop arguments is optional, but\n           recommended.\n        '''\n        if start is not None and start < 0:\n            start = max(len(self) + start, 0)\n        if stop is not None and stop < 0:\n            stop += len(self)\n\n        i = start\n        while stop is None or i < stop:\n            try:\n                v = self[i]\n                if v is value or v == value:\n                    return i\n            except IndexError:\n                break\n            i += 1\n        raise ValueError\n\n    def count(self, value):\n        'S.count(value) -> integer -- return number of occurrences of value'\n        return sum(1 for v in self if v is value or v == value)\n\n\nSequence.register(tuple)\nSequence.register(str)\nSequence.register(range)\nSequence.register(memoryview)\n\n\nclass ByteString(Sequence):\n\n    \"\"\"This unifies bytes and bytearray.\n\n    XXX Should add all their methods.\n    \"\"\"\n\n    __slots__ = ()\n\nByteString.register(bytes)\nByteString.register(bytearray)\n\n\nclass MutableSequence(Sequence):\n\n    __slots__ = ()\n\n    \"\"\"All the operations on a read-write sequence.\n\n    Concrete subclasses must provide __new__ or __init__,\n    __getitem__, __setitem__, __delitem__, __len__, and insert().\n\n    \"\"\"\n\n    @abstractmethod\n    def __setitem__(self, index, value):\n        raise IndexError\n\n    @abstractmethod\n    def __delitem__(self, index):\n        raise IndexError\n\n    @abstractmethod\n    def insert(self, index, value):\n        'S.insert(index, value) -- insert value before index'\n        raise IndexError\n\n    def append(self, value):\n        'S.append(value) -- append value to the end of the sequence'\n        self.insert(len(self), value)\n\n    def clear(self):\n        'S.clear() -> None -- remove all items from S'\n        try:\n            while True:\n                self.pop()\n        except IndexError:\n            pass\n\n    def reverse(self):\n        'S.reverse() -- reverse *IN PLACE*'\n        n = len(self)\n        for i in range(n//2):\n            self[i], self[n-i-1] = self[n-i-1], self[i]\n\n    def extend(self, values):\n        'S.extend(iterable) -- extend sequence by appending elements from the iterable'\n        if values is self:\n            values = list(values)\n        for v in values:\n            self.append(v)\n\n    def pop(self, index=-1):\n        '''S.pop([index]) -> item -- remove and return item at index (default last).\n           Raise IndexError if list is empty or index is out of range.\n        '''\n        v = self[index]\n        del self[index]\n        return v\n\n    def remove(self, value):\n        '''S.remove(value) -- remove first occurrence of value.\n           Raise ValueError if the value is not present.\n        '''\n        del self[self.index(value)]\n\n    def __iadd__(self, values):\n        self.extend(values)\n        return self\n\n\nMutableSequence.register(list)\nMutableSequence.register(bytearray)  # Multiply inheriting, see ByteString\n", 1116], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py": ["# Copyright 2007 Google, Inc. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"\n\n\ndef abstractmethod(funcobj):\n    \"\"\"A decorator indicating abstract methods.\n\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract methods are overridden.\n    The abstract methods can be called using any of the normal\n    'super' call mechanisms.  abstractmethod() may be used to declare\n    abstract methods for properties and descriptors.\n\n    Usage:\n\n        class C(metaclass=ABCMeta):\n            @abstractmethod\n            def my_abstract_method(self, ...):\n                ...\n    \"\"\"\n    funcobj.__isabstractmethod__ = True\n    return funcobj\n\n\nclass abstractclassmethod(classmethod):\n    \"\"\"A decorator indicating abstract classmethods.\n\n    Deprecated, use 'classmethod' with 'abstractmethod' instead:\n\n        class C(ABC):\n            @classmethod\n            @abstractmethod\n            def my_abstract_classmethod(cls, ...):\n                ...\n\n    \"\"\"\n\n    __isabstractmethod__ = True\n\n    def __init__(self, callable):\n        callable.__isabstractmethod__ = True\n        super().__init__(callable)\n\n\nclass abstractstaticmethod(staticmethod):\n    \"\"\"A decorator indicating abstract staticmethods.\n\n    Deprecated, use 'staticmethod' with 'abstractmethod' instead:\n\n        class C(ABC):\n            @staticmethod\n            @abstractmethod\n            def my_abstract_staticmethod(...):\n                ...\n\n    \"\"\"\n\n    __isabstractmethod__ = True\n\n    def __init__(self, callable):\n        callable.__isabstractmethod__ = True\n        super().__init__(callable)\n\n\nclass abstractproperty(property):\n    \"\"\"A decorator indicating abstract properties.\n\n    Deprecated, use 'property' with 'abstractmethod' instead:\n\n        class C(ABC):\n            @property\n            @abstractmethod\n            def my_abstract_property(self):\n                ...\n\n    \"\"\"\n\n    __isabstractmethod__ = True\n\n\ntry:\n    from _abc import (get_cache_token, _abc_init, _abc_register,\n                      _abc_instancecheck, _abc_subclasscheck, _get_dump,\n                      _reset_registry, _reset_caches)\nexcept ImportError:\n    from _py_abc import ABCMeta, get_cache_token\n    ABCMeta.__module__ = 'abc'\nelse:\n    class ABCMeta(type):\n        \"\"\"Metaclass for defining Abstract Base Classes (ABCs).\n\n        Use this metaclass to create an ABC.  An ABC can be subclassed\n        directly, and then acts as a mix-in class.  You can also register\n        unrelated concrete classes (even built-in classes) and unrelated\n        ABCs as 'virtual subclasses' -- these and their descendants will\n        be considered subclasses of the registering ABC by the built-in\n        issubclass() function, but the registering ABC won't show up in\n        their MRO (Method Resolution Order) nor will method\n        implementations defined by the registering ABC be callable (not\n        even via super()).\n        \"\"\"\n        def __new__(mcls, name, bases, namespace, **kwargs):\n            cls = super().__new__(mcls, name, bases, namespace, **kwargs)\n            _abc_init(cls)\n            return cls\n\n        def register(cls, subclass):\n            \"\"\"Register a virtual subclass of an ABC.\n\n            Returns the subclass, to allow usage as a class decorator.\n            \"\"\"\n            return _abc_register(cls, subclass)\n\n        def __instancecheck__(cls, instance):\n            \"\"\"Override for isinstance(instance, cls).\"\"\"\n            return _abc_instancecheck(cls, instance)\n\n        def __subclasscheck__(cls, subclass):\n            \"\"\"Override for issubclass(subclass, cls).\"\"\"\n            return _abc_subclasscheck(cls, subclass)\n\n        def _dump_registry(cls, file=None):\n            \"\"\"Debug helper to print the ABC registry.\"\"\"\n            print(f\"Class: {cls.__module__}.{cls.__qualname__}\", file=file)\n            print(f\"Inv. counter: {get_cache_token()}\", file=file)\n            (_abc_registry, _abc_cache, _abc_negative_cache,\n             _abc_negative_cache_version) = _get_dump(cls)\n            print(f\"_abc_registry: {_abc_registry!r}\", file=file)\n            print(f\"_abc_cache: {_abc_cache!r}\", file=file)\n            print(f\"_abc_negative_cache: {_abc_negative_cache!r}\", file=file)\n            print(f\"_abc_negative_cache_version: {_abc_negative_cache_version!r}\",\n                  file=file)\n\n        def _abc_registry_clear(cls):\n            \"\"\"Clear the registry (for debugging or testing).\"\"\"\n            _reset_registry(cls)\n\n        def _abc_caches_clear(cls):\n            \"\"\"Clear the caches (for debugging or testing).\"\"\"\n            _reset_caches(cls)\n\n\nclass ABC(metaclass=ABCMeta):\n    \"\"\"Helper class that provides a standard way to create an ABC using\n    inheritance.\n    \"\"\"\n    __slots__ = ()\n", 150], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py": ["'''This module implements specialized container datatypes providing\nalternatives to Python's general purpose built-in containers, dict,\nlist, set, and tuple.\n\n* namedtuple   factory function for creating tuple subclasses with named fields\n* deque        list-like container with fast appends and pops on either end\n* ChainMap     dict-like class for creating a single view of multiple mappings\n* Counter      dict subclass for counting hashable objects\n* OrderedDict  dict subclass that remembers the order entries were added\n* defaultdict  dict subclass that calls a factory function to supply missing values\n* UserDict     wrapper around dictionary objects for easier dict subclassing\n* UserList     wrapper around list objects for easier list subclassing\n* UserString   wrapper around string objects for easier string subclassing\n\n'''\n\n__all__ = [\n    'ChainMap',\n    'Counter',\n    'OrderedDict',\n    'UserDict',\n    'UserList',\n    'UserString',\n    'defaultdict',\n    'deque',\n    'namedtuple',\n]\n\nimport _collections_abc\nimport heapq as _heapq\nimport sys as _sys\n\nfrom itertools import chain as _chain\nfrom itertools import repeat as _repeat\nfrom itertools import starmap as _starmap\nfrom keyword import iskeyword as _iskeyword\nfrom operator import eq as _eq\nfrom operator import itemgetter as _itemgetter\nfrom reprlib import recursive_repr as _recursive_repr\nfrom _weakref import proxy as _proxy\n\ntry:\n    from _collections import deque\nexcept ImportError:\n    pass\nelse:\n    _collections_abc.MutableSequence.register(deque)\n\ntry:\n    from _collections import defaultdict\nexcept ImportError:\n    pass\n\n\ndef __getattr__(name):\n    # For backwards compatibility, continue to make the collections ABCs\n    # through Python 3.6 available through the collections module.\n    # Note, no new collections ABCs were added in Python 3.7\n    if name in _collections_abc.__all__:\n        obj = getattr(_collections_abc, name)\n        import warnings\n        warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\n                      \"of from 'collections.abc' is deprecated since Python 3.3, \"\n                      \"and in 3.10 it will stop working\",\n                      DeprecationWarning, stacklevel=2)\n        globals()[name] = obj\n        return obj\n    raise AttributeError(f'module {__name__!r} has no attribute {name!r}')\n\n\n################################################################################\n### OrderedDict\n################################################################################\n\nclass _OrderedDictKeysView(_collections_abc.KeysView):\n\n    def __reversed__(self):\n        yield from reversed(self._mapping)\n\nclass _OrderedDictItemsView(_collections_abc.ItemsView):\n\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield (key, self._mapping[key])\n\nclass _OrderedDictValuesView(_collections_abc.ValuesView):\n\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield self._mapping[key]\n\nclass _Link(object):\n    __slots__ = 'prev', 'next', 'key', '__weakref__'\n\nclass OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n    # The remaining methods are order-aware.\n    # Big-O running times for all methods are the same as regular dictionaries.\n\n    # The internal self.__map dict maps keys to links in a doubly linked list.\n    # The circular doubly linked list starts and ends with a sentinel element.\n    # The sentinel element never gets deleted (this simplifies the algorithm).\n    # The sentinel is in self.__hardroot with a weakref proxy in self.__root.\n    # The prev links are weakref proxies (to prevent circular references).\n    # Individual links are kept alive by the hard reference in self.__map.\n    # Those hard references disappear when a key is deleted from an OrderedDict.\n\n    def __init__(self, other=(), /, **kwds):\n        '''Initialize an ordered dictionary.  The signature is the same as\n        regular dictionaries.  Keyword argument order is preserved.\n        '''\n        try:\n            self.__root\n        except AttributeError:\n            self.__hardroot = _Link()\n            self.__root = root = _proxy(self.__hardroot)\n            root.prev = root.next = root\n            self.__map = {}\n        self.__update(other, **kwds)\n\n    def __setitem__(self, key, value,\n                    dict_setitem=dict.__setitem__, proxy=_proxy, Link=_Link):\n        'od.__setitem__(i, y) <==> od[i]=y'\n        # Setting a new item creates a new link at the end of the linked list,\n        # and the inherited dictionary is updated with the new key/value pair.\n        if key not in self:\n            self.__map[key] = link = Link()\n            root = self.__root\n            last = root.prev\n            link.prev, link.next, link.key = last, root, key\n            last.next = link\n            root.prev = proxy(link)\n        dict_setitem(self, key, value)\n\n    def __delitem__(self, key, dict_delitem=dict.__delitem__):\n        'od.__delitem__(y) <==> del od[y]'\n        # Deleting an existing item uses self.__map to find the link which gets\n        # removed by updating the links in the predecessor and successor nodes.\n        dict_delitem(self, key)\n        link = self.__map.pop(key)\n        link_prev = link.prev\n        link_next = link.next\n        link_prev.next = link_next\n        link_next.prev = link_prev\n        link.prev = None\n        link.next = None\n\n    def __iter__(self):\n        'od.__iter__() <==> iter(od)'\n        # Traverse the linked list in order.\n        root = self.__root\n        curr = root.next\n        while curr is not root:\n            yield curr.key\n            curr = curr.next\n\n    def __reversed__(self):\n        'od.__reversed__() <==> reversed(od)'\n        # Traverse the linked list in reverse order.\n        root = self.__root\n        curr = root.prev\n        while curr is not root:\n            yield curr.key\n            curr = curr.prev\n\n    def clear(self):\n        'od.clear() -> None.  Remove all items from od.'\n        root = self.__root\n        root.prev = root.next = root\n        self.__map.clear()\n        dict.clear(self)\n\n    def popitem(self, last=True):\n        '''Remove and return a (key, value) pair from the dictionary.\n\n        Pairs are returned in LIFO order if last is true or FIFO order if false.\n        '''\n        if not self:\n            raise KeyError('dictionary is empty')\n        root = self.__root\n        if last:\n            link = root.prev\n            link_prev = link.prev\n            link_prev.next = root\n            root.prev = link_prev\n        else:\n            link = root.next\n            link_next = link.next\n            root.next = link_next\n            link_next.prev = root\n        key = link.key\n        del self.__map[key]\n        value = dict.pop(self, key)\n        return key, value\n\n    def move_to_end(self, key, last=True):\n        '''Move an existing element to the end (or beginning if last is false).\n\n        Raise KeyError if the element does not exist.\n        '''\n        link = self.__map[key]\n        link_prev = link.prev\n        link_next = link.next\n        soft_link = link_next.prev\n        link_prev.next = link_next\n        link_next.prev = link_prev\n        root = self.__root\n        if last:\n            last = root.prev\n            link.prev = last\n            link.next = root\n            root.prev = soft_link\n            last.next = link\n        else:\n            first = root.next\n            link.prev = root\n            link.next = first\n            first.prev = soft_link\n            root.next = link\n\n    def __sizeof__(self):\n        sizeof = _sys.getsizeof\n        n = len(self) + 1                       # number of links including root\n        size = sizeof(self.__dict__)            # instance dictionary\n        size += sizeof(self.__map) * 2          # internal dict and inherited dict\n        size += sizeof(self.__hardroot) * n     # link objects\n        size += sizeof(self.__root) * n         # proxy objects\n        return size\n\n    update = __update = _collections_abc.MutableMapping.update\n\n    def keys(self):\n        \"D.keys() -> a set-like object providing a view on D's keys\"\n        return _OrderedDictKeysView(self)\n\n    def items(self):\n        \"D.items() -> a set-like object providing a view on D's items\"\n        return _OrderedDictItemsView(self)\n\n    def values(self):\n        \"D.values() -> an object providing a view on D's values\"\n        return _OrderedDictValuesView(self)\n\n    __ne__ = _collections_abc.MutableMapping.__ne__\n\n    __marker = object()\n\n    def pop(self, key, default=__marker):\n        '''od.pop(k[,d]) -> v, remove specified key and return the corresponding\n        value.  If key is not found, d is returned if given, otherwise KeyError\n        is raised.\n\n        '''\n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n\n    def setdefault(self, key, default=None):\n        '''Insert key with a value of default if key is not in the dictionary.\n\n        Return the value for key if key is in the dictionary, else default.\n        '''\n        if key in self:\n            return self[key]\n        self[key] = default\n        return default\n\n    @_recursive_repr()\n    def __repr__(self):\n        'od.__repr__() <==> repr(od)'\n        if not self:\n            return '%s()' % (self.__class__.__name__,)\n        return '%s(%r)' % (self.__class__.__name__, list(self.items()))\n\n    def __reduce__(self):\n        'Return state information for pickling'\n        inst_dict = vars(self).copy()\n        for k in vars(OrderedDict()):\n            inst_dict.pop(k, None)\n        return self.__class__, (), inst_dict or None, None, iter(self.items())\n\n    def copy(self):\n        'od.copy() -> a shallow copy of od'\n        return self.__class__(self)\n\n    @classmethod\n    def fromkeys(cls, iterable, value=None):\n        '''Create a new ordered dictionary with keys from iterable and values set to value.\n        '''\n        self = cls()\n        for key in iterable:\n            self[key] = value\n        return self\n\n    def __eq__(self, other):\n        '''od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive\n        while comparison to a regular mapping is order-insensitive.\n\n        '''\n        if isinstance(other, OrderedDict):\n            return dict.__eq__(self, other) and all(map(_eq, self, other))\n        return dict.__eq__(self, other)\n\n    def __ior__(self, other):\n        self.update(other)\n        return self\n\n    def __or__(self, other):\n        if not isinstance(other, dict):\n            return NotImplemented\n        new = self.__class__(self)\n        new.update(other)\n        return new\n\n    def __ror__(self, other):\n        if not isinstance(other, dict):\n            return NotImplemented\n        new = self.__class__(other)\n        new.update(self)\n        return new\n\n\ntry:\n    from _collections import OrderedDict\nexcept ImportError:\n    # Leave the pure Python version in place.\n    pass\n\n\n################################################################################\n### namedtuple\n################################################################################\n\ntry:\n    from _collections import _tuplegetter\nexcept ImportError:\n    _tuplegetter = lambda index, doc: property(_itemgetter(index), doc=doc)\n\ndef namedtuple(typename, field_names, *, rename=False, defaults=None, module=None):\n    \"\"\"Returns a new subclass of tuple with named fields.\n\n    >>> Point = namedtuple('Point', ['x', 'y'])\n    >>> Point.__doc__                   # docstring for the new class\n    'Point(x, y)'\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\n    >>> p[0] + p[1]                     # indexable like a plain tuple\n    33\n    >>> x, y = p                        # unpack like a regular tuple\n    >>> x, y\n    (11, 22)\n    >>> p.x + p.y                       # fields also accessible by name\n    33\n    >>> d = p._asdict()                 # convert to a dictionary\n    >>> d['x']\n    11\n    >>> Point(**d)                      # convert from a dictionary\n    Point(x=11, y=22)\n    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\n    Point(x=100, y=22)\n\n    \"\"\"\n\n    # Validate the field names.  At the user's option, either generate an error\n    # message or automatically replace the field name with a valid name.\n    if isinstance(field_names, str):\n        field_names = field_names.replace(',', ' ').split()\n    field_names = list(map(str, field_names))\n    typename = _sys.intern(str(typename))\n\n    if rename:\n        seen = set()\n        for index, name in enumerate(field_names):\n            if (not name.isidentifier()\n                or _iskeyword(name)\n                or name.startswith('_')\n                or name in seen):\n                field_names[index] = f'_{index}'\n            seen.add(name)\n\n    for name in [typename] + field_names:\n        if type(name) is not str:\n            raise TypeError('Type names and field names must be strings')\n        if not name.isidentifier():\n            raise ValueError('Type names and field names must be valid '\n                             f'identifiers: {name!r}')\n        if _iskeyword(name):\n            raise ValueError('Type names and field names cannot be a '\n                             f'keyword: {name!r}')\n\n    seen = set()\n    for name in field_names:\n        if name.startswith('_') and not rename:\n            raise ValueError('Field names cannot start with an underscore: '\n                             f'{name!r}')\n        if name in seen:\n            raise ValueError(f'Encountered duplicate field name: {name!r}')\n        seen.add(name)\n\n    field_defaults = {}\n    if defaults is not None:\n        defaults = tuple(defaults)\n        if len(defaults) > len(field_names):\n            raise TypeError('Got more default values than field names')\n        field_defaults = dict(reversed(list(zip(reversed(field_names),\n                                                reversed(defaults)))))\n\n    # Variables used in the methods and docstrings\n    field_names = tuple(map(_sys.intern, field_names))\n    num_fields = len(field_names)\n    arg_list = ', '.join(field_names)\n    if num_fields == 1:\n        arg_list += ','\n    repr_fmt = '(' + ', '.join(f'{name}=%r' for name in field_names) + ')'\n    tuple_new = tuple.__new__\n    _dict, _tuple, _len, _map, _zip = dict, tuple, len, map, zip\n\n    # Create all the named tuple methods to be added to the class namespace\n\n    namespace = {\n        '_tuple_new': tuple_new,\n        '__builtins__': {},\n        '__name__': f'namedtuple_{typename}',\n    }\n    code = f'lambda _cls, {arg_list}: _tuple_new(_cls, ({arg_list}))'\n    __new__ = eval(code, namespace)\n    __new__.__name__ = '__new__'\n    __new__.__doc__ = f'Create new instance of {typename}({arg_list})'\n    if defaults is not None:\n        __new__.__defaults__ = defaults\n\n    @classmethod\n    def _make(cls, iterable):\n        result = tuple_new(cls, iterable)\n        if _len(result) != num_fields:\n            raise TypeError(f'Expected {num_fields} arguments, got {len(result)}')\n        return result\n\n    _make.__func__.__doc__ = (f'Make a new {typename} object from a sequence '\n                              'or iterable')\n\n    def _replace(self, /, **kwds):\n        result = self._make(_map(kwds.pop, field_names, self))\n        if kwds:\n            raise ValueError(f'Got unexpected field names: {list(kwds)!r}')\n        return result\n\n    _replace.__doc__ = (f'Return a new {typename} object replacing specified '\n                        'fields with new values')\n\n    def __repr__(self):\n        'Return a nicely formatted representation string'\n        return self.__class__.__name__ + repr_fmt % self\n\n    def _asdict(self):\n        'Return a new dict which maps field names to their values.'\n        return _dict(_zip(self._fields, self))\n\n    def __getnewargs__(self):\n        'Return self as a plain tuple.  Used by copy and pickle.'\n        return _tuple(self)\n\n    # Modify function metadata to help with introspection and debugging\n    for method in (\n        __new__,\n        _make.__func__,\n        _replace,\n        __repr__,\n        _asdict,\n        __getnewargs__,\n    ):\n        method.__qualname__ = f'{typename}.{method.__name__}'\n\n    # Build-up the class namespace dictionary\n    # and use type() to build the result class\n    class_namespace = {\n        '__doc__': f'{typename}({arg_list})',\n        '__slots__': (),\n        '_fields': field_names,\n        '_field_defaults': field_defaults,\n        '__new__': __new__,\n        '_make': _make,\n        '_replace': _replace,\n        '__repr__': __repr__,\n        '_asdict': _asdict,\n        '__getnewargs__': __getnewargs__,\n    }\n    for index, name in enumerate(field_names):\n        doc = _sys.intern(f'Alias for field number {index}')\n        class_namespace[name] = _tuplegetter(index, doc)\n\n    result = type(typename, (tuple,), class_namespace)\n\n    # For pickling to work, the __module__ variable needs to be set to the frame\n    # where the named tuple is created.  Bypass this step in environments where\n    # sys._getframe is not defined (Jython for example) or sys._getframe is not\n    # defined for arguments greater than 0 (IronPython), or where the user has\n    # specified a particular module.\n    if module is None:\n        try:\n            module = _sys._getframe(1).f_globals.get('__name__', '__main__')\n        except (AttributeError, ValueError):\n            pass\n    if module is not None:\n        result.__module__ = module\n\n    return result\n\n\n########################################################################\n###  Counter\n########################################################################\n\ndef _count_elements(mapping, iterable):\n    'Tally elements from the iterable.'\n    mapping_get = mapping.get\n    for elem in iterable:\n        mapping[elem] = mapping_get(elem, 0) + 1\n\ntry:                                    # Load C helper function if available\n    from _collections import _count_elements\nexcept ImportError:\n    pass\n\nclass Counter(dict):\n    '''Dict subclass for counting hashable items.  Sometimes called a bag\n    or multiset.  Elements are stored as dictionary keys and their counts\n    are stored as dictionary values.\n\n    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n\n    >>> c.most_common(3)                # three most common elements\n    [('a', 5), ('b', 4), ('c', 3)]\n    >>> sorted(c)                       # list all unique elements\n    ['a', 'b', 'c', 'd', 'e']\n    >>> ''.join(sorted(c.elements()))   # list elements with repetitions\n    'aaaaabbbbcccdde'\n    >>> sum(c.values())                 # total of all counts\n    15\n\n    >>> c['a']                          # count of letter 'a'\n    5\n    >>> for elem in 'shazam':           # update counts from an iterable\n    ...     c[elem] += 1                # by adding 1 to each element's count\n    >>> c['a']                          # now there are seven 'a'\n    7\n    >>> del c['b']                      # remove all 'b'\n    >>> c['b']                          # now there are zero 'b'\n    0\n\n    >>> d = Counter('simsalabim')       # make another counter\n    >>> c.update(d)                     # add in the second counter\n    >>> c['a']                          # now there are nine 'a'\n    9\n\n    >>> c.clear()                       # empty the counter\n    >>> c\n    Counter()\n\n    Note:  If a count is set to zero or reduced to zero, it will remain\n    in the counter until the entry is deleted or the counter is cleared:\n\n    >>> c = Counter('aaabbc')\n    >>> c['b'] -= 2                     # reduce the count of 'b' by two\n    >>> c.most_common()                 # 'b' is still in, but its count is zero\n    [('a', 3), ('c', 1), ('b', 0)]\n\n    '''\n    # References:\n    #   http://en.wikipedia.org/wiki/Multiset\n    #   http://www.gnu.org/software/smalltalk/manual-base/html_node/Bag.html\n    #   http://www.demo2s.com/Tutorial/Cpp/0380__set-multiset/Catalog0380__set-multiset.htm\n    #   http://code.activestate.com/recipes/259174/\n    #   Knuth, TAOCP Vol. II section 4.6.3\n\n    def __init__(self, iterable=None, /, **kwds):\n        '''Create a new, empty Counter object.  And if given, count elements\n        from an input iterable.  Or, initialize the count from another mapping\n        of elements to their counts.\n\n        >>> c = Counter()                           # a new, empty counter\n        >>> c = Counter('gallahad')                 # a new counter from an iterable\n        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping\n        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args\n\n        '''\n        super().__init__()\n        self.update(iterable, **kwds)\n\n    def __missing__(self, key):\n        'The count of elements not in the Counter is zero.'\n        # Needed so that self[missing_item] does not raise KeyError\n        return 0\n\n    def most_common(self, n=None):\n        '''List the n most common elements and their counts from the most\n        common to the least.  If n is None, then list all element counts.\n\n        >>> Counter('abracadabra').most_common(3)\n        [('a', 5), ('b', 2), ('r', 2)]\n\n        '''\n        # Emulate Bag.sortedByCount from Smalltalk\n        if n is None:\n            return sorted(self.items(), key=_itemgetter(1), reverse=True)\n        return _heapq.nlargest(n, self.items(), key=_itemgetter(1))\n\n    def elements(self):\n        '''Iterator over elements repeating each as many times as its count.\n\n        >>> c = Counter('ABCABC')\n        >>> sorted(c.elements())\n        ['A', 'A', 'B', 'B', 'C', 'C']\n\n        # Knuth's example for prime factors of 1836:  2**2 * 3**3 * 17**1\n        >>> prime_factors = Counter({2: 2, 3: 3, 17: 1})\n        >>> product = 1\n        >>> for factor in prime_factors.elements():     # loop over factors\n        ...     product *= factor                       # and multiply them\n        >>> product\n        1836\n\n        Note, if an element's count has been set to zero or is a negative\n        number, elements() will ignore it.\n\n        '''\n        # Emulate Bag.do from Smalltalk and Multiset.begin from C++.\n        return _chain.from_iterable(_starmap(_repeat, self.items()))\n\n    # Override dict methods where necessary\n\n    @classmethod\n    def fromkeys(cls, iterable, v=None):\n        # There is no equivalent method for counters because the semantics\n        # would be ambiguous in cases such as Counter.fromkeys('aaabbc', v=2).\n        # Initializing counters to zero values isn't necessary because zero\n        # is already the default value for counter lookups.  Initializing\n        # to one is easily accomplished with Counter(set(iterable)).  For\n        # more exotic cases, create a dictionary first using a dictionary\n        # comprehension or dict.fromkeys().\n        raise NotImplementedError(\n            'Counter.fromkeys() is undefined.  Use Counter(iterable) instead.')\n\n    def update(self, iterable=None, /, **kwds):\n        '''Like dict.update() but add counts instead of replacing them.\n\n        Source can be an iterable, a dictionary, or another Counter instance.\n\n        >>> c = Counter('which')\n        >>> c.update('witch')           # add elements from another iterable\n        >>> d = Counter('watch')\n        >>> c.update(d)                 # add elements from another counter\n        >>> c['h']                      # four 'h' in which, witch, and watch\n        4\n\n        '''\n        # The regular dict.update() operation makes no sense here because the\n        # replace behavior results in the some of original untouched counts\n        # being mixed-in with all of the other counts for a mismash that\n        # doesn't have a straight-forward interpretation in most counting\n        # contexts.  Instead, we implement straight-addition.  Both the inputs\n        # and outputs are allowed to contain zero and negative counts.\n\n        if iterable is not None:\n            if isinstance(iterable, _collections_abc.Mapping):\n                if self:\n                    self_get = self.get\n                    for elem, count in iterable.items():\n                        self[elem] = count + self_get(elem, 0)\n                else:\n                    # fast path when counter is empty\n                    super().update(iterable)\n            else:\n                _count_elements(self, iterable)\n        if kwds:\n            self.update(kwds)\n\n    def subtract(self, iterable=None, /, **kwds):\n        '''Like dict.update() but subtracts counts instead of replacing them.\n        Counts can be reduced below zero.  Both the inputs and outputs are\n        allowed to contain zero and negative counts.\n\n        Source can be an iterable, a dictionary, or another Counter instance.\n\n        >>> c = Counter('which')\n        >>> c.subtract('witch')             # subtract elements from another iterable\n        >>> c.subtract(Counter('watch'))    # subtract elements from another counter\n        >>> c['h']                          # 2 in which, minus 1 in witch, minus 1 in watch\n        0\n        >>> c['w']                          # 1 in which, minus 1 in witch, minus 1 in watch\n        -1\n\n        '''\n        if iterable is not None:\n            self_get = self.get\n            if isinstance(iterable, _collections_abc.Mapping):\n                for elem, count in iterable.items():\n                    self[elem] = self_get(elem, 0) - count\n            else:\n                for elem in iterable:\n                    self[elem] = self_get(elem, 0) - 1\n        if kwds:\n            self.subtract(kwds)\n\n    def copy(self):\n        'Return a shallow copy.'\n        return self.__class__(self)\n\n    def __reduce__(self):\n        return self.__class__, (dict(self),)\n\n    def __delitem__(self, elem):\n        'Like dict.__delitem__() but does not raise KeyError for missing values.'\n        if elem in self:\n            super().__delitem__(elem)\n\n    def __repr__(self):\n        if not self:\n            return f'{self.__class__.__name__}()'\n        try:\n            # dict() preserves the ordering returned by most_common()\n            d = dict(self.most_common())\n        except TypeError:\n            # handle case where values are not orderable\n            d = dict(self)\n        return f'{self.__class__.__name__}({d!r})'\n\n    # Multiset-style mathematical operations discussed in:\n    #       Knuth TAOCP Volume II section 4.6.3 exercise 19\n    #       and at http://en.wikipedia.org/wiki/Multiset\n    #\n    # Outputs guaranteed to only include positive counts.\n    #\n    # To strip negative and zero counts, add-in an empty counter:\n    #       c += Counter()\n    #\n    # Rich comparison operators for multiset subset and superset tests\n    # are deliberately omitted due to semantic conflicts with the\n    # existing inherited dict equality method.  Subset and superset\n    # semantics ignore zero counts and require that p\u2264q \u2227 p\u2265q \u2192 p=q;\n    # however, that would not be the case for p=Counter(a=1, b=0)\n    # and q=Counter(a=1) where the dictionaries are not equal.\n\n    def __add__(self, other):\n        '''Add counts from two counters.\n\n        >>> Counter('abbb') + Counter('bcc')\n        Counter({'b': 4, 'c': 2, 'a': 1})\n\n        '''\n        if not isinstance(other, Counter):\n            return NotImplemented\n        result = Counter()\n        for elem, count in self.items():\n            newcount = count + other[elem]\n            if newcount > 0:\n                result[elem] = newcount\n        for elem, count in other.items():\n            if elem not in self and count > 0:\n                result[elem] = count\n        return result\n\n    def __sub__(self, other):\n        ''' Subtract count, but keep only results with positive counts.\n\n        >>> Counter('abbbc') - Counter('bccd')\n        Counter({'b': 2, 'a': 1})\n\n        '''\n        if not isinstance(other, Counter):\n            return NotImplemented\n        result = Counter()\n        for elem, count in self.items():\n            newcount = count - other[elem]\n            if newcount > 0:\n                result[elem] = newcount\n        for elem, count in other.items():\n            if elem not in self and count < 0:\n                result[elem] = 0 - count\n        return result\n\n    def __or__(self, other):\n        '''Union is the maximum of value in either of the input counters.\n\n        >>> Counter('abbb') | Counter('bcc')\n        Counter({'b': 3, 'c': 2, 'a': 1})\n\n        '''\n        if not isinstance(other, Counter):\n            return NotImplemented\n        result = Counter()\n        for elem, count in self.items():\n            other_count = other[elem]\n            newcount = other_count if count < other_count else count\n            if newcount > 0:\n                result[elem] = newcount\n        for elem, count in other.items():\n            if elem not in self and count > 0:\n                result[elem] = count\n        return result\n\n    def __and__(self, other):\n        ''' Intersection is the minimum of corresponding counts.\n\n        >>> Counter('abbb') & Counter('bcc')\n        Counter({'b': 1})\n\n        '''\n        if not isinstance(other, Counter):\n            return NotImplemented\n        result = Counter()\n        for elem, count in self.items():\n            other_count = other[elem]\n            newcount = count if count < other_count else other_count\n            if newcount > 0:\n                result[elem] = newcount\n        return result\n\n    def __pos__(self):\n        'Adds an empty counter, effectively stripping negative and zero counts'\n        result = Counter()\n        for elem, count in self.items():\n            if count > 0:\n                result[elem] = count\n        return result\n\n    def __neg__(self):\n        '''Subtracts from an empty counter.  Strips positive and zero counts,\n        and flips the sign on negative counts.\n\n        '''\n        result = Counter()\n        for elem, count in self.items():\n            if count < 0:\n                result[elem] = 0 - count\n        return result\n\n    def _keep_positive(self):\n        '''Internal method to strip elements with a negative or zero count'''\n        nonpositive = [elem for elem, count in self.items() if not count > 0]\n        for elem in nonpositive:\n            del self[elem]\n        return self\n\n    def __iadd__(self, other):\n        '''Inplace add from another counter, keeping only positive counts.\n\n        >>> c = Counter('abbb')\n        >>> c += Counter('bcc')\n        >>> c\n        Counter({'b': 4, 'c': 2, 'a': 1})\n\n        '''\n        for elem, count in other.items():\n            self[elem] += count\n        return self._keep_positive()\n\n    def __isub__(self, other):\n        '''Inplace subtract counter, but keep only results with positive counts.\n\n        >>> c = Counter('abbbc')\n        >>> c -= Counter('bccd')\n        >>> c\n        Counter({'b': 2, 'a': 1})\n\n        '''\n        for elem, count in other.items():\n            self[elem] -= count\n        return self._keep_positive()\n\n    def __ior__(self, other):\n        '''Inplace union is the maximum of value from either counter.\n\n        >>> c = Counter('abbb')\n        >>> c |= Counter('bcc')\n        >>> c\n        Counter({'b': 3, 'c': 2, 'a': 1})\n\n        '''\n        for elem, other_count in other.items():\n            count = self[elem]\n            if other_count > count:\n                self[elem] = other_count\n        return self._keep_positive()\n\n    def __iand__(self, other):\n        '''Inplace intersection is the minimum of corresponding counts.\n\n        >>> c = Counter('abbb')\n        >>> c &= Counter('bcc')\n        >>> c\n        Counter({'b': 1})\n\n        '''\n        for elem, count in self.items():\n            other_count = other[elem]\n            if other_count < count:\n                self[elem] = other_count\n        return self._keep_positive()\n\n\n########################################################################\n###  ChainMap\n########################################################################\n\nclass ChainMap(_collections_abc.MutableMapping):\n    ''' A ChainMap groups multiple dicts (or other mappings) together\n    to create a single, updateable view.\n\n    The underlying mappings are stored in a list.  That list is public and can\n    be accessed or updated using the *maps* attribute.  There is no other\n    state.\n\n    Lookups search the underlying mappings successively until a key is found.\n    In contrast, writes, updates, and deletions only operate on the first\n    mapping.\n\n    '''\n\n    def __init__(self, *maps):\n        '''Initialize a ChainMap by setting *maps* to the given mappings.\n        If no mappings are provided, a single empty dictionary is used.\n\n        '''\n        self.maps = list(maps) or [{}]          # always at least one map\n\n    def __missing__(self, key):\n        raise KeyError(key)\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n        return self.__missing__(key)            # support subclasses that define __missing__\n\n    def get(self, key, default=None):\n        return self[key] if key in self else default\n\n    def __len__(self):\n        return len(set().union(*self.maps))     # reuses stored hash values if possible\n\n    def __iter__(self):\n        d = {}\n        for mapping in reversed(self.maps):\n            d.update(dict.fromkeys(mapping))    # reuses stored hash values if possible\n        return iter(d)\n\n    def __contains__(self, key):\n        return any(key in m for m in self.maps)\n\n    def __bool__(self):\n        return any(self.maps)\n\n    @_recursive_repr()\n    def __repr__(self):\n        return f'{self.__class__.__name__}({\", \".join(map(repr, self.maps))})'\n\n    @classmethod\n    def fromkeys(cls, iterable, *args):\n        'Create a ChainMap with a single dict created from the iterable.'\n        return cls(dict.fromkeys(iterable, *args))\n\n    def copy(self):\n        'New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]'\n        return self.__class__(self.maps[0].copy(), *self.maps[1:])\n\n    __copy__ = copy\n\n    def new_child(self, m=None):                # like Django's Context.push()\n        '''New ChainMap with a new map followed by all previous maps.\n        If no map is provided, an empty dict is used.\n        '''\n        if m is None:\n            m = {}\n        return self.__class__(m, *self.maps)\n\n    @property\n    def parents(self):                          # like Django's Context.pop()\n        'New ChainMap from maps[1:].'\n        return self.__class__(*self.maps[1:])\n\n    def __setitem__(self, key, value):\n        self.maps[0][key] = value\n\n    def __delitem__(self, key):\n        try:\n            del self.maps[0][key]\n        except KeyError:\n            raise KeyError(f'Key not found in the first mapping: {key!r}')\n\n    def popitem(self):\n        'Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.'\n        try:\n            return self.maps[0].popitem()\n        except KeyError:\n            raise KeyError('No keys found in the first mapping.')\n\n    def pop(self, key, *args):\n        'Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0].'\n        try:\n            return self.maps[0].pop(key, *args)\n        except KeyError:\n            raise KeyError(f'Key not found in the first mapping: {key!r}')\n\n    def clear(self):\n        'Clear maps[0], leaving maps[1:] intact.'\n        self.maps[0].clear()\n\n    def __ior__(self, other):\n        self.maps[0].update(other)\n        return self\n\n    def __or__(self, other):\n        if not isinstance(other, _collections_abc.Mapping):\n            return NotImplemented\n        m = self.copy()\n        m.maps[0].update(other)\n        return m\n\n    def __ror__(self, other):\n        if not isinstance(other, _collections_abc.Mapping):\n            return NotImplemented\n        m = dict(other)\n        for child in reversed(self.maps):\n            m.update(child)\n        return self.__class__(m)\n\n\n################################################################################\n### UserDict\n################################################################################\n\nclass UserDict(_collections_abc.MutableMapping):\n\n    # Start by filling-out the abstract methods\n    def __init__(self, dict=None, /, **kwargs):\n        self.data = {}\n        if dict is not None:\n            self.update(dict)\n        if kwargs:\n            self.update(kwargs)\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, key):\n        if key in self.data:\n            return self.data[key]\n        if hasattr(self.__class__, \"__missing__\"):\n            return self.__class__.__missing__(self, key)\n        raise KeyError(key)\n\n    def __setitem__(self, key, item):\n        self.data[key] = item\n\n    def __delitem__(self, key):\n        del self.data[key]\n\n    def __iter__(self):\n        return iter(self.data)\n\n    # Modify __contains__ to work correctly when __missing__ is present\n    def __contains__(self, key):\n        return key in self.data\n\n    # Now, add the methods in dicts but not in MutableMapping\n    def __repr__(self):\n        return repr(self.data)\n\n    def __or__(self, other):\n        if isinstance(other, UserDict):\n            return self.__class__(self.data | other.data)\n        if isinstance(other, dict):\n            return self.__class__(self.data | other)\n        return NotImplemented\n\n    def __ror__(self, other):\n        if isinstance(other, UserDict):\n            return self.__class__(other.data | self.data)\n        if isinstance(other, dict):\n            return self.__class__(other | self.data)\n        return NotImplemented\n\n    def __ior__(self, other):\n        if isinstance(other, UserDict):\n            self.data |= other.data\n        else:\n            self.data |= other\n        return self\n\n    def __copy__(self):\n        inst = self.__class__.__new__(self.__class__)\n        inst.__dict__.update(self.__dict__)\n        # Create a copy and avoid triggering descriptors\n        inst.__dict__[\"data\"] = self.__dict__[\"data\"].copy()\n        return inst\n\n    def copy(self):\n        if self.__class__ is UserDict:\n            return UserDict(self.data.copy())\n        import copy\n        data = self.data\n        try:\n            self.data = {}\n            c = copy.copy(self)\n        finally:\n            self.data = data\n        c.update(self)\n        return c\n\n    @classmethod\n    def fromkeys(cls, iterable, value=None):\n        d = cls()\n        for key in iterable:\n            d[key] = value\n        return d\n\n\n################################################################################\n### UserList\n################################################################################\n\nclass UserList(_collections_abc.MutableSequence):\n    \"\"\"A more or less complete user-defined wrapper around list objects.\"\"\"\n\n    def __init__(self, initlist=None):\n        self.data = []\n        if initlist is not None:\n            # XXX should this accept an arbitrary sequence?\n            if type(initlist) == type(self.data):\n                self.data[:] = initlist\n            elif isinstance(initlist, UserList):\n                self.data[:] = initlist.data[:]\n            else:\n                self.data = list(initlist)\n\n    def __repr__(self):\n        return repr(self.data)\n\n    def __lt__(self, other):\n        return self.data < self.__cast(other)\n\n    def __le__(self, other):\n        return self.data <= self.__cast(other)\n\n    def __eq__(self, other):\n        return self.data == self.__cast(other)\n\n    def __gt__(self, other):\n        return self.data > self.__cast(other)\n\n    def __ge__(self, other):\n        return self.data >= self.__cast(other)\n\n    def __cast(self, other):\n        return other.data if isinstance(other, UserList) else other\n\n    def __contains__(self, item):\n        return item in self.data\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, i):\n        if isinstance(i, slice):\n            return self.__class__(self.data[i])\n        else:\n            return self.data[i]\n\n    def __setitem__(self, i, item):\n        self.data[i] = item\n\n    def __delitem__(self, i):\n        del self.data[i]\n\n    def __add__(self, other):\n        if isinstance(other, UserList):\n            return self.__class__(self.data + other.data)\n        elif isinstance(other, type(self.data)):\n            return self.__class__(self.data + other)\n        return self.__class__(self.data + list(other))\n\n    def __radd__(self, other):\n        if isinstance(other, UserList):\n            return self.__class__(other.data + self.data)\n        elif isinstance(other, type(self.data)):\n            return self.__class__(other + self.data)\n        return self.__class__(list(other) + self.data)\n\n    def __iadd__(self, other):\n        if isinstance(other, UserList):\n            self.data += other.data\n        elif isinstance(other, type(self.data)):\n            self.data += other\n        else:\n            self.data += list(other)\n        return self\n\n    def __mul__(self, n):\n        return self.__class__(self.data * n)\n\n    __rmul__ = __mul__\n\n    def __imul__(self, n):\n        self.data *= n\n        return self\n\n    def __copy__(self):\n        inst = self.__class__.__new__(self.__class__)\n        inst.__dict__.update(self.__dict__)\n        # Create a copy and avoid triggering descriptors\n        inst.__dict__[\"data\"] = self.__dict__[\"data\"][:]\n        return inst\n\n    def append(self, item):\n        self.data.append(item)\n\n    def insert(self, i, item):\n        self.data.insert(i, item)\n\n    def pop(self, i=-1):\n        return self.data.pop(i)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def clear(self):\n        self.data.clear()\n\n    def copy(self):\n        return self.__class__(self)\n\n    def count(self, item):\n        return self.data.count(item)\n\n    def index(self, item, *args):\n        return self.data.index(item, *args)\n\n    def reverse(self):\n        self.data.reverse()\n\n    def sort(self, /, *args, **kwds):\n        self.data.sort(*args, **kwds)\n\n    def extend(self, other):\n        if isinstance(other, UserList):\n            self.data.extend(other.data)\n        else:\n            self.data.extend(other)\n\n\n################################################################################\n### UserString\n################################################################################\n\nclass UserString(_collections_abc.Sequence):\n\n    def __init__(self, seq):\n        if isinstance(seq, str):\n            self.data = seq\n        elif isinstance(seq, UserString):\n            self.data = seq.data[:]\n        else:\n            self.data = str(seq)\n\n    def __str__(self):\n        return str(self.data)\n\n    def __repr__(self):\n        return repr(self.data)\n\n    def __int__(self):\n        return int(self.data)\n\n    def __float__(self):\n        return float(self.data)\n\n    def __complex__(self):\n        return complex(self.data)\n\n    def __hash__(self):\n        return hash(self.data)\n\n    def __getnewargs__(self):\n        return (self.data[:],)\n\n    def __eq__(self, string):\n        if isinstance(string, UserString):\n            return self.data == string.data\n        return self.data == string\n\n    def __lt__(self, string):\n        if isinstance(string, UserString):\n            return self.data < string.data\n        return self.data < string\n\n    def __le__(self, string):\n        if isinstance(string, UserString):\n            return self.data <= string.data\n        return self.data <= string\n\n    def __gt__(self, string):\n        if isinstance(string, UserString):\n            return self.data > string.data\n        return self.data > string\n\n    def __ge__(self, string):\n        if isinstance(string, UserString):\n            return self.data >= string.data\n        return self.data >= string\n\n    def __contains__(self, char):\n        if isinstance(char, UserString):\n            char = char.data\n        return char in self.data\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, index):\n        return self.__class__(self.data[index])\n\n    def __add__(self, other):\n        if isinstance(other, UserString):\n            return self.__class__(self.data + other.data)\n        elif isinstance(other, str):\n            return self.__class__(self.data + other)\n        return self.__class__(self.data + str(other))\n\n    def __radd__(self, other):\n        if isinstance(other, str):\n            return self.__class__(other + self.data)\n        return self.__class__(str(other) + self.data)\n\n    def __mul__(self, n):\n        return self.__class__(self.data * n)\n\n    __rmul__ = __mul__\n\n    def __mod__(self, args):\n        return self.__class__(self.data % args)\n\n    def __rmod__(self, template):\n        return self.__class__(str(template) % self)\n\n    # the following methods are defined in alphabetical order:\n    def capitalize(self):\n        return self.__class__(self.data.capitalize())\n\n    def casefold(self):\n        return self.__class__(self.data.casefold())\n\n    def center(self, width, *args):\n        return self.__class__(self.data.center(width, *args))\n\n    def count(self, sub, start=0, end=_sys.maxsize):\n        if isinstance(sub, UserString):\n            sub = sub.data\n        return self.data.count(sub, start, end)\n\n    def removeprefix(self, prefix, /):\n        if isinstance(prefix, UserString):\n            prefix = prefix.data\n        return self.__class__(self.data.removeprefix(prefix))\n\n    def removesuffix(self, suffix, /):\n        if isinstance(suffix, UserString):\n            suffix = suffix.data\n        return self.__class__(self.data.removesuffix(suffix))\n\n    def encode(self, encoding='utf-8', errors='strict'):\n        encoding = 'utf-8' if encoding is None else encoding\n        errors = 'strict' if errors is None else errors\n        return self.data.encode(encoding, errors)\n\n    def endswith(self, suffix, start=0, end=_sys.maxsize):\n        return self.data.endswith(suffix, start, end)\n\n    def expandtabs(self, tabsize=8):\n        return self.__class__(self.data.expandtabs(tabsize))\n\n    def find(self, sub, start=0, end=_sys.maxsize):\n        if isinstance(sub, UserString):\n            sub = sub.data\n        return self.data.find(sub, start, end)\n\n    def format(self, /, *args, **kwds):\n        return self.data.format(*args, **kwds)\n\n    def format_map(self, mapping):\n        return self.data.format_map(mapping)\n\n    def index(self, sub, start=0, end=_sys.maxsize):\n        return self.data.index(sub, start, end)\n\n    def isalpha(self):\n        return self.data.isalpha()\n\n    def isalnum(self):\n        return self.data.isalnum()\n\n    def isascii(self):\n        return self.data.isascii()\n\n    def isdecimal(self):\n        return self.data.isdecimal()\n\n    def isdigit(self):\n        return self.data.isdigit()\n\n    def isidentifier(self):\n        return self.data.isidentifier()\n\n    def islower(self):\n        return self.data.islower()\n\n    def isnumeric(self):\n        return self.data.isnumeric()\n\n    def isprintable(self):\n        return self.data.isprintable()\n\n    def isspace(self):\n        return self.data.isspace()\n\n    def istitle(self):\n        return self.data.istitle()\n\n    def isupper(self):\n        return self.data.isupper()\n\n    def join(self, seq):\n        return self.data.join(seq)\n\n    def ljust(self, width, *args):\n        return self.__class__(self.data.ljust(width, *args))\n\n    def lower(self):\n        return self.__class__(self.data.lower())\n\n    def lstrip(self, chars=None):\n        return self.__class__(self.data.lstrip(chars))\n\n    maketrans = str.maketrans\n\n    def partition(self, sep):\n        return self.data.partition(sep)\n\n    def replace(self, old, new, maxsplit=-1):\n        if isinstance(old, UserString):\n            old = old.data\n        if isinstance(new, UserString):\n            new = new.data\n        return self.__class__(self.data.replace(old, new, maxsplit))\n\n    def rfind(self, sub, start=0, end=_sys.maxsize):\n        if isinstance(sub, UserString):\n            sub = sub.data\n        return self.data.rfind(sub, start, end)\n\n    def rindex(self, sub, start=0, end=_sys.maxsize):\n        return self.data.rindex(sub, start, end)\n\n    def rjust(self, width, *args):\n        return self.__class__(self.data.rjust(width, *args))\n\n    def rpartition(self, sep):\n        return self.data.rpartition(sep)\n\n    def rstrip(self, chars=None):\n        return self.__class__(self.data.rstrip(chars))\n\n    def split(self, sep=None, maxsplit=-1):\n        return self.data.split(sep, maxsplit)\n\n    def rsplit(self, sep=None, maxsplit=-1):\n        return self.data.rsplit(sep, maxsplit)\n\n    def splitlines(self, keepends=False):\n        return self.data.splitlines(keepends)\n\n    def startswith(self, prefix, start=0, end=_sys.maxsize):\n        return self.data.startswith(prefix, start, end)\n\n    def strip(self, chars=None):\n        return self.__class__(self.data.strip(chars))\n\n    def swapcase(self):\n        return self.__class__(self.data.swapcase())\n\n    def title(self):\n        return self.__class__(self.data.title())\n\n    def translate(self, *args):\n        return self.__class__(self.data.translate(*args))\n\n    def upper(self):\n        return self.__class__(self.data.upper())\n\n    def zfill(self, width):\n        return self.__class__(self.data.zfill(width))\n", 1508], "/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py": ["\"\"\"Heap queue algorithm (a.k.a. priority queue).\n\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\nall k, counting elements from 0.  For the sake of comparison,\nnon-existing elements are considered to be infinite.  The interesting\nproperty of a heap is that a[0] is always its smallest element.\n\nUsage:\n\nheap = []            # creates an empty heap\nheappush(heap, item) # pushes a new item on the heap\nitem = heappop(heap) # pops the smallest item from the heap\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\n\nOur API differs from textbook heap algorithms as follows:\n\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n\n- Our heappop() method returns the smallest item, not the largest.\n\nThese two make it possible to view the heap as a regular Python list\nwithout surprises: heap[0] is the smallest item, and heap.sort()\nmaintains the heap invariant!\n\"\"\"\n\n# Original code by Kevin O'Connor, augmented by Tim Peters and Raymond Hettinger\n\n__about__ = \"\"\"Heap queues\n\n[explanation by Fran\u00e7ois Pinard]\n\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\nall k, counting elements from 0.  For the sake of comparison,\nnon-existing elements are considered to be infinite.  The interesting\nproperty of a heap is that a[0] is always its smallest element.\n\nThe strange invariant above is meant to be an efficient memory\nrepresentation for a tournament.  The numbers below are `k', not a[k]:\n\n                                   0\n\n                  1                                 2\n\n          3               4                5               6\n\n      7       8       9       10      11      12      13      14\n\n    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30\n\n\nIn the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In\na usual binary tournament we see in sports, each cell is the winner\nover the two cells it tops, and we can trace the winner down the tree\nto see all opponents s/he had.  However, in many computer applications\nof such tournaments, we do not need to trace the history of a winner.\nTo be more memory efficient, when a winner is promoted, we try to\nreplace it by something else at a lower level, and the rule becomes\nthat a cell and the two cells it tops contain three different items,\nbut the top cell \"wins\" over the two topped cells.\n\nIf this heap invariant is protected at all time, index 0 is clearly\nthe overall winner.  The simplest algorithmic way to remove it and\nfind the \"next\" winner is to move some loser (let's say cell 30 in the\ndiagram above) into the 0 position, and then percolate this new 0 down\nthe tree, exchanging values, until the invariant is re-established.\nThis is clearly logarithmic on the total number of items in the tree.\nBy iterating over all items, you get an O(n ln n) sort.\n\nA nice feature of this sort is that you can efficiently insert new\nitems while the sort is going on, provided that the inserted items are\nnot \"better\" than the last 0'th element you extracted.  This is\nespecially useful in simulation contexts, where the tree holds all\nincoming events, and the \"win\" condition means the smallest scheduled\ntime.  When an event schedule other events for execution, they are\nscheduled into the future, so they can easily go into the heap.  So, a\nheap is a good structure for implementing schedulers (this is what I\nused for my MIDI sequencer :-).\n\nVarious structures for implementing schedulers have been extensively\nstudied, and heaps are good for this, as they are reasonably speedy,\nthe speed is almost constant, and the worst case is not much different\nthan the average case.  However, there are other representations which\nare more efficient overall, yet the worst cases might be terrible.\n\nHeaps are also very useful in big disk sorts.  You most probably all\nknow that a big sort implies producing \"runs\" (which are pre-sorted\nsequences, which size is usually related to the amount of CPU memory),\nfollowed by a merging passes for these runs, which merging is often\nvery cleverly organised[1].  It is very important that the initial\nsort produces the longest runs possible.  Tournaments are a good way\nto that.  If, using all the memory available to hold a tournament, you\nreplace and percolate items that happen to fit the current run, you'll\nproduce runs which are twice the size of the memory for random input,\nand much better for input fuzzily ordered.\n\nMoreover, if you output the 0'th item on disk and get an input which\nmay not fit in the current tournament (because the value \"wins\" over\nthe last output value), it cannot fit in the heap, so the size of the\nheap decreases.  The freed memory could be cleverly reused immediately\nfor progressively building a second heap, which grows at exactly the\nsame rate the first heap is melting.  When the first heap completely\nvanishes, you switch heaps and start a new run.  Clever and quite\neffective!\n\nIn a word, heaps are useful memory structures to know.  I use them in\na few applications, and I think it is good to keep a `heap' module\naround. :-)\n\n--------------------\n[1] The disk balancing algorithms which are current, nowadays, are\nmore annoying than clever, and this is a consequence of the seeking\ncapabilities of the disks.  On devices which cannot seek, like big\ntape drives, the story was quite different, and one had to be very\nclever to ensure (far in advance) that each tape movement will be the\nmost effective possible (that is, will best participate at\n\"progressing\" the merge).  Some tapes were even able to read\nbackwards, and this was also used to avoid the rewinding time.\nBelieve me, real good tape sorts were quite spectacular to watch!\nFrom all times, sorting has always been a Great Art! :-)\n\"\"\"\n\n__all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge',\n           'nlargest', 'nsmallest', 'heappushpop']\n\ndef heappush(heap, item):\n    \"\"\"Push item onto heap, maintaining the heap invariant.\"\"\"\n    heap.append(item)\n    _siftdown(heap, 0, len(heap)-1)\n\ndef heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt\n        _siftup(heap, 0)\n        return returnitem\n    return lastelt\n\ndef heapreplace(heap, item):\n    \"\"\"Pop and return the current smallest value, and add the new item.\n\n    This is more efficient than heappop() followed by heappush(), and can be\n    more appropriate when using a fixed-size heap.  Note that the value\n    returned may be larger than item!  That constrains reasonable uses of\n    this routine unless written as part of a conditional replacement:\n\n        if item > heap[0]:\n            item = heapreplace(heap, item)\n    \"\"\"\n    returnitem = heap[0]    # raises appropriate IndexError if heap is empty\n    heap[0] = item\n    _siftup(heap, 0)\n    return returnitem\n\ndef heappushpop(heap, item):\n    \"\"\"Fast version of a heappush followed by a heappop.\"\"\"\n    if heap and heap[0] < item:\n        item, heap[0] = heap[0], item\n        _siftup(heap, 0)\n    return item\n\ndef heapify(x):\n    \"\"\"Transform list into a heap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    # Transform bottom-up.  The largest index there's any point to looking at\n    # is the largest with a child index in-range, so must have 2*i + 1 < n,\n    # or i < (n-1)/2.  If n is even = 2*j, this is (2*j-1)/2 = j-1/2 so\n    # j-1 is the largest, which is n//2 - 1.  If n is odd = 2*j+1, this is\n    # (2*j+1-1)/2 = j so j-1 is the largest, and that's again n//2-1.\n    for i in reversed(range(n//2)):\n        _siftup(x, i)\n\ndef _heappop_max(heap):\n    \"\"\"Maxheap version of a heappop.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt\n        _siftup_max(heap, 0)\n        return returnitem\n    return lastelt\n\ndef _heapreplace_max(heap, item):\n    \"\"\"Maxheap version of a heappop followed by a heappush.\"\"\"\n    returnitem = heap[0]    # raises appropriate IndexError if heap is empty\n    heap[0] = item\n    _siftup_max(heap, 0)\n    return returnitem\n\ndef _heapify_max(x):\n    \"\"\"Transform list into a maxheap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    for i in reversed(range(n//2)):\n        _siftup_max(x, i)\n\n# 'heap' is a heap at all indices >= startpos, except possibly for pos.  pos\n# is the index of a leaf with a possibly out-of-order value.  Restore the\n# heap invariant.\ndef _siftdown(heap, startpos, pos):\n    newitem = heap[pos]\n    # Follow the path to the root, moving parents down until finding a place\n    # newitem fits.\n    while pos > startpos:\n        parentpos = (pos - 1) >> 1\n        parent = heap[parentpos]\n        if newitem < parent:\n            heap[pos] = parent\n            pos = parentpos\n            continue\n        break\n    heap[pos] = newitem\n\n# The child indices of heap index pos are already heaps, and we want to make\n# a heap at index pos too.  We do this by bubbling the smaller child of\n# pos up (and so on with that child's children, etc) until hitting a leaf,\n# then using _siftdown to move the oddball originally at index pos into place.\n#\n# We *could* break out of the loop as soon as we find a pos where newitem <=\n# both its children, but turns out that's not a good idea, and despite that\n# many books write the algorithm that way.  During a heap pop, the last array\n# element is sifted in, and that tends to be large, so that comparing it\n# against values starting from the root usually doesn't pay (= usually doesn't\n# get us out of the loop early).  See Knuth, Volume 3, where this is\n# explained and quantified in an exercise.\n#\n# Cutting the # of comparisons is important, since these routines have no\n# way to extract \"the priority\" from an array element, so that intelligence\n# is likely to be hiding in custom comparison methods, or in array elements\n# storing (priority, record) tuples.  Comparisons are thus potentially\n# expensive.\n#\n# On random arrays of length 1000, making this change cut the number of\n# comparisons made by heapify() a little, and those made by exhaustive\n# heappop() a lot, in accord with theory.  Here are typical results from 3\n# runs (3 just to demonstrate how small the variance is):\n#\n# Compares needed by heapify     Compares needed by 1000 heappops\n# --------------------------     --------------------------------\n# 1837 cut to 1663               14996 cut to 8680\n# 1855 cut to 1659               14966 cut to 8678\n# 1847 cut to 1660               15024 cut to 8703\n#\n# Building the heap by using heappush() 1000 times instead required\n# 2198, 2148, and 2219 compares:  heapify() is more efficient, when\n# you can use it.\n#\n# The total compares needed by list.sort() on the same lists were 8627,\n# 8627, and 8632 (this should be compared to the sum of heapify() and\n# heappop() compares):  list.sort() is (unsurprisingly!) more efficient\n# for sorting.\n\ndef _siftup(heap, pos):\n    endpos = len(heap)\n    startpos = pos\n    newitem = heap[pos]\n    # Bubble up the smaller child until hitting a leaf.\n    childpos = 2*pos + 1    # leftmost child position\n    while childpos < endpos:\n        # Set childpos to index of smaller child.\n        rightpos = childpos + 1\n        if rightpos < endpos and not heap[childpos] < heap[rightpos]:\n            childpos = rightpos\n        # Move the smaller child up.\n        heap[pos] = heap[childpos]\n        pos = childpos\n        childpos = 2*pos + 1\n    # The leaf at pos is empty now.  Put newitem there, and bubble it up\n    # to its final resting place (by sifting its parents down).\n    heap[pos] = newitem\n    _siftdown(heap, startpos, pos)\n\ndef _siftdown_max(heap, startpos, pos):\n    'Maxheap variant of _siftdown'\n    newitem = heap[pos]\n    # Follow the path to the root, moving parents down until finding a place\n    # newitem fits.\n    while pos > startpos:\n        parentpos = (pos - 1) >> 1\n        parent = heap[parentpos]\n        if parent < newitem:\n            heap[pos] = parent\n            pos = parentpos\n            continue\n        break\n    heap[pos] = newitem\n\ndef _siftup_max(heap, pos):\n    'Maxheap variant of _siftup'\n    endpos = len(heap)\n    startpos = pos\n    newitem = heap[pos]\n    # Bubble up the larger child until hitting a leaf.\n    childpos = 2*pos + 1    # leftmost child position\n    while childpos < endpos:\n        # Set childpos to index of larger child.\n        rightpos = childpos + 1\n        if rightpos < endpos and not heap[rightpos] < heap[childpos]:\n            childpos = rightpos\n        # Move the larger child up.\n        heap[pos] = heap[childpos]\n        pos = childpos\n        childpos = 2*pos + 1\n    # The leaf at pos is empty now.  Put newitem there, and bubble it up\n    # to its final resting place (by sifting its parents down).\n    heap[pos] = newitem\n    _siftdown_max(heap, startpos, pos)\n\ndef merge(*iterables, key=None, reverse=False):\n    '''Merge multiple sorted inputs into a single sorted output.\n\n    Similar to sorted(itertools.chain(*iterables)) but returns a generator,\n    does not pull the data into memory all at once, and assumes that each of\n    the input streams is already sorted (smallest to largest).\n\n    >>> list(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))\n    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]\n\n    If *key* is not None, applies a key function to each element to determine\n    its sort order.\n\n    >>> list(merge(['dog', 'horse'], ['cat', 'fish', 'kangaroo'], key=len))\n    ['dog', 'cat', 'fish', 'horse', 'kangaroo']\n\n    '''\n\n    h = []\n    h_append = h.append\n\n    if reverse:\n        _heapify = _heapify_max\n        _heappop = _heappop_max\n        _heapreplace = _heapreplace_max\n        direction = -1\n    else:\n        _heapify = heapify\n        _heappop = heappop\n        _heapreplace = heapreplace\n        direction = 1\n\n    if key is None:\n        for order, it in enumerate(map(iter, iterables)):\n            try:\n                next = it.__next__\n                h_append([next(), order * direction, next])\n            except StopIteration:\n                pass\n        _heapify(h)\n        while len(h) > 1:\n            try:\n                while True:\n                    value, order, next = s = h[0]\n                    yield value\n                    s[0] = next()           # raises StopIteration when exhausted\n                    _heapreplace(h, s)      # restore heap condition\n            except StopIteration:\n                _heappop(h)                 # remove empty iterator\n        if h:\n            # fast case when only a single iterator remains\n            value, order, next = h[0]\n            yield value\n            yield from next.__self__\n        return\n\n    for order, it in enumerate(map(iter, iterables)):\n        try:\n            next = it.__next__\n            value = next()\n            h_append([key(value), order * direction, value, next])\n        except StopIteration:\n            pass\n    _heapify(h)\n    while len(h) > 1:\n        try:\n            while True:\n                key_value, order, value, next = s = h[0]\n                yield value\n                value = next()\n                s[0] = key(value)\n                s[2] = value\n                _heapreplace(h, s)\n        except StopIteration:\n            _heappop(h)\n    if h:\n        key_value, order, value, next = h[0]\n        yield value\n        yield from next.__self__\n\n\n# Algorithm notes for nlargest() and nsmallest()\n# ==============================================\n#\n# Make a single pass over the data while keeping the k most extreme values\n# in a heap.  Memory consumption is limited to keeping k values in a list.\n#\n# Measured performance for random inputs:\n#\n#                                   number of comparisons\n#    n inputs     k-extreme values  (average of 5 trials)   % more than min()\n# -------------   ----------------  ---------------------   -----------------\n#      1,000           100                  3,317               231.7%\n#     10,000           100                 14,046                40.5%\n#    100,000           100                105,749                 5.7%\n#  1,000,000           100              1,007,751                 0.8%\n# 10,000,000           100             10,009,401                 0.1%\n#\n# Theoretical number of comparisons for k smallest of n random inputs:\n#\n# Step   Comparisons                  Action\n# ----   --------------------------   ---------------------------\n#  1     1.66 * k                     heapify the first k-inputs\n#  2     n - k                        compare remaining elements to top of heap\n#  3     k * (1 + lg2(k)) * ln(n/k)   replace the topmost value on the heap\n#  4     k * lg2(k) - (k/2)           final sort of the k most extreme values\n#\n# Combining and simplifying for a rough estimate gives:\n#\n#        comparisons = n + k * (log(k, 2) * log(n/k) + log(k, 2) + log(n/k))\n#\n# Computing the number of comparisons for step 3:\n# -----------------------------------------------\n# * For the i-th new value from the iterable, the probability of being in the\n#   k most extreme values is k/i.  For example, the probability of the 101st\n#   value seen being in the 100 most extreme values is 100/101.\n# * If the value is a new extreme value, the cost of inserting it into the\n#   heap is 1 + log(k, 2).\n# * The probability times the cost gives:\n#            (k/i) * (1 + log(k, 2))\n# * Summing across the remaining n-k elements gives:\n#            sum((k/i) * (1 + log(k, 2)) for i in range(k+1, n+1))\n# * This reduces to:\n#            (H(n) - H(k)) * k * (1 + log(k, 2))\n# * Where H(n) is the n-th harmonic number estimated by:\n#            gamma = 0.5772156649\n#            H(n) = log(n, e) + gamma + 1 / (2 * n)\n#   http://en.wikipedia.org/wiki/Harmonic_series_(mathematics)#Rate_of_divergence\n# * Substituting the H(n) formula:\n#            comparisons = k * (1 + log(k, 2)) * (log(n/k, e) + (1/n - 1/k) / 2)\n#\n# Worst-case for step 3:\n# ----------------------\n# In the worst case, the input data is reversed sorted so that every new element\n# must be inserted in the heap:\n#\n#             comparisons = 1.66 * k + log(k, 2) * (n - k)\n#\n# Alternative Algorithms\n# ----------------------\n# Other algorithms were not used because they:\n# 1) Took much more auxiliary memory,\n# 2) Made multiple passes over the data.\n# 3) Made more comparisons in common cases (small k, large n, semi-random input).\n# See the more detailed comparison of approach at:\n# http://code.activestate.com/recipes/577573-compare-algorithms-for-heapqsmallest\n\ndef nsmallest(n, iterable, key=None):\n    \"\"\"Find the n smallest elements in a dataset.\n\n    Equivalent to:  sorted(iterable, key=key)[:n]\n    \"\"\"\n\n    # Short-cut for n==1 is to use min()\n    if n == 1:\n        it = iter(iterable)\n        sentinel = object()\n        result = min(it, default=sentinel, key=key)\n        return [] if result is sentinel else [result]\n\n    # When n>=size, it's faster to use sorted()\n    try:\n        size = len(iterable)\n    except (TypeError, AttributeError):\n        pass\n    else:\n        if n >= size:\n            return sorted(iterable, key=key)[:n]\n\n    # When key is none, use simpler decoration\n    if key is None:\n        it = iter(iterable)\n        # put the range(n) first so that zip() doesn't\n        # consume one too many elements from the iterator\n        result = [(elem, i) for i, elem in zip(range(n), it)]\n        if not result:\n            return result\n        _heapify_max(result)\n        top = result[0][0]\n        order = n\n        _heapreplace = _heapreplace_max\n        for elem in it:\n            if elem < top:\n                _heapreplace(result, (elem, order))\n                top, _order = result[0]\n                order += 1\n        result.sort()\n        return [elem for (elem, order) in result]\n\n    # General case, slowest method\n    it = iter(iterable)\n    result = [(key(elem), i, elem) for i, elem in zip(range(n), it)]\n    if not result:\n        return result\n    _heapify_max(result)\n    top = result[0][0]\n    order = n\n    _heapreplace = _heapreplace_max\n    for elem in it:\n        k = key(elem)\n        if k < top:\n            _heapreplace(result, (k, order, elem))\n            top, _order, _elem = result[0]\n            order += 1\n    result.sort()\n    return [elem for (k, order, elem) in result]\n\ndef nlargest(n, iterable, key=None):\n    \"\"\"Find the n largest elements in a dataset.\n\n    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]\n    \"\"\"\n\n    # Short-cut for n==1 is to use max()\n    if n == 1:\n        it = iter(iterable)\n        sentinel = object()\n        result = max(it, default=sentinel, key=key)\n        return [] if result is sentinel else [result]\n\n    # When n>=size, it's faster to use sorted()\n    try:\n        size = len(iterable)\n    except (TypeError, AttributeError):\n        pass\n    else:\n        if n >= size:\n            return sorted(iterable, key=key, reverse=True)[:n]\n\n    # When key is none, use simpler decoration\n    if key is None:\n        it = iter(iterable)\n        result = [(elem, i) for i, elem in zip(range(0, -n, -1), it)]\n        if not result:\n            return result\n        heapify(result)\n        top = result[0][0]\n        order = -n\n        _heapreplace = heapreplace\n        for elem in it:\n            if top < elem:\n                _heapreplace(result, (elem, order))\n                top, _order = result[0]\n                order -= 1\n        result.sort(reverse=True)\n        return [elem for (elem, order) in result]\n\n    # General case, slowest method\n    it = iter(iterable)\n    result = [(key(elem), i, elem) for i, elem in zip(range(0, -n, -1), it)]\n    if not result:\n        return result\n    heapify(result)\n    top = result[0][0]\n    order = -n\n    _heapreplace = heapreplace\n    for elem in it:\n        k = key(elem)\n        if top < k:\n            _heapreplace(result, (k, order, elem))\n            top, _order, _elem = result[0]\n            order -= 1\n    result.sort(reverse=True)\n    return [elem for (k, order, elem) in result]\n\n# If available, use C implementation\ntry:\n    from _heapq import *\nexcept ImportError:\n    pass\ntry:\n    from _heapq import _heapreplace_max\nexcept ImportError:\n    pass\ntry:\n    from _heapq import _heapify_max\nexcept ImportError:\n    pass\ntry:\n    from _heapq import _heappop_max\nexcept ImportError:\n    pass\n\n\nif __name__ == \"__main__\":\n\n    import doctest # pragma: no cover\n    print(doctest.testmod()) # pragma: no cover\n", 601]}, "functions": {"_get_sep (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:41)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 41], "isabs (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:60)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 60], "join (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:71)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 71], "islink (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:164)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 164], "_joinrealpath (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:397)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 397], "normpath (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:334)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 334], "abspath (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:373)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 373], "realpath (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:388)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 388], "dirname (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:150)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 150], "normcase (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py:52)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/posixpath.py", 52], "getpreferredencoding (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py:33)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_bootlocale.py", 33], "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:260)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py", 260], "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:309)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py", 309], "decode (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py:319)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/codecs.py", 319], "readInData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:44)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 44], "isstring (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:595)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 595], "__next (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:233)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 233], "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:224)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 224], "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:76)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 76], "tell (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:286)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 286], "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:111)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 111], "get (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:254)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 254], "match (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:249)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 249], "_class_escape (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:295)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 295], "_uniq (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:432)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 432], "append (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:172)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 172], "__len__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:160)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 160], "__getitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:164)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 164], "__setitem__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:168)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 168], "_parse (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:493)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 493], "_parse_sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:435)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 435], "fix_flags (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:921)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 921], "parse (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:937)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 937], "getwidth (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:174)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 174], "_get_iscased (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:453)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 453], "_get_literal_prefix (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:461)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 461], "_get_charset_prefix (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:492)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 492], "_compile_info (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:536)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 536], "_simple (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:423)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 423], "_optimize_charset (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:276)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 276], "_compile_charset (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:249)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 249], "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:71)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 71], "_code (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:598)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 598], "groups (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py:81)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_parse.py", 81], "compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py:759)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/sre_compile.py", 759], "__new__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:670)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py", 670], "__call__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:358)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py", 358], "__and__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py:977)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/enum.py", 977], "_compile (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:289)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py", 289], "sub (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py:203)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/re.py", 203], "cleanAndTokenize (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:61)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 61], "__subclasshook__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py:409)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/_collections_abc.py", 409], "__subclasscheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:121)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py", 121], "__instancecheck__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py:117)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/abc.py", 117], "update (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:649)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py", 649], "__init__ (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:581)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py", 581], "getWordCount (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:78)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 78], "getWordFrequencies (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:96)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 96], "getWordData (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:122)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 122], "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:563)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py", 563], "<listcomp> (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:577)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py", 577], "nlargest (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py:521)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/heapq.py", 521], "most_common (/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py:600)": ["/Users/matthewbass/opt/anaconda3/envs/CS337-Operating-Systems/lib/python3.9/collections/__init__.py", 600], "<listcomp> (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:175)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 175], "printTopNWords (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:156)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 156], "printWordFrequencyOverYears (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:183)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 183], "runWordCounter (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:214)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 214], "main (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:255)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 255], "<module> (/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py:1)": ["/Users/matthewbass/Documents/School_Colby/Colby/spring22/CS337-Operating-Systems/Projects/Proj5/serial_code_4.py", 1]}}}